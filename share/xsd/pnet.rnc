# This file is part of GPI-Space.
# Copyright (C) 2021 Fraunhofer ITWM
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

default namespace = ""
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace ns_1 = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace xsd = "http://www.w3.org/2001/XMLSchema"

a:documentation [
  "\x{a}" ~
  "    \x{a}" ~
  "    petri nets with\x{a}" ~
  "      typed ports\x{a}" ~
  "      typed places\x{a}" ~
  "      typed tokens\x{a}" ~
  "      user defined types\x{a}" ~
  "      hierarchical structure\x{a}" ~
  "      hierarchical properties\x{a}" ~
  "    \x{a}" ~
  "  "
]
start = element defun { function_type }
      | element props { property_map_list_type }
      | element structs { struct_list_type }
      | element template { template_type }
transition_include_type = attribute href { xsd:anyURI }
struct_include_type = attribute href { xsd:anyURI }
function_include_type = attribute href { xsd:anyURI }
properties_include_type = attribute href { xsd:anyURI }
cinclude_type = attribute href { xsd:anyURI }
flag_type = attribute flag { xsd:string }
property_type =
  attribute key { xsd:NCName },
  attribute value { xsd:string }
property_map_type =
  (element property { property_type }
   | element properties { property_map_type }
   | element include-properties { properties_include_type })*,
  attribute name { xsd:NCName }
property_map_list_type =
  (element properties { property_map_type }
   | element include-properties { properties_include_type })*
struct_list_type =
  (element struct { struct_type }
   | element include-structs { struct_include_type })*
struct_field_type =
  attribute name { xsd:NCName },
  attribute type { xsd:string }
struct_type =
  (element field { struct_field_type }
   | element struct { struct_type })*,
  attribute name { xsd:NCName }
# \todo make simple content to avoid
# <token><value>0</value></token> and allow just <token>0</token>
token_type = (element value { xsd:string })*
mod_type =
  (element cinclude { cinclude_type }
   | element ld { flag_type }
   | element cxx { flag_type })*,
  element code { xsd:string }?,
  attribute name { xsd:NCName },
  attribute function { xsd:string },
  (attribute eureka-group { xsd:string }?)
  >> a:documentation [
       "\x{a}" ~
       "            default value is : false"
     ],
  ([ ns_1:defaultValue = "false" ]
   attribute pass_context { xsd:boolean }?)
  >> a:documentation [
       "\x{a}" ~
       "            default value is : true"
     ],
  ([ ns_1:defaultValue = "true" ]
   attribute require_function_unloads_without_rest { xsd:boolean }?)
  >> a:documentation [
       "\x{a}" ~
       "            default value is : true"
     ],
  [ ns_1:defaultValue = "true" ]
  attribute require_module_unloads_without_rest { xsd:boolean }?
mod_type_with_target =
  mod_type,
  attribute target { xsd:string }
type_map_type =
  attribute replace { xsd:NCName },
  attribute with { xsd:string }
type_get_type = attribute name { xsd:NCName }
template_use_type =
  (element type-map { type_map_type }
   | element type-get { type_get_type })*,
  attribute name { xsd:NCName },
  attribute use { xsd:string }
use_type = attribute name { xsd:NCName }
require_type =
  attribute key { xsd:string }
  >> a:documentation [
       "\x{a}" ~
       "            default value is : true"
     ],
  [ ns_1:defaultValue = "true" ] attribute mandatory { xsd:boolean }?
template_parameter_type = attribute type { xsd:NCName }
place_type =
  (element properties { property_map_type }
   | element include-properties { properties_include_type })*,
  element token { token_type }*,
  attribute name { xsd:NCName },
  attribute type { xsd:string }
  >> a:documentation [
       "\x{a}" ~
       "            default value is : false"
     ],
  ([ ns_1:defaultValue = "false" ] attribute virtual { xsd:boolean }?)
  >> a:documentation [
       "\x{a}" ~
       "            default value is : false"
     ],
  [ ns_1:defaultValue = "false" ] attribute put_token { xsd:boolean }?
port_type =
  (element properties { property_map_type }
   | element include-properties { properties_include_type })*,
  attribute name { xsd:NCName },
  attribute type { xsd:string },
  attribute place { xsd:string }?
preferences_type = (element target { xsd:string })+
memory_buffer_type =
  (element properties { property_map_type }
   | element include-properties { properties_include_type })*,
  element size { xsd:string },
  element alignment { xsd:string }?,
  attribute name { xsd:NCName }
  >> a:documentation [
       "\x{a}" ~
       "            default value is : false"
     ],
  [ ns_1:defaultValue = "false" ] attribute read-only { xsd:boolean }?
memory_transfer_get_type =
  (element properties { property_map_type }
   | element include-properties { properties_include_type })*,
  element global { xsd:string },
  element local { xsd:string }
  >> a:documentation [
       "\x{a}" ~
       "            default value is : false"
     ],
  [ ns_1:defaultValue = "false" ]
  attribute allow-empty-ranges { xsd:boolean }?
memory_transfer_put_type =
  (element properties { property_map_type }
   | element include-properties { properties_include_type })*,
  element global { xsd:string },
  element local { xsd:string }
  >> a:documentation [
       "\x{a}" ~
       "            default value is : false"
     ],
  ([ ns_1:defaultValue = "false" ]
   attribute not-modified-in-module-call { xsd:boolean }?)
  >> a:documentation [
       "\x{a}" ~
       "            default value is : false"
     ],
  [ ns_1:defaultValue = "false" ]
  attribute allow-empty-ranges { xsd:boolean }?
connect_type =
  (element properties { property_map_type }
   | element include-properties { properties_include_type })*,
  attribute place { xsd:string },
  attribute port { xsd:NCName }
connect_response_type =
  (element properties { property_map_type }
   | element include-properties { properties_include_type })*,
  attribute to { xsd:NCName },
  attribute port { xsd:NCName }
connect_eureka_type = attribute port { xsd:NCName }
place_map_type =
  (element properties { property_map_type }
   | element include-properties { properties_include_type })*,
  attribute virtual { xsd:string },
  attribute real { xsd:NCName }
template_type =
  element template-parameter { template_parameter_type }*,
  element defun { function_type },
  attribute name { xsd:ID }?
modules_type =
  element preferences { preferences_type },
  element module { mod_type_with_target }+
function_type =
  (element properties { property_map_type }
   | element include-properties { properties_include_type }
   | element require { require_type }
   | element struct { struct_type }
   | element include-structs { struct_include_type })*,
  (element in { port_type }
   | element out { port_type }
   | element inout { port_type }
   | element tunnel { port_type })*,
  (element memory-buffer { memory_buffer_type }
   | element memory-get { memory_transfer_get_type }
   | element memory-put { memory_transfer_put_type }
   | element memory-getput { memory_transfer_put_type })*,
  (element expression { xsd:string }
   | element module { mod_type }
   | element modules { modules_type }
   | element net { net_type }),
  element condition { xsd:string }*,
  attribute name { xsd:NCName }?
transition_type =
  (element properties { property_map_type }
   | element include-properties { properties_include_type }
   | element require { require_type })*,
  (element defun { function_type }
   | element include-function { transition_include_type }
   | element use { use_type }),
  (element connect-in { connect_type }
   | element connect-out { connect_type }
   | element connect-out-many { connect_type }
   | element connect-inout { connect_type }
   | element connect-read { connect_type }
   | element connect-response { connect_response_type }
   | element connect-eureka { connect_eureka_type }
   | element place-map { place_map_type }
   | element condition { xsd:string })*,
  attribute name { xsd:NCName },
  (attribute priority { xsd:nonNegativeInteger }?)
  >> a:documentation [
       "\x{a}" ~
       "            default value is : false"
     ],
  [ ns_1:defaultValue = "false" ] attribute inline { xsd:boolean }?
net_type =
  (element include-properties { properties_include_type }
   | element include-structs { struct_include_type }
   | element include-template { function_include_type }
   | element place { place_type }
   | element properties { property_map_type }
   | element specialize { template_use_type }
   | element struct { struct_type }
   | element template { template_type }
   | element transition { transition_type })*
