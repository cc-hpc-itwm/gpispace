<!-- This file is part of GPI-Space.                                       -->
<!-- Copyright (C) 2022 Fraunhofer ITWM                                    -->
<!--                                                                       -->
<!-- This program is free software: you can redistribute it and/or modify  -->
<!-- it under the terms of the GNU General Public License as published by  -->
<!-- the Free Software Foundation, either version 3 of the License, or     -->
<!-- (at your option) any later version.                                   -->
<!--                                                                       -->
<!-- This program is distributed in the hope that it will be useful,       -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of        -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          -->
<!-- GNU General Public License for more details.                          -->
<!--                                                                       -->
<!-- You should have received a copy of the GNU General Public License     -->
<!-- along with this program. If not, see <https://www.gnu.org/licenses/>. -->

<template name="wait">
  <template-parameter type="T"/>
  <defun>
    <in name="trigger" type="T" place="trigger"/>
    <out name="done" type="control" place="done"/>
    <tunnel name="wait" type="long" place="wait"/>
    <net>
      <place name="trigger" type="T"/>
      <place name="done" type="control"/>
      <place name="wait" type="long" virtual="true"/>

      <transition name="dec">
        <defun>
          <in name="object" type="T"/>
          <in name="wait" type="long"/>
          <out name="wait" type="long"/>
          <expression>
            ${wait} := ${wait} - 1L;
          </expression>
          <condition>${wait} :gt: 0L</condition>
        </defun>
        <connect-in place="trigger" port="object"/>
        <connect-in place="wait" port="wait"/>
        <connect-out place="wait" port="wait"/>
      </transition>

      <transition name="break">
        <defun>
          <out name="trigger" type="control"/>
          <in name="wait" type="long"/>
          <expression>
            ${trigger} := []
          </expression>
          <condition>${wait} :eq: 0L</condition>
        </defun>
        <connect-in place="wait" port="wait"/>
        <connect-out place="done" port="trigger"/>
      </transition>
    </net>
  </defun>
</template>
