<!-- This file is part of GPI-Space.                                       -->
<!-- Copyright (C) 2021 Fraunhofer ITWM                                    -->
<!--                                                                       -->
<!-- This program is free software: you can redistribute it and/or modify  -->
<!-- it under the terms of the GNU General Public License as published by  -->
<!-- the Free Software Foundation, either version 3 of the License, or     -->
<!-- (at your option) any later version.                                   -->
<!--                                                                       -->
<!-- This program is distributed in the hope that it will be useful,       -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of        -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          -->
<!-- GNU General Public License for more details.                          -->
<!--                                                                       -->
<!-- You should have received a copy of the GNU General Public License     -->
<!-- along with this program. If not, see <https://www.gnu.org/licenses/>. -->

<template name="tagged_sequence">
  <template-parameter type="T"/>
  <defun>
    <struct name="PAIR">
      <field name="tag" type="T"/>
      <field name="id" type="long"/>
    </struct>

    <in name="tag" type="T" place="tag"/>
    <in name="amount" type="long" place="N"/>
    <out name="pair" type="PAIR" place="pair"/>

    <net>
      <struct name="state">
        <field name="pair" type="PAIR"/>
        <field name="max" type="long"/>
      </struct>

      <place name="tag" type="T"/>
      <place name="N" type="long"/>
      <place name="pair" type="PAIR"/>
      <place name="state" type="state"/>
      <place name="check_break" type="state"/>
      <place name="credit_check_break" type="control">
        <token><value>[]</value></token>
      </place>

      <transition name="init">
        <defun>
          <in name="tag" type="T"/>
          <in name="N" type="long"/>
          <in name="credit_check_break" type="control"/>
          <out name="state" type="state"/>
          <expression>
            ${state.pair.tag} := ${tag};
            ${state.pair.id} := 0L;
            ${state.max} := ${N};
          </expression>
        </defun>
        <connect-in port="tag" place="tag"/>
        <connect-in port="N" place="N"/>
        <connect-in port="credit_check_break" place="credit_check_break"/>
        <connect-out port="state" place="check_break"/>
      </transition>

      <transition name="step">
        <defun>
          <in name="state" type="state"/>
          <in name="credit_check_break" type="control"/>
          <out name="state" type="state"/>
          <out name="pair" type="PAIR"/>
          <expression>
            ${pair} := ${state.pair};
            ${state.pair.id} := ${state.pair.id} + 1L
          </expression>
        </defun>
        <connect-in port="state" place="state"/>
        <connect-in port="credit_check_break" place="credit_check_break"/>
        <connect-out port="state" place="check_break"/>
        <connect-out port="pair" place="pair"/>
      </transition>

      <transition name="break">
        <defun>
          <in name="state" type="state"/>
          <out name="credit_check_break" type="control"/>
          <expression>
            ${credit_check_break} := []
          </expression>
          <condition>${state.pair.id} :ge: ${state.max}</condition>
        </defun>
        <connect-in place="check_break" port="state"/>
        <connect-out port="credit_check_break" place="credit_check_break"/>
      </transition>

      <transition name="not_break">
        <defun>
          <in name="state" type="state"/>
          <out name="state" type="state"/>
          <out name="credit_check_break" type="control"/>
          <expression>
            ${credit_check_break} := []
          </expression>
          <condition>
            ${state.pair.id} :lt: ${state.max}
          </condition>
        </defun>
        <connect-in place="check_break" port="state"/>
        <connect-out place="state" port="state"/>
        <connect-out port="credit_check_break" place="credit_check_break"/>
      </transition>
    </net>
  </defun>
</template>
