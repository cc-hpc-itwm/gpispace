<!-- Copyright (C) 2025 Fraunhofer ITWM        -->
<!-- SPDX-License-Identifier: GPL-3.0-or-later -->

<defun>
  <tunnel name="cache" type="cache_type" place="cache"/>
  <in name="id" type="long" place="id"/>
  <out name="slot" type="long" place="slot"/>
  <net>
    <place name="cache" type="cache_type" virtual="true"/>
    <place name="id" type="long"/>
    <place name="slot" type="long"/>

    <transition name="in_cache">
      <defun>
        <inout name="cache" type="cache_type"/>
        <in name="id" type="long"/>
        <out name="slot" type="long"/>
        <expression>
          ${slot} := map_get_assignment (${cache.by_id.slot}, ${id});

          ${cache.by_slot.num_users}
            := map_assign ( ${cache.by_slot.num_users}
                          , ${slot}
                          , 1L + map_get_assignment ( ${cache.by_slot.num_users}
                                                    , ${slot}
                                                    )
                          );

          ${cache.slots.available}
            := set_erase (${cache.slots.available}, ${slot});

          ${cache.stat.hit} := ${cache.stat.hit} + 1L;

          ${cache.num.user} := ${cache.num.user} + 1L;
        </expression>
        <condition>
          map_is_assigned (${cache.by_id.slot}, ${id})
        </condition>
      </defun>
      <connect-inout port="cache" place="cache"/>
      <connect-in port="id" place="id"/>
      <connect-out port="slot" place="slot"/>
    </transition>

    <transition name="not_in_cache_has_empty">
      <defun>
        <inout name="cache" type="cache_type"/>
        <in name="id" type="long"/>
        <out name="slot" type="long"/>
        <expression>
          ${slot} := set_top (${cache.slots.empty});

          ${cache.slots.empty} := set_pop (${cache.slots.empty});

          ${cache.by_id.slot}
            := map_assign (${cache.by_id.slot}, ${id}, ${slot});
          ${cache.by_slot.id}
            := map_assign (${cache.by_slot.id}, ${slot}, ${id});

          ${cache.by_slot.num_users}
            := map_assign (${cache.by_slot.num_users}, ${slot}, 1L);

          ${cache.stat.miss.empty} := ${cache.stat.miss.empty} + 1L;

          ${cache.num.user} := ${cache.num.user} + 1L;
        </expression>
        <condition>
          (!map_is_assigned (${cache.by_id.slot}, ${id}))
          :and:
          (!set_empty (${cache.slots.empty}))
        </condition>
      </defun>
      <connect-inout port="cache" place="cache"/>
      <connect-in port="id" place="id"/>
      <connect-out port="slot" place="slot"/>
    </transition>

    <transition name="not_in_cache_not_has_empty_has_available">
      <defun>
        <inout name="cache" type="cache_type"/>
        <in name="id" type="long"/>
        <out name="slot" type="long"/>
        <expression>
          ${slot} := set_top (${cache.slots.available});

          ${cache.slots.available} := set_pop (${cache.slots.available});
          ${cache.slots.filled} := set_erase (${cache.slots.filled}, ${slot});

          /* old content is deleted */
          ${cache.by_id.slot}
            := map_unassign ( ${cache.by_id.slot}
                            , map_get_assignment (${cache.by_slot.id}, ${slot})
                            );

          ${cache.by_id.slot}
            := map_assign (${cache.by_id.slot}, ${id}, ${slot});
          ${cache.by_slot.id}
            := map_assign (${cache.by_slot.id}, ${slot}, ${id});

          ${cache.by_slot.num_users}
            := map_assign (${cache.by_slot.num_users}, ${slot}, 1L);

          ${cache.stat.miss.available} := ${cache.stat.miss.available} + 1L;

          ${cache.num.user} := ${cache.num.user} + 1L;
        </expression>
        <condition>
          (!map_is_assigned (${cache.by_id.slot}, ${id}))
          :and:
          (set_empty (${cache.slots.empty}))
          :and:
          (!set_empty (${cache.slots.available}))
        </condition>
      </defun>
      <connect-inout port="cache" place="cache"/>
      <connect-in port="id" place="id"/>
      <connect-out port="slot" place="slot"/>
    </transition>
  </net>
</defun>
