<!-- This file is part of GPI-Space.                                       -->
<!-- Copyright (C) 2020 Fraunhofer ITWM                                    -->
<!--                                                                       -->
<!-- This program is free software: you can redistribute it and/or modify  -->
<!-- it under the terms of the GNU General Public License as published by  -->
<!-- the Free Software Foundation, either version 3 of the License, or     -->
<!-- (at your option) any later version.                                   -->
<!--                                                                       -->
<!-- This program is distributed in the hope that it will be useful,       -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of        -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          -->
<!-- GNU General Public License for more details.                          -->
<!--                                                                       -->
<!-- You should have received a copy of the GNU General Public License     -->
<!-- along with this program. If not, see <https://www.gnu.org/licenses/>. -->

<defun name="ntom">
  <include-structs href="interval.xpnet"/>
  <in name="interval" type="interval" place="interval_IN"/>
  <out name="value" type="long" place="value"/>

  <net>
    <place name="interval_IN" type="interval"/>
    <place name="interval" type="interval"/>
    <place name="value" type="long"/>
    <place name="check_break" type="interval"/>
    <place name="credit_check_break" type="control">
      <token><value>[]</value></token>
    </place>

    <transition name="init">
      <defun>
        <inout name="interval" type="interval"/>
        <in name="credit_check_break" type="control"/>
        <expression/>
      </defun>
      <connect-in port="interval" place="interval_IN"/>
      <connect-out port="interval" place="check_break"/>
      <connect-in port="credit_check_break" place="credit_check_break"/>
    </transition>

    <transition name="break">
      <defun>
        <in name="interval" type="interval"/>
        <out name="credit_check_break" type="control"/>
        <expression>
          ${credit_check_break} := []
        </expression>
        <condition>
          ${interval.left} :ge: ${interval.right}
        </condition>
      </defun>
      <connect-in place="check_break" port="interval"/>
      <connect-out port="credit_check_break" place="credit_check_break"/>
    </transition>

    <transition name="not_break">
      <defun>
        <inout name="interval" type="interval"/>
        <out name="credit_check_break" type="control"/>
        <expression>
          ${credit_check_break} := []
        </expression>
        <condition>
          ${interval.left} :lt: ${interval.right}
        </condition>
      </defun>
      <connect-in place="check_break" port="interval"/>
      <connect-out place="interval" port="interval"/>
      <connect-out port="credit_check_break" place="credit_check_break"/>
    </transition>

    <transition name="step">
      <defun>
        <inout name="interval" type="interval"/>
        <in name="credit_check_break" type="control"/>
        <out name="value" type="long"/>
        <expression>
          ${value} := ${interval.left};
          ${interval.left} := ${interval.left} + 1L
        </expression>
      </defun>
      <connect-in place="interval" port="interval"/>
      <connect-in port="credit_check_break" place="credit_check_break"/>
      <connect-out place="check_break" port="interval"/>
      <connect-out place="value" port="value"/>
    </transition>
  </net>
</defun>
