<!-- This file is part of GPI-Space.                                       -->
<!-- Copyright (C) 2020 Fraunhofer ITWM                                    -->
<!--                                                                       -->
<!-- This program is free software: you can redistribute it and/or modify  -->
<!-- it under the terms of the GNU General Public License as published by  -->
<!-- the Free Software Foundation, either version 3 of the License, or     -->
<!-- (at your option) any later version.                                   -->
<!--                                                                       -->
<!-- This program is distributed in the hope that it will be useful,       -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of        -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          -->
<!-- GNU General Public License for more details.                          -->
<!--                                                                       -->
<!-- You should have received a copy of the GNU General Public License     -->
<!-- along with this program. If not, see <https://www.gnu.org/licenses/>. -->

<template name="replicate">
  <template-parameter type="T"/>
  <defun>
    <in name="n" type="long" place="n"/>
    <in name="x" type="T" place="x"/>
    <tunnel name="obj" type="T" place="obj"/>
    <net>
      <place name="n" type="long"/>
      <place name="x" type="T"/>
      <place name="obj" type="T" virtual="true"/>
      <transition name="done">
        <defun>
          <in name="n" type="long"/>
          <in name="x" type="T"/>
          <expression/>
          <condition>
            ${n} :le: 0L
          </condition>
        </defun>
        <connect-in port="n" place="n"/>
        <connect-in port="x" place="x"/>
      </transition>
      <transition name="replicate">
        <defun>
          <inout name="n" type="long"/>
          <inout name="x" type="T"/>
          <expression>
            ${n} := ${n} - 1L;
          </expression>
          <condition>
            ${n} :gt: 0L
          </condition>
        </defun>
        <connect-inout port="n" place="n"/>
        <connect-read port="x" place="x"/>
        <connect-out port="x" place="obj"/>
      </transition>
    </net>
  </defun>
</template>
