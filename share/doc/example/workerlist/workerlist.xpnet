<!-- Copyright (C) 2023 Fraunhofer ITWM        -->
<!-- SPDX-License-Identifier: GPL-3.0-or-later -->

<defun name="workerlist">
  <in name="num_workers" type="unsigned long" place="num_workers"/>
  <out name="workers" type="list" place="workers"/>
  <out name="hostnames" type="map" place="hostnames"/>

  <net>
    <place name="num_workers" type="unsigned long"/>
    <place name="workers" type="list"/>
    <place name="hostnames" type="map"/>

    <transition name="run">
      <defun>
        <properties name="fhg">
          <properties name="drts">
            <properties name="schedule">
              <property key="num_worker">"${num_workers}"</property>
            </properties>
          </properties>
        </properties>
        <in name="num_workers" type="unsigned long"/>
        <out name="workers" type="list"/>
        <out name="hostnames" type="map"/>
        <module name="workerlist" function="run (workers, hostnames)"
                pass_context="true">
          <ld flag="-lwe-dev" />
          <code><![CDATA[
            const std::set<std::string> ws (_pnetc_context->workers());

            if (ws.empty())
            {
              throw std::logic_error ("ws is empty!");
            }

            workers.assign (ws.begin(), ws.end());

            for ( std::set<std::string>::const_iterator it (ws.begin())
                ; it != ws.end()
                ; ++it
                )
            {
              hostnames[*it] = _pnetc_context->worker_to_hostname (*it);
            }
          ]]></code>
        </module>
      </defun>
      <connect-in port="num_workers" place="num_workers"/>
      <connect-out port="workers" place="workers"/>
      <connect-out port="hostnames" place="hostnames"/>
    </transition>
  </net>
</defun>
