<!-- Copyright (C) 2025 Fraunhofer ITWM        -->
<!-- SPDX-License-Identifier: GPL-3.0-or-later -->

<defun>
  <require key="produce"/>
  <in name="memory" type="global_memory_range"/>
  <in name="block_size" type="unsigned long"/>
  <in name="tag" type="unsigned long"/>
  <inout name="block" type="block"/>
  <memory-buffer name="buffer">
    <size>
      ${block_size}
    </size>
  </memory-buffer>
  <memory-put not-modified-in-module-call="true">
    <global>
      ${range.handle} := ${memory.handle};
      ${range.offset} := (2UL * ${block.slot} + ${tag}) * ${block_size};
      ${range.size} := ${block_size};
      stack_push (List(), ${range})
    </global>
    <local>
      ${range.buffer} := "buffer";
      ${range.offset} := 0UL;
      ${range.size} := ${block_size};
      stack_push (List(), ${range})
    </local>
  </memory-put>
  <module name="subnetwork" function="produce (buffer, tag, block, block_size)">
    <cinclude href="numeric"/>
    <code><![CDATA[
    using T = unsigned long;

    auto const count (block_size / sizeof (T));

    auto data (static_cast<T*> (buffer));

    std::iota (data, data + count, block.id + tag);
    ]]></code>
  </module>
</defun>
