<!-- Copyright (C) 2023 Fraunhofer ITWM        -->
<!-- SPDX-License-Identifier: GPL-3.0-or-later -->

<!-- return
     - if no input is "magic" -> their sum
     - if one input is "magic" -> their product
     - if both inputs are "magic" -> zero
-->

<defun name="prio_sum">
  <in name="a" type="long" place="a"/>
  <in name="b" type="long" place="b"/>
  <in name="magic" type="long" place="magic"/>
  <out name="c" type="long" place="c"/>
  <net>
    <place name="a" type="long"/>
    <place name="c" type="long"/>
    <place name="b" type="long"/>
    <place name="magic" type="long"/>

    <transition name="conditional_zero" priority="2">
      <defun>
        <in name="a" type="long"/>
        <in name="b" type="long"/>
        <in name="magic" type="long"/>
        <out name="c" type="long"/>
        <expression>${c} := 0L</expression>
      </defun>
      <condition>
        (${a} :eq: ${magic}) :and: (${b} :eq: ${magic})
      </condition>
      <connect-in port="magic" place="magic"/>
      <connect-in port="a" place="a"/>
      <connect-in port="b" place="b"/>
      <connect-out port="c" place="c"/>
    </transition>

    <transition name="conditional_product" priority="1">
      <defun>
        <in name="a" type="long"/>
        <in name="b" type="long"/>
        <in name="magic" type="long"/>
        <out name="c" type="long"/>
        <expression>${c} := ${a} * ${b}</expression>
      </defun>
      <condition>
        (${a} :eq: ${magic}) :or: (${b} :eq: ${magic})
      </condition>
      <connect-in port="magic" place="magic"/>
      <connect-in port="a" place="a"/>
      <connect-in port="b" place="b"/>
      <connect-out port="c" place="c"/>
    </transition>

    <transition name="sum" priority="0">
      <defun>
        <in name="a" type="long"/>
        <in name="b" type="long"/>
        <out name="c" type="long"/>
        <expression>${c} := ${a} + ${b}</expression>
      </defun>
      <connect-in port="a" place="a"/>
      <connect-in port="b" place="b"/>
      <connect-out port="c" place="c"/>
    </transition>

  </net>
</defun>
