#! /bin/bash

# arguments: (optional) path to cmake binary, defaults to cmake3 or
#            cmake, if available, else aborts.
# arguments: (optional) rif strategy to use, defaults to ssh.
# arguments: (optional) additional parameters to pass to the drts
#            started by the selftest, e.g. --rif-strategy-parameters.
# requires: $CXX is compiler with --std=c++17 available
# requires: $GPISpace_ROOT or $CMAKE_PREFIX_PATH or $GPISpace_DIR set
# optional: $GSPC_NODEFILE_FOR_TESTS pointing to a path of a nodefile
#           to use. If not set, the current host is used.
# optional: $SWH_INSTALL_DIR to specify an installation directory for
#           the example that can be reached from all nodes in the given
#           nodefile. If not set, a local directory one is used.
# optional: $GMP_PREFIX to allow building the miller-rabin
#           "third-party" example independent of building
#           stochastic-with-heureka itself.

set -euo pipefail

cmake_bin="${1:-$(command -v cmake3 2>/dev/null || command -v cmake)}"
rif_strategy="${2:-ssh}"
shift 2 || true

cleanups=()
function push_cleanup()
{
  cleanups+=("${@}")
}
function pop_cleanup()
{
  eval "${cleanups[${#cleanups[@]}-1]}"
  unset -v cleanups[${#cleanups[@]}-1]
}
function cleanup()
{
  while [[ ${#cleanups[@]} -ne 0 ]]
  do
    pop_cleanup
  done
}
trap cleanup EXIT

source_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"

build_dir="$(mktemp -d)"
push_cleanup "rm -rf \"${build_dir}\""

install_dir="${SWH_INSTALL_DIR:-$(mktemp -d)}"
push_cleanup "rm -rf \"${install_dir}\""

test_dir="$(mktemp -d)"
push_cleanup "rm -rf \"${test_dir}\""

if test -n "${GSPC_NODEFILE_FOR_TESTS:-}"
then
  cp "${GSPC_NODEFILE_FOR_TESTS}" "${test_dir}/nodefile"
else
  hostname > "${test_dir}/nodefile"
fi
push_cleanup "rm \"${test_dir}/nodefile\""


pushd "${build_dir}"
push_cleanup "popd"

"${cmake_bin}" "${source_dir}" -DCMAKE_INSTALL_PREFIX="${install_dir}"
make install


ctest --output-on-failure

pop_cleanup

drts_arguments=(--nodefile "${test_dir}/nodefile")
drts_arguments+=(--rif-strategy "${rif_strategy}")
drts_arguments+=("${@}")

function run_test_do_check() {
  local name="${1}"
  local expected="${2}"
  local got="${3}"

  if [[ ! "${got}" =~ ${expected} ]]
  then
    echo >&2 "Test '${name}' failed. Expected:"
    echo >&2 "${expected}"
    false
  fi

  echo "Test '${name}' succeeded."
}

function run_test() {
  local name expected arguments binary lines

  name="${1}"; shift
  expected="${1}"; shift
  binary="${1}"; shift
  arguments=("${@}")

  lines=$(wc -l <<<"${expected}")

  echo "Running test '${name}'..."
  run_test_do_check \
    "${name}" \
    "${expected}" \
    "$("${binary}" "${drts_arguments[@]}" "${arguments[@]}" \
          | tee "/dev/stderr" \
          | tail -n "${lines}")"
}

run_test "asianopt" \
  "got_heureka = false
number_of_rolls_done = 100000
price = 6895.57
std_dev = 0.581295" \
  \
  "${install_dir}/bin/run-asianopt" \
    --post-process-per-node 1 \
    --reduce-per-node 10 \
    --roll-and-heureka-per-node 10 \
    --number-of-rolls 100000 \
    --rolls-at-once 1000 \
    --seed 3134 \
    --K 85.0 \
    --S 7000.0 \
    --T 1.02 \
    --d 0.0 \
    --r 0.05 \
    --sigma 0.2 \
    --control-variate false \
    --first-fixing 1 \
    --fixings-per-year 50.0 \
    --option-type FixC

run_test "barropt" \
  "got_heureka = false
number_of_rolls_done = 100000
value = 6061.46
stddev = 6.89952" \
  \
  "${install_dir}/bin/run-barropt" \
    --post-process-per-node 1 \
    --reduce-per-node 10 \
    --roll-and-heureka-per-node 10 \
    --number-of-rolls 100000 \
    --rolls-at-once 1000 \
    --seed 3134 \
    --S 7000.0 \
    --K 85.0 \
    --H 10000.0 \
    --r 0.05 \
    --sigma 0.2 \
    --T 1.02 \
    --timesteps 100 \
    --option-type Call \
    --barrier-type UaO

probably_a_prime_number="656692050181897513638241554199181923922955921760928836766304161790553989228223793461834703506872747071705167995972707253940099469869516422893633357693"

if test -e "${install_dir}/bin/run-miller-rabin"
then

  run_test "miller-rabin prime" \
    "got_heureka = false
number_of_rolls_done = 250000
result = probably prime" \
    \
    "${install_dir}/bin/run-miller-rabin" \
      --post-process-per-node 1 \
      --reduce-per-node 10 \
      --roll-and-heureka-per-node 10 \
      --number-of-rolls 250000 \
      --rolls-at-once 10000 \
      --seed 3134 \
      --to-test "${probably_a_prime_number}"

fi

if test -n "${GMP_PREFIX:-}"
then

  pushd "${install_dir}/example/miller-rabin"
  push_cleanup "popd"
  push_cleanup "make clean"

  make \
    SWH_PREFIX="${install_dir}" \
    GMP_PREFIX="${GMP_PREFIX}" \
    GSPC_PREFIX="$(grep '^GSPC_HOME:PATH=' "${build_dir}/CMakeCache.txt" | sed -e 's,GSPC_HOME:PATH=,,')"

  run_test "miller-rabin prime, third-party compiled" \
    "result = y( 0)" \
    \
    "${install_dir}/bin/run-generic-stochastic_with_heureka" \
      --implementation "${install_dir}/example/miller-rabin/miller-rabin.so" \
      --post-process-per-node 1 \
      --reduce-per-node 10 \
      --roll-and-heureka-per-node 10 \
      --number-of-rolls 250000 \
      --rolls-at-once 10000 \
      --seed 3134 \
      --user-data "$(./generate-user-data "${probably_a_prime_number}")"

  run_test_do_check "miller-rabin prime, third-party compiled: show-result" \
    "result = probably prime" \
    "$(./show-result "y( 0)")"

  pop_cleanup
  pop_cleanup

fi

# todo: miller-rabin user example

run_test "pcp" \
  "solution (abb|cbbb)" \
  \
  "${install_dir}/bin/run-pcp" \
    --post-process-per-node 1 \
    --reduce-per-node 10 \
    --roll-and-heureka-per-node 10 \
    --number-of-rolls 10000 \
    --rolls-at-once 100 \
    --seed 3134

run_test "pi" \
  "got_heureka = false
number_of_rolls_done = 100000000
result = 78538025 / 100000000
reduced = 3141521 / 4000000
PI = 3.14152
err = -7.16536e-05" \
  \
  "${install_dir}/bin/run-pi" \
    --post-process-per-node 1 \
    --reduce-per-node 10 \
    --roll-and-heureka-per-node 10 \
    --number-of-rolls 100000000 \
    --rolls-at-once 1000000 \
    --seed 3134

run_test "tasks_with_normal_distributed_duration" \
  "got_heureka = false
number_of_rolls_done = 1000
number_of_tasks = 1000" \
  \
  "${install_dir}/bin/run-tasks_with_normal_distributed_duration" \
    --post-process-per-node 1 \
    --reduce-per-node 1 \
    --roll-and-heureka-per-node 25 \
    --number-of-rolls 1000 \
    --rolls-at-once 1 \
    --seed 3134 \
    --mean 50 \
    --stddev 40

echo "The stochastic-with-heureka selftest succeeded."
