<defun name="stream_one_module_call">
  <include-structs href="stream/work_package.xpnet"/>

  <struct name="work_package_with_timestamp">
    <field name="work_package" type="work_package"/>
    <field name="produced" type="long"/>
  </struct>

  <include-structs href="statistics.xpnet"/>

  <in name="log_file" type="string" place="log_file"/>

  <out name="done" type="control" place="done"/>
  <out name="statistic" type="Statistic" place="statistic"/>

  <net>
    <place name="log_file" type="string"/>
    <place name="done" type="control"/>
    <place name="statistic" type="Statistic"/>

    <place name="stop" type="control"/>

    <transition name="done">
      <defun>
        <inout name="trigger" type="control"/>
        <expression/>
      </defun>
      <connect-in port="trigger" place="stop"/>
      <connect-out port="trigger" place="done"/>
    </transition>

    <place name="work_package" type="work_package"/>

    <transition name="process_and_mark_free">
      <defun>
        <require key="process_and_mark_free" mandatory="true"/>
        <in name="log_file" type="string"/>
        <in name="work_package" type="work_package"/>
        <out name="statistic" type="Statistic"/>
        <memory-buffer name="ptr_data" read-only="true">
          <size>
            ${work_package.data.size}
          </size>
        </memory-buffer>
        <memory-get>
          <global>
            stack_push (List(), ${work_package.data})
          </global>
          <local>
            ${range.buffer} := "ptr_data";
            ${range.offset} := 0UL;
            ${range.size} := ${work_package.data.size};
            stack_push (List(), ${range})
          </local>
        </memory-get>

        <memory-buffer name="ptr_flag">
          <size>
            ${work_package.meta.size}
          </size>
        </memory-buffer>
        <memory-put not-modified-in-module-call="true">
          <global>
            stack_push (List(), ${work_package.meta})
          </global>
          <local>
            ${range.buffer} := "ptr_flag";
            ${range.offset} := 0UL;
            ${range.size} := ${work_package.meta.size};
            stack_push (List(), ${range})
          </local>
        </memory-put>
        <module name="stream"
                function="process ( log_file
                                  , work_package
                                  , ptr_data
                                  , ptr_flag
                                  , statistic
                                  )">
          <cinclude href="drts/stream.hpp"/>
          <cinclude href="process.hpp"/>
          <cinclude href="statistic.hpp"/>
          <cxx flag="--std=c++11"/>
          <ld flag="-lgspc"/>
          <code><![CDATA[
          static fhg::util::statistic delta ("mark_free: delta");

          std::chrono::high_resolution_clock::rep const produced
            ( share_example_stream::process
              (log_file, {ptr_data, work_package.data.size})
            );

          gspc::stream::mark_free
            (work_package.flag, {ptr_flag, work_package.meta.size});

          delta.tick (delta.now() - produced);

          statistic.min = delta.min();
          statistic.max = delta.max();
          statistic.sum = delta.sum();
          statistic.sqsum = delta.sqsum();
          statistic.count = delta.count();
          ]]></code>
        </module>
      </defun>
      <connect-read port="log_file" place="log_file"/>
      <connect-in port="work_package" place="work_package"/>
      <connect-out port="statistic" place="statistic"/>
    </transition>
  </net>
</defun>
