<defun name="ping_pong">
  <struct name="Statistics">
    <field name="count" type="unsigned long"/>
  </struct>

  <in name="n" type="unsigned long" place="n"/>
  <out name="statistics" type="Statistics" place="final_statistics"/>
  <net>
    <place name="n" type="unsigned long"/>
    <place name="final_statistics" type="Statistics"/>
    <place name="statistics" type="Statistics">
      <token>
        <value>
          Struct [ count := 0UL ]
        </value>
      </token>
    </place>

    <transition name="generate_next_sequence_number">
      <defun>
        <inout name="n" type="unsigned long"/>
        <expression/>
        <condition>
          ${n} :gt: 0UL
        </condition>
      </defun>
      <connect-in port="n" place="n"/>
      <connect-out port="n" place="next_seq"/>
    </transition>

    <place name="next_seq" type="unsigned long"/>

    <transition name="ping">
      <defun>
        <require key="ping" mandatory="true"/>
        <inout name="seq" type="unsigned long"/>
        <module name="ping_pong" function="ping (seq)">
          <code><![CDATA[
          //! \note empty module call to measure scheduling overhead
          ]]></code>
        </module>
      </defun>
      <connect-in port="seq" place="next_seq"/>
      <connect-out port="seq" place="ping"/>
    </transition>

    <place name="ping" type="unsigned long"/>

    <transition name="pong">
      <defun>
        <require key="pong" mandatory="true"/>
        <inout name="statistics" type="Statistics"/>
        <inout name="seq" type="unsigned long"/>
        <module name="ping_pong" function="pong (seq, statistics)">
          <code><![CDATA[
          ++statistics.count;
          --seq;
          ]]></code>
        </module>
      </defun>
      <connect-in port="seq" place="ping"/>
      <connect-out port="seq" place="n"/>
      <connect-inout port="statistics" place="statistics"/>
    </transition>

    <transition name="finalize">
      <defun>
        <in name="n" type="unsigned long"/>
        <inout name="statistics" type="Statistics"/>
        <expression/>
      </defun>
      <condition>
        ${n} :eq: 0UL
      </condition>
      <connect-in port="n" place="n"/>
      <connect-in port="statistics" place="statistics"/>
      <connect-out port="statistics" place="final_statistics"/>
    </transition>
  </net>
</defun>
