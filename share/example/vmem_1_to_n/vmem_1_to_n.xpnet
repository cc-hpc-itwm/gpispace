<defun name="vmem_1_to_n">
  <in name="outer" type="long" place="N"/>
  <in name="inner" type="long" place="M"/>
  <in name="num_long_to_transfer" type="long" place="num_long"/>
  <in name="seed" type="long" place="seed"/>
  <out name="out" type="control" place="out"/>

  <net>
    <struct name="config">
      <field name="handle" type="long"/>
      <field name="num_long" type="long"/>
      <field name="seed" type="long"/>
    </struct>

    <place name="N" type="long"/>
    <place name="M" type="long"/>
    <place name="num_long" type="long"/>
    <place name="seed" type="long"/>
    <place name="Nstep" type="long"/>
    <place name="wait" type="long"/>

    <place name="pending" type="long"/>

    <place name="done" type="control"/>
    <place name="out" type="control"/>

    <place name="config" type="config"/>

    <include-template href="dup.xml"/>
    <specialize name="dup_long" use="dup">
      <type-map replace="T" with="long"/>
    </specialize>

    <transition name="scatter_N" inline="true">
      <use name="dup_long"/>
      <connect-in port="in" place="N"/>
      <connect-out port="one" place="Nstep"/>
      <connect-out port="two" place="wait"/>
    </transition>

    <transition name="initialize">
      <defun>
        <in name="seed" type="long"/>
        <in name="num_long" type="long"/>
        <out name="config" type="config"/>
        <module name="vmem_1_to_n" function="initialize ( num_long
                                                        , seed
                                                        , config
                                                        )">
          <cinclude href="fvm-pc/pc.hpp"/>
          <cinclude href="fhglog/LogMacros.hpp"/>
          <cinclude href="boost/random.hpp"/>
          <cinclude href="limits"/>
          <cinclude href="stdexcept"/>
          <code><![CDATA[
            const size_t size (num_long * sizeof (long));

            if (size > fvmGetShmemSize())
            {
              throw std::runtime_error ("BUMMER: size > fvmGetShmemSize()");
            }

            const fvmAllocHandle_t handle
              (fvmGlobalAllocExact (size, "vmem_1_to_n"));

            if (size > 0 && !handle)
            {
              throw std::runtime_error ("BUMMER: alloc (handle) returned 0");
            }

              MLOG (INFO, "generating " << num_long << " values with seed " << seed);
              long *a (static_cast<long*>(fvmGetShmemPtr()));

              boost::uniform_int<long> rand ( std::numeric_limits<long>::min()
                                            , std::numeric_limits<long>::max()
                                            );

              boost::mt19937 engine (seed);

              for (unsigned long i (0); i < num_long; ++i, ++a)
              {
                *a = rand (engine);
              }

              waitComm (fvmPutGlobalData (handle, 0, size, 0, 0));

            config.handle = static_cast<long>(handle);
            config.num_long = num_long;
            config.seed = seed;

            MLOG (INFO, "initialize: config " << config);
          ]]></code>
        </module>
      </defun>
      <connect-in port="seed" place="seed"/>
      <connect-in port="num_long" place="num_long"/>
      <connect-out port="config" place="config"/>
    </transition>

    <transition name="finalize">
      <defun>
        <in name="trigger" type="control"/>
        <in name="config" type="config"/>
        <out name="trigger" type="control"/>
        <module name="vmem_1_to_n" function="finalize (trigger, config)">
          <cinclude href="fvm-pc/pc.hpp"/>
          <cinclude href="fhglog/LogMacros.hpp"/>
          <code><![CDATA[
          const fvmAllocHandle_t& handle (config.handle);

          if (handle)
          {
            fvmGlobalFree (handle);
          }

          MLOG (INFO, "finalized");
          ]]></code>
        </module>
      </defun>
      <connect-in port="trigger" place="all_done"/>
      <connect-read port="config" place="config"/>
      <connect-out port="trigger" place="finalized"/>
    </transition>

    <place name="finalized" type="control"/>

    <transition name="generate" inline="true">
      <include-function href="sequence.xml"/>
      <connect-in place="Nstep" port="amount"/>
      <connect-out port="out" place="pending"/>
    </transition>

    <transition name="inner" inline="false">
      <include-function href="inner.xpnet"/>
      <connect-read port="N" place="M"/>
      <connect-read port="config" place="config"/>
      <connect-out port="done" place="done"/>
      <connect-in port="trigger" place="pending"/>
    </transition>

    <include-template href="wait.xml"/>
    <specialize name="wait_control" use="wait">
      <type-map replace="T" with="control"/>
    </specialize>

    <transition name="wait">
      <use name="wait_control"/>
      <connect-in port="trigger" place="done"/>
      <connect-out port="done" place="all_done"/>
      <place-map real="wait" virtual="wait"/>
    </transition>

    <place name="all_done" type="control"/>

    <transition name="cleanup">
      <defun>
        <in name="M" type="long"/>
        <in name="config" type="config"/>
        <in name="trigger" type="control"/>
        <out name="done" type="control"/>
        <expression>
          ${done} := []
        </expression>
      </defun>
      <connect-in port="M" place="M"/>
      <connect-in port="config" place="config"/>
      <connect-in port="trigger" place="finalized"/>
      <connect-out port="done" place="out"/>
    </transition>
  </net>
</defun>
