<defun name="vmem_1_to_n">
  <struct name="global_memory_handle_type">
    <field name="name" type="string"/>
  </struct>

  <struct name="global_memory_range">
    <field name="handle" type="global_memory_handle_type"/>
    <field name="offset" type="unsigned long"/>
    <field name="size" type="unsigned long"/>
  </struct>

  <in name="outer" type="long" place="N"/>
  <in name="inner" type="long" place="M"/>
  <in name="seed" type="long" place="seed"/>
  <in name="memory" type="global_memory_range" place="memory"/>
  <out name="out" type="control" place="out"/>

  <net>
    <struct name="config">
      <field name="seed" type="long"/>
    </struct>

    <place name="N" type="long"/>
    <place name="M" type="long"/>
    <place name="seed" type="long"/>
    <place name="Nstep" type="long"/>
    <place name="wait" type="long"/>
    <place name="memory" type="global_memory_range"/>

    <place name="pending" type="long"/>

    <place name="done" type="control"/>
    <place name="out" type="control"/>

    <place name="config" type="config"/>

    <include-template href="dup.xml"/>
    <specialize name="dup_long" use="dup">
      <type-map replace="T" with="long"/>
    </specialize>

    <transition name="scatter_N" inline="true">
      <use name="dup_long"/>
      <connect-in port="in" place="N"/>
      <connect-out port="one" place="Nstep"/>
      <connect-out port="two" place="wait"/>
    </transition>

    <transition name="initialize">
      <defun>
        <in name="seed" type="long"/>
        <in name="memory" type="global_memory_range"/>
        <out name="config" type="config"/>
        <memory-buffer name="data">
          <size>
            ${memory.size}
          </size>
        </memory-buffer>
        <memory-put>
          <global>
            stack_push (List(), ${memory})
          </global>
          <local>
            ${range.buffer} := "data";
            ${range.offset} := 0UL;
            ${range.size} := ${memory.size};
            stack_push (List(), ${range})
          </local>
        </memory-put>
        <module name="vmem_1_to_n" function="initialize ( seed
                                                        , config
                                                        , data
                                                        , memory
                                                        )">
          <cinclude href="fhglog/LogMacros.hpp"/>
          <cinclude href="boost/random.hpp"/>
          <cinclude href="limits"/>
          <cinclude href="stdexcept"/>
          <code><![CDATA[
          unsigned long const num_long (memory.size / sizeof (long));

          MLOG (INFO, "generating " << num_long << " values with seed " << seed);
          long *a (static_cast<long*>(data));

          boost::uniform_int<long> rand ( std::numeric_limits<long>::min()
                                        , std::numeric_limits<long>::max()
                                        );

          boost::mt19937 engine (seed);

          for (unsigned long i (0); i < num_long; ++i, ++a)
          {
            *a = rand (engine);
          }

          config.seed = seed;

          MLOG (INFO, "initialize: config " << config);
          ]]></code>
        </module>
      </defun>
      <connect-in port="seed" place="seed"/>
      <connect-read port="memory" place="memory"/>
      <connect-out port="config" place="config"/>
    </transition>

    <transition name="finalize">
      <defun>
        <in name="trigger" type="control"/>
        <in name="config" type="config"/>
        <out name="trigger" type="control"/>
        <expression/>
      </defun>
      <connect-in port="trigger" place="all_done"/>
      <connect-read port="config" place="config"/>
      <connect-out port="trigger" place="finalized"/>
    </transition>

    <place name="finalized" type="control"/>

    <transition name="generate" inline="true">
      <include-function href="sequence.xml"/>
      <connect-in place="Nstep" port="amount"/>
      <connect-out port="out" place="pending"/>
    </transition>

    <transition name="inner" inline="false">
      <include-function href="inner.xpnet"/>
      <connect-read port="N" place="M"/>
      <connect-read port="config" place="config"/>
      <connect-read port="memory" place="memory"/>
      <connect-out port="done" place="done"/>
      <connect-in port="trigger" place="pending"/>
    </transition>

    <include-template href="wait.xml"/>
    <specialize name="wait_control" use="wait">
      <type-map replace="T" with="control"/>
    </specialize>

    <transition name="wait">
      <use name="wait_control"/>
      <connect-in port="trigger" place="done"/>
      <connect-out port="done" place="all_done"/>
      <place-map real="wait" virtual="wait"/>
    </transition>

    <place name="all_done" type="control"/>

    <transition name="cleanup">
      <defun>
        <in name="M" type="long"/>
        <in name="config" type="config"/>
        <in name="trigger" type="control"/>
        <out name="done" type="control"/>
        <expression>
          ${done} := []
        </expression>
      </defun>
      <connect-in port="M" place="M"/>
      <connect-in port="config" place="config"/>
      <connect-in port="trigger" place="finalized"/>
      <connect-out port="done" place="out"/>
    </transition>
  </net>
</defun>
