# mirko.rahn@itwm.fraunhofer.de

set -euo pipefail

outer=5
inner=5
num_bytes=$((192 * 2**20))
seed=3141
# \note 8 communication buffers of size 4 MiB are allocated automatically
size_vmem=$((8*4*2**20 + num_bytes))

source "@CMAKE_BINARY_DIR@/test/env.sh"
source "@CMAKE_BINARY_DIR@/test/dir_build.sh"
source "@CMAKE_BINARY_DIR@/test/dir_state.sh"
source "@CMAKE_BINARY_DIR@/test/measured.sh"

DIR_TEST="@CMAKE_CURRENT_SOURCE_DIR@"
DIR_SOURCE="${DIR_TEST}/.."

DIR_LOG="${DIR_STATE}/log"
DIR_PID="${DIR_STATE}/pid"
DIR_INST="${DIR_STATE}/inst"

mkdir -p "${DIR_LOG}"                                       || die $EX_ERR_ENV
mkdir -p "${DIR_PID}"                                       || die $EX_ERR_ENV
mkdir -p "${DIR_INST}"                                      || die $EX_ERR_ENV

KVSD_PID_FILE="${DIR_PID}/kvsd"
GPI_SPACE_PID_FILE="${DIR_PID}/gpi-space"
VMEM_SOCKET=$(mktemp -u -p "${DIR_STATE}")
MAKEFILE_PUT=$(mktemp -p "${DIR_STATE}")
RESULT=$(mktemp -p "${DIR_STATE}")

make=(make)
make+=( MAKEFILE_PUT="${MAKEFILE_PUT}" )
make+=( BUILDDIR="${DIR_BUILD}" )
make+=( LIB_DESTDIR="${DIR_INST}" )
make+=( WE_EXEC_OUTPUT="${RESULT}" )
make+=( -C "${DIR_SOURCE}" )

handle_data=

cleanup()
{
  set +e
  test -n "${handle_data}" && echo memory-free ${handle_data} | $SDPA_HOME/bin/gpish -s "${VMEM_SOCKET}"
  test -s "${GPI_SPACE_PID_FILE}" && kill -9 $(cat "${GPI_SPACE_PID_FILE}")
  rm -rf "${VMEM_SOCKET}"
  rm -rf "${GPI_SPACE_PID_FILE}"
  test -s "${KVSD_PID_FILE}" && kill -9 $(cat "${KVSD_PID_FILE}")
  rm -rf "${KVSD_PID_FILE}"
  ${make[@]} uninstall
  rmdir "${DIR_INST}"
  ${make[@]} clean
  cleanup_dir_build
  rm -r "${RESULT}"
  cleanup_dir_state
}

trap cleanup EXIT

kvs_host=$(hostname)
kvs_port=${UID}

while [ $kvs_port -le 1024 ]
do
    kvs_port=$((kvs_port * 2))
done

"$SDPA_HOME/bin/fhgkvsd"        \
  -p ${kvs_port}                \
  --pidfile "${KVSD_PID_FILE}"  \
  --daemonize                                               || die $EX_ERR_BOOT

FHGLOG_disabled=true                          \
  "${SDPA_HOME}/bin/gpi-space"                \
  --gpi-mem ${size_vmem}                      \
  --kvs-host ${kvs_host}                      \
  --kvs-port ${kvs_port}                      \
  --log-file "${DIR_LOG}/gpi-space.log"       \
  --socket "${VMEM_SOCKET}"                   \
  --pidfile "${GPI_SPACE_PID_FILE}"           \
  --daemonize                                               || die $EX_ERR_BOOT

echo -n "CHECK: gpi-space"

while [ ! -S "${VMEM_SOCKET}" ]
do
  sleep 0.2
  echo -n '.'
done

echo " [OK]"

handle_data=$(echo memory-alloc ${num_bytes} gpi data p | TERM=linux $SDPA_HOME/bin/gpish -s "${VMEM_SOCKET}" | tail -1)

test -n "${handle_data}"                                   || die $EX_ERR_ALLOC

# \todo how to OR-DIE the cat?
cat > "${MAKEFILE_PUT}" <<EOF
PUT_PORT += outer=${outer}L
PUT_PORT += inner=${inner}L
PUT_PORT += num_long_to_transfer="${num_bytes}ULdiv8UL"
PUT_PORT += seed=${seed}L
PUT_PORT += memory=Struct[handle:=Struct[name:=\"${handle_data}\"],offset:=0UL,size:=${num_bytes}UL]
EOF

${make[@]} lib put install                                  || die $EX_ERR_RUN

${make[@]} WE_EXEC_WORKER=1                                             \
           WE_EXEC_OPTS="--mod-path=${DIR_INST}                         \
                         --plugin-path=${SDPA_HOME}/libexec/fhg/plugins \
                         --vmem-enabled                                 \
                         --vmem-shm-size=$((num_bytes))                 \
                         --vmem-socket=${VMEM_SOCKET}"                  \
           run                                              || die $EX_ERR_RUN

test "$(pnetget -i "${RESULT}" -p out)" = "[]"              || die $EX_ERR_RES
