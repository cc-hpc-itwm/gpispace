:doctype: book
:toc:

= `share/gspc/example/workerlist`: Get information about the drts workers used by a module call

== Situation

Wihin a module call, it is required to know which workers the module call is running on and on which hosts these workers have been started, e.g. to start a legacy binary on all participating hosts.

== Run `workerlist`

Building the module has no additional requirements

[source,bash]
----
share/gspc/example/workerlist $ BUILDDIR=$HOME/build
share/gspc/example/workerlist $ mkdir -p $BUILDDIR
share/gspc/example/workerlist $ make -f $SDPA_HOME/share/sdpa/make/common.mk MAIN=workerlist
----

As information about a drts worker is only available when using a real setup, running the net in `we-exec` is not sufficient. Starting a drts as described in  link:../../doc/user.html#_start_and_stop[the user manual] is required. The worker does not need a specific capability and virtual memory is not used

[source,bash]
----
share/gspc/example/workerlist $ sdpa boot -A $BUILDDIR/gen/pnetc/op/ -M -f $NODEFILE worker:1
----

Submitting the workflow and looking at the result is now done via

[source,bash]
----
share/gspc/example/workerlist $ make -f $SDPA_HOME/share/sdpa/make/common.mk MAIN=workerlist PUT_PORT="trigger=[]" submit
share/gspc/example/workerlist $ pnetget --port workers --input $BUILDDIR/workerlist.out
List ("worker-hostname-1")
share/gspc/example/workerlist $ pnetget  --port hostnames --input $BUILDDIR/workerlist.out
Map ["worker-hostname-1" -> "hostname"]
----

== Getting the drts context in a module call

In order for a module call to receive information about the drts, one has to set the `pass_context` attribute of the `<module>` to `true`

[source,xml]
----
        <module name="workerlist" function="run (workers, hostnames)"
                pass_context="true">
----

The drts context is then available via the variable `drts::worker::context* _pnetc_context` which is automatically available in the module call. The type is described in link:../../../../include/drts/worker/context.hpp[include/drts/worker/context.hpp].

Amongst others, it provides the functions `worker_name()`  which returns the name of the worker the module call is executed on and `worker_list()` which contains the names of all workers participating in a module call when requesting multiple workers. It also provides `worker_to_hostname (std::string)` which allows to map from a worker name to a host name, which may be needed to run legacy binaries on all workers.

The drts context also provides the function `set_module_call_do_cancel (boost::function<void()>` which can be used to inform the drts worker on how this module call can be cleanly canceled.
