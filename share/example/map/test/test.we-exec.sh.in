# mirko.rahn@itwm.fraunhofer.de

set -euo pipefail

source "@CMAKE_BINARY_DIR@/test/env.sh"
source "@CMAKE_BINARY_DIR@/test/dir_build.sh"
source "@CMAKE_BINARY_DIR@/test/dir_state.sh"
source "@CMAKE_BINARY_DIR@/test/measured.sh"

DIR_TEST="@CMAKE_CURRENT_SOURCE_DIR@"
DIR_SOURCE="${DIR_TEST}/.."

DIR_LOG="${DIR_STATE}/log"
DIR_PID="${DIR_STATE}/pid"
DIR_INST="${DIR_STATE}/inst"

mkdir -p "${DIR_LOG}"                                       || die $EX_ERR_ENV
mkdir -p "${DIR_PID}"                                       || die $EX_ERR_ENV
mkdir -p "${DIR_INST}"                                      || die $EX_ERR_ENV

KVSD_PID_FILE="${DIR_PID}/kvsd"
GPI_SPACE_PID_FILE="${DIR_PID}/gpi-space"
VMEM_SOCKET=$(mktemp -u -p "${DIR_STATE}")
RESULT=$(mktemp -p "${DIR_STATE}")

make=(make)
make+=( -f "${SDPA_HOME}/share/sdpa/make/common.mk" )
make+=( MAIN=map )
make+=( BUILDDIR="${DIR_BUILD}" )
make+=( LIB_DESTDIR="${DIR_INST}" )
make+=( WE_EXEC_OUTPUT="${RESULT}" )
make+=( CXXLIBRARYPATHS="${DIR_INST}" )
make+=( CXXINCLUDEPATHS="${DIR_SOURCE}" )
make+=( -C "${DIR_SOURCE}" )

IMPLEMENTATION_SO=${1}
VERIFY=${2}
SETUP=${3}

source "${SETUP}"

# \note 8 communication buffers of size 4 MiB are allocated automatically
size_vmem=$((8*4*2**20 + size_input + size_output))

handle_input=
handle_output=

cleanup()
{
  set +e
  test -n "${handle_input}" && echo memory-free ${handle_input} | $SDPA_HOME/bin/gpish -s "${VMEM_SOCKET}"
  test -n "${handle_output}" && echo memory-free ${handle_output} | $SDPA_HOME/bin/gpish -s "${VMEM_SOCKET}"
  test -s "${GPI_SPACE_PID_FILE}" && kill -9 $(cat "${GPI_SPACE_PID_FILE}")
  rm -rf "${VMEM_SOCKET}"
  rm -rf "${GPI_SPACE_PID_FILE}"
  test -s "${KVSD_PID_FILE}" && kill -9 $(cat "${KVSD_PID_FILE}")
  rm -rf "${KVSD_PID_FILE}"
  ${make[@]} uninstall
  rm -rf "${DIR_INST}/libmap-impl.so"
  rmdir "${DIR_INST}"
  ${make[@]} clean
  cleanup_dir_build
  rm -r "${RESULT}"
  cleanup_dir_state
}

trap cleanup EXIT

kvs_host=$(hostname)
kvs_port=${UID}

while [ $kvs_port -le 1024 ]
do
    kvs_port=$((kvs_port * 2))
done

"$SDPA_HOME/bin/fhgkvsd"        \
  -p ${kvs_port}                \
  --pidfile "${KVSD_PID_FILE}"  \
  --daemonize                                               || die $EX_ERR_BOOT

FHGLOG_disabled=true                          \
  "${SDPA_HOME}/bin/gpi-space"                \
  --gpi-mem ${size_vmem}                      \
  --kvs-host ${kvs_host}                      \
  --kvs-port ${kvs_port}                      \
  --log-file "${DIR_LOG}/gpi-space.log"       \
  --socket "${VMEM_SOCKET}"                   \
  --pidfile "${GPI_SPACE_PID_FILE}"           \
  --daemonize                                               || die $EX_ERR_BOOT

echo -n "CHECK: gpi-space"

while [ ! -S "${VMEM_SOCKET}" ]
do
  sleep 0.2
  echo -n '.'
done

echo " [OK]"

handle_input=$(echo memory-alloc ${size_input} gpi input p | TERM=linux $SDPA_HOME/bin/gpish -s "${VMEM_SOCKET}" | tail -1)
handle_output=$(echo memory-alloc ${size_output} gpi output p | TERM=linux $SDPA_HOME/bin/gpish  -s "${VMEM_SOCKET}" | tail -1)

test -n "${handle_input}"                                  || die $EX_ERR_ALLOC
test -n "${handle_output}"                                 || die $EX_ERR_ALLOC

cp "${IMPLEMENTATION_SO}" "${DIR_INST}/libmap-impl.so"     || die $EX_ERR_ENV

${make[@]} lib net install                                  || die $EX_ERR_RUN

"${SDPA_HOME}/bin/pnetput" \
  -p input=Struct[handle:=Struct[name:=\"${handle_input}\"],offset:=0UL,size:=${size_input}UL] \
  -p output=Struct[handle:=Struct[name:=\"${handle_output}\"],offset:=0UL,size:=${size_output}UL] \
  -p num_block=${num_block}UL \
  -p size_block=${size_block}UL \
  -p user_data="${user_data}" \
  --if "${DIR_BUILD}/map.pnet" \
  --of "${DIR_BUILD}/map.pnet.put"

${make[@]} WE_EXEC_WORKER=1                                             \
           WE_EXEC_OPTS="--mod-path=${DIR_INST}                         \
                         --plugin-path=${SDPA_HOME}/libexec/fhg/plugins \
                         --vmem-enabled                                 \
                         --vmem-shm-size=$((2 * size_block))            \
                         --vmem-socket=${VMEM_SOCKET}"                  \
           run                                              || die $EX_ERR_RUN

test "$(pnetget -i "${RESULT}" -p done)" = "[]"             || die $EX_ERR_RES

source "${VERIFY}"
