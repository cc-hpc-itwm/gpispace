<defun name="compile">
  <in name="compiler" type="string" />
  <in name="argv" type="list" />
  <in name="cwd" type="string" />

  <out name="exit_code" type="long" />
  <out name="std_out" type="string" />
  <out name="std_err" type="string" />

  <module name="sdpacc" function="compile ( compiler
                                          , argv
                                          , cwd
                                          , exit_code
                                          , std_out
                                          , std_err
                                          )">
    <cinclude href="fhglog/fhglog.hpp"/>
    <cinclude href="boost/foreach.hpp"/>
    <cinclude href="errno.h"/>
    <cinclude href="unistd.h"/>
    <cinclude href="limits.h"/>
    <cinclude href="stdlib.h"/>
    <cinclude href="string.h"/>
    <cinclude href="stdexcept"/>
    <cinclude href="fstream"/>
    <cinclude href="process/process.hpp"/>
    <ld flag="-lprocess"/>
    <code><![CDATA[
        LOG (INFO, "SDPACC compile");

	LOG (INFO, "===> cwd := " << cwd);

	char oldwd[PATH_MAX];
	if (0 == getcwd(oldwd, sizeof(oldwd) - 1))
	{
           throw std::runtime_error
              ( "could not get current working directory: "
              + std::string (strerror (errno))
              );
	}

	if (chdir (cwd.c_str()) < 0)
	{
	  throw std::runtime_error
              ( "change of working directory to '"
              + cwd
              + "' failed: "
              + strerror (errno)
              );
	}

        std::ostringstream cmd;
        cmd << compiler;

        BOOST_FOREACH (pnet::type::value::value_type const &arg, argv)
        {
           cmd << " " << boost::get<std::string>(arg);
        }

	LOG (INFO,"====> comand := " << cmd.str ());

        process::circular_buffer buf_stderr;
	char std_out_buf[1 << 20];
	memset (std_out_buf, 0, sizeof(std_out_buf));

	const process::execute_return_type exec_result =
	    process::execute ( cmd.str()
                             , process::const_buffer (0, 0)
                             , process::buffer(&std_out_buf[0], sizeof(std_out_buf))
                             , buf_stderr
                             , process::file_const_buffer_list ()
                             , process::file_buffer_list ()
                             );

	exit_code = exec_result.exit_code;

        std_out_buf[sizeof(std_out_buf)-1] = '\0';
        std_out = std_out_buf;
	MLOG(INFO, "stdout = " << std_out);

	if (! buf_stderr.empty())
	{
	  buf_stderr[buf_stderr.size()-1] = '\0';
	  std_err = std::string(&buf_stderr[0], &buf_stderr[buf_stderr.size()-1]);
	  MLOG(WARN, "stderr = " << std_err);
        }

        if (exit_code != 0)
        {
          LOG(ERROR, "SDPACC failed: " << exit_code);
        }
	else
	{
          LOG (INFO, "SDPACC done");
        }

	if (chdir(oldwd) < 0)
	{
	  throw std::runtime_error
              ( "change of working directory to '"
              + std::string (oldwd)
              + "' failed: "
              + strerror (errno)
              );
	}
    ]]></code>
  </module>
</defun>
