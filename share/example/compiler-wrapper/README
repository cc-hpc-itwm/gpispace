:doctype: book
:toc:

= `share/gspc/examples/compiler-wrapper`: Wraps calls to a compiler within a workflow to easily compile a larger C/C++ project in a distributed fashion.

== Situation

This example demonstrates how one can wrap a compiler (or any command line tool) within GPI-Space and use the runtime system to distribute the compilation jobs to several hosts. Suppose you have a large project that you want to compile using `make` and some compiler (e.g. `gcc`). On a single host, you only have a limited number of cores available to run the compilation in parallel - but what if you have a whole cluster or a bunch of host at hand that you may use as well? There are other tools available that do basically the same (i.e. distcc, icecream) as this simple wrapper but have to be installed separately and can only do this task. This example aims to demonstrate how easy it is to provide a similar function.

== Compiling the example `compiler-wrapper`

A copy of this example can be found in `$GSPC_HOME/share/gspc/example/compiler-wrapper`.

In order to compile and install this example one should use the provided link:Makefile[]:

[source,bash]
----
share/gspc/example/compiler-wrapper $ BUILDDIR=$(mktemp -d)
share/gspc/example/compiler-wrapper $ mkdir -p "${BUILDDIR}"
share/gspc/example/compiler-wrapper $ DESTDIR="${BUILDDIR}/inst"
share/gspc/example/compiler-wrapper $ make BUILDDIR="${BUILDDIR}" DESTDIR="${DESTDIR}" install
----

This will compile and install the `compiler-wrapper` application into `${BUILDDIR}/inst`, please make sure that this directory points to a shared file system in case you intend to run the example on more than one machine.

== Running the example `compiler-wrapper`

In the previous step the application has been installed to `$DESTDIR`, including a small hello world example which can be found in link:src/hello.c[`$DESTDIR/src/hello.c`]. To run the example, you first have to start the runtime system on a given set of hosts, for that please consult the link:../../doc/user.html#_start_and_stop[the user manual]. The following example will start four compilation workers on each host and compile the example.

[source,bash]
----
share/gspc/example/compiler-wrapper $ sdpa boot -M -f nodefile -A "${DESTDIR}/modules" worker:4
share/gspc/example/compiler-wrapper $ ${DESTDIR}/bin/sdpacc.gcc -o "${BUILDDIR}/hello" "${DESTDIR}/src/hello.c"
share/gspc/example/compiler-wrapper $ ${BUILDDIR}/hello
Hello World
----

The installation contains a script `${DESTDIR}/bin/sdpacc` which can be called by different names, e.g. `sdpacc.gcc` and `sdpacc.g++` to enforce the usage of the underlying compiler, `gcc` or `g++` respectively. To use this wrapper in your own build system you have to teach it how to use these instead of a regular compiler, e.g. when you use `make`, it's usually sufficient to let CC and CXX point to the mentioned applications, i.e. `make CC=${DESTDIR}/bin/sdpacc.gcc CXX=${DESTDIR}/bin/sdpacc.g++`.

== Cleaning the generated files

Erasing all the files and data generated during the compilation can be done by invoking the command:

[source,bash]
----
$ make BUILDDIR="${BUILDDIR}" clean
----
