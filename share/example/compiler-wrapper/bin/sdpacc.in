#!/bin/bash
#
# wrapper around a compiler similar to icecream

prog_name=$(basename $0)
compiler="$prog_name"
c_compiler="gcc"
cxx_compiler="g++"

if [ -n "$SDPACC_CC" ] ; then
    c_compiler="$SDPACC_CC"
fi
if [ -n "$SDPACC_CXX" ] ; then
    cxx_compiler="$SDPACC_CXX"
fi
if [ -z "$SDPA_HOME" ] ; then
    echo "SDPA must be be loaded and started! (SDPA_HOME is empty)" >&2
    exit 1
fi

if [ -z "${SDPA_STATE_DIR}" ]
then
  echo "SDPA must be started! (SDPA_STATE_DIR is empty)" >&2
  exit 1
fi
if [ ! -f "${SDPA_STATE_DIR}/kvs.host" ]
then
  echo "SDPA must be started! (kvs host not found)" >&2
  exit 1
fi
if [ ! -f "${SDPA_STATE_DIR}/kvs.port" ]
then
  echo "SDPA must be started! (kvs port not found)" >&2
  exit 1
fi

# todo: remove magic: specify filenames instead of relying on files?
kvs_host=$(cat "${SDPA_STATE_DIR}/kvs.host")
kvs_port=$(cat "${SDPA_STATE_DIR}/kvs.port")

SDPACFLAGS="--kvs-host ${kvs_host} --kvs-port ${kvs_port}"

# try to avoid cyclic execution of $self
mydir=$(readlink -f $(cd $(dirname $(which $0)) && pwd))
self="$mydir/$(basename $0)"

c_compiler=$(which -a "$c_compiler" | grep -v $mydir | head -n 1)
cxx_compiler=$(which -a "$cxx_compiler" | grep -v $mydir | head -n 1)

if [ -z "$c_compiler" ] ; then
    echo "sdpacc: could not locate real c compiler" >&2
    exit 2
fi

if [ -z "$cxx_compiler" ] ; then
    echo "sdpacc: could not locate real cxx compiler" >&2
    exit 2
fi

pnet_tmp=$(mktemp)
result=
jobid=
args=( "${@}" )

trap 'cancel' EXIT

function isatty()
{
    local f="$1" ; shift
    f=$(readlink -f "$f")
    if [ -e "$f" ] ; then
        tty -s < "$f" >/dev/null 2>&1
        return $?
    else
        return 1
    fi
}

function cancel()
{
    rm -f "${pnet_tmp}"
    if [ -z "$jobid" ] ; then
        return 0
    fi
    sdpac $SDPACFLAGS cancel "$jobid" &>/dev/null
    sdpac $SDPACFLAGS wait "$jobid" &>/dev/null
    ec=$?
    sdpac $SDPACFLAGS delete "$jobid" &>/dev/null
    if [ -n "$result" ] ; then
        test -e "$result" && rm -f "$result"
    fi
    return $ec
}


function compile ()
{
    prepare
    execute
}

function prepare ()
{
    local argv_list=
    local INLINE_PNET_OFFSET=
    argv_list=$(echo -n "List("$(for a in "${args[@]}" ; do echo \"$a\", ; done); echo ")")
    INLINE_PNET_OFFSET=$(awk '/^__SDPACC_PNET_INLINE_BEGIN__/ {print NR + 1; exit 0; }' "$0")
    tail -n+${INLINE_PNET_OFFSET} "$0" | pnetput \
        --of "${pnet_tmp}" \
        -p compiler=\""$compiler"\" \
        -p argv="$argv_list" \
        -p cwd=\""$PWD"\"
}

function execute ()
{
    err=$(sdpac $SDPACFLAGS submit ${pnet_tmp} 2>&1)
    ec=$?
    test -e "${pnet_tmp}" && rm -f "${pnet_tmp}"
    if [ $ec -ne 0 ] ; then
        echo "submission failed: $ec: $err" >&2
        return $ec
    fi
    jobid="$err"
    err=$(sdpac $SDPACFLAGS wait "$jobid" 2>&1)
    ec=$?
    if [ $ec -ne 0 ] ; then
        echo "job failed: $ec: $err" >&2
        return $ec
    fi
    result=$(mktemp)
    err=$(sdpac $SDPACFLAGS -f -o "$result" results "${jobid}" 2>&1)
    ec=$?
    if [ $ec -ne 0 ] ; then
        echo "could not get results: $ec: $err" >&2
        return $ec
    fi

    to_be_deleted="${jobid}"
    jobid=
    err=$(sdpac $SDPACFLAGS delete "${to_be_deleted}" 2>&1)
    ec=$?
    if [ $ec -ne 0 ] ; then
        echo "could not delete job: $ec: $err" >&2
    fi

    std_out=$(pnetget < "$result" --type=output std_out | sed -e 's/^"//g' -e 's/"$//g')
    std_err=$(pnetget < "$result" --type=output std_err | sed -e 's/^"//g' -e 's/"$//g')
    ec=$(pnetget < "$result" --type=output exit_code | tr -d L)
    test -e "$result" && rm -f "$result"

    if [ -n "$std_out" ] ; then
        echo -e "$std_out"
    fi
    if [ -n "$std_err" ] ; then
        co=
        nc=
        if isatty /dev/stderr ; then
            co='\033[0;35m'
            nc="\033[0m"
        fi
        echo -e "${co}$std_err${nc}" >&2
    fi

    unset jobid
    unset result
    return $ec
}

case "$prog_name" in
    *cc)
        compiler="$c_compiler"
        ;;
    *++)
        compiler="$cxx_compiler"
        ;;
    *)
        echo "E: dunno how to behave as $prog_name" >&2
        exit 1
        ;;
esac

compile $@
exit $?
__SDPACC_PNET_INLINE_BEGIN__
