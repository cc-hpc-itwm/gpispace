#! /bin/bash

# requires: $CXX is compiler with --std=c++11 available
# requires: $GSPC_HOME set
# requires: executed in source directory

set -euo pipefail

cleanups=()
function push_cleanup()
{
  cleanups+=("${@}")
}
function pop_cleanup()
{
  eval "${cleanups[${#cleanups[@]}-1]}"
  unset -v cleanups[${#cleanups[@]}-1]
}
function cleanup()
{
  while [[ ${#cleanups[@]} -ne 0 ]]
  do
    pop_cleanup
  done
}
trap cleanup EXIT

source_dir="${PWD}"

build_dir="$(mktemp -d)"
push_cleanup "rm -rf \"${build_dir}\""

 install_dir="$(mktemp -d)"
 push_cleanup "rm -rf \"${install_dir}\""

  pushd "${build_dir}"
  push_cleanup "popd"

   cmake "${source_dir}" -DCMAKE_INSTALL_PREFIX="${install_dir}" \
         -DGSPC_HOME="${GSPC_HOME}"
   make install

   ctest --output-on-failure

  pop_cleanup # pushd build_dir

  test_dir="$(mktemp -d)"
  push_cleanup "rm -rf \"${test_dir}\""
   pushd "${test_dir}"
   push_cleanup "popd"
    hostname > "${test_dir}/nodefile"
    push_cleanup "rm \"${test_dir}/nodefile\""

     drts_arguments=(--nodefile "${test_dir}/nodefile")
     drts_arguments+=(--rif-strategy "ssh")

     mkdir "stochastic_with_heureka"
     push_cleanup "rm -rf \"stochastic_with_heureka\""
      pushd "stochastic_with_heureka"
      push_cleanup "popd"

       mkdir "asian"
       push_cleanup "rm -rf \"asian\""
        pushd "asian"
        push_cleanup "popd"

         function check_asianopt_result() {
           local got=$(tail -n 4)
           local expected=$(cat <<EOF
got_heureka = false
number_of_rolls_done = 100000
price = 6895.57
std_dev = 0.581295
EOF
                )
           if [[ "${got}" != "${expected}" ]]
           then
             echo "Expected:" >&2
             echo "${expected}" >&2
             false
           fi
         }

         "${install_dir}/bin/run-asianopt" \
           "${drts_arguments[@]}" \
           --post-process-per-node 1 \
           --reduce-per-node 10 \
           --roll-and-heureka-per-node 10 \
           --number-of-rolls 100000 \
           --rolls-at-once 1000 \
           --seed 3134 \
           --K 85.0 \
           --S 7000.0 \
           --T 1.02 \
           --d 0.0 \
           --r 0.05 \
           --sigma 0.2 \
           --controle-variate false \
           --first-fixing 1 \
           --fixings-per-year 50.0 \
           --option-type FixC 2>/dev/null \
           | tee "/dev/stderr" \
           | check_asianopt_result

        pop_cleanup # pushd asian
       pop_cleanup # mkdir asian

       # todo: barropt
       # todo: miller-rabin user example
       # todo: pcp

       if test -e "${install_dir}/bin/run-miller-rabin"
       then
         mkdir "miller-rabin-prime"
         push_cleanup "rm -rf \"miller-rabin-prime\""
          pushd "miller-rabin-prime"
          push_cleanup "popd"

           function check_miller_rabin_prime_result() {
             local got=$(tail -n 3)
             local expected=$(cat <<EOF
got_heureka = false
number_of_rolls_done = 1000000
result = probably prime
EOF
                  )
             if [[ "${got}" != "${expected}" ]]
             then
               echo "Expected:" >&2
               echo "${expected}" >&2
               false
             fi
           }

           "${install_dir}/bin/run-miller-rabin" \
             "${drts_arguments[@]}" \
             --post-process-per-node 1 \
             --reduce-per-node 10 \
             --roll-and-heureka-per-node 10 \
             --number-of-rolls 1000000 \
             --rolls-at-once 10000 \
             --seed 3134 \
             --to-test 656692050181897513638241554199181923922955921760928836766304161790553989228223793461834703506872747071705167995972707253940099469869516422893633357693 \
             | tee "/dev/stderr" \
             | check_miller_rabin_prime_result

          pop_cleanup # pushd miller-rabin-prime
         pop_cleanup # mkdir miller-rabin-prime
       fi # if test -e miller-rabin

       mkdir "pi"
       push_cleanup "rm -rf \"pi\""
        pushd "pi"
        push_cleanup "popd"

         function check_pi_result() {
           local got=$(tail -n 6)
           local expected=$(cat <<EOF
got_heureka = false
number_of_rolls_done = 100000000
result = 78538025 / 100000000
reduced = 3141521 / 4000000
PI = 3.14152
err = -7.16536e-05
EOF
                )
           if [[ "${got}" != "${expected}" ]]
           then
             echo "Expected:" >&2
             echo "${expected}" >&2
             false
           fi
         }

         "${install_dir}/bin/run-pi" \
           "${drts_arguments[@]}" \
           --post-process-per-node 1 \
           --reduce-per-node 10 \
           --roll-and-heureka-per-node 10 \
           --number-of-rolls 100000000 \
           --rolls-at-once 1000000 \
           --seed 3134 \
           | tee "/dev/stderr" \
           | check_pi_result

        pop_cleanup # pushd pi
       pop_cleanup # mkdir pi

       mkdir "tasks_with_normal_distributed_duration"
       push_cleanup "rm -rf \"tasks_with_normal_distributed_duration\""
        pushd "tasks_with_normal_distributed_duration"
        push_cleanup "popd"

         function check_tasks_with_normal_distributed_duration_result() {
           local got=$(tail -n 3)
           local expected=$(cat <<EOF
got_heureka = false
number_of_rolls_done = 1000
number_of_tasks = 1000
EOF
                )
           if [[ "${got}" != "${expected}" ]]
           then
             echo "Expected:" >&2
             echo "${expected}" >&2
             false
           fi
         }

         "${install_dir}/bin/run-tasks_with_normal_distributed_duration" \
           "${drts_arguments[@]}" \
           --post-process-per-node 1 \
           --reduce-per-node 1 \
           --roll-and-heureka-per-node 25 \
           --number-of-rolls 1000 \
           --rolls-at-once 1 \
           --seed 3134 \
           --mean 500 \
           --stddev 400 \
           | tee "/dev/stderr" \
           | check_tasks_with_normal_distributed_duration_result

        pop_cleanup # pushd tasks_with_normal_distributed_duration
       pop_cleanup # mkdir tasks_with_normal_distributed_duration

      pop_cleanup # pushd stochastic_with_heureka
     pop_cleanup # mkdir stochastic_with_heureka

    pop_cleanup # nodefile
   pop_cleanup # pushd test_dir
  pop_cleanup # mktemp test_dir

 pop_cleanup # mktemp install_dir
pop_cleanup # mktemp build_dir
