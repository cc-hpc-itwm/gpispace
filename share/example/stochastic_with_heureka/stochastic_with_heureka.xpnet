<!-- This file is part of GPI-Space.                                       -->
<!-- Copyright (C) 2020 Fraunhofer ITWM                                    -->
<!--                                                                       -->
<!-- This program is free software: you can redistribute it and/or modify  -->
<!-- it under the terms of the GNU General Public License as published by  -->
<!-- the Free Software Foundation, either version 3 of the License, or     -->
<!-- (at your option) any later version.                                   -->
<!--                                                                       -->
<!-- This program is distributed in the hope that it will be useful,       -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of        -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          -->
<!-- GNU General Public License for more details.                          -->
<!--                                                                       -->
<!-- You should have received a copy of the GNU General Public License     -->
<!-- along with this program. If not, see <https://www.gnu.org/licenses/>. -->

<defun name="stochastic_with_heureka">
  <in name="number_of_rolls" type="unsigned long" place="number_of_rolls"/>
  <in name="rolls_at_once" type="unsigned long" place="rolls_at_once"/>
  <in name="seed" type="unsigned long" place="seed"/>
  <in name="implementation" type="string" place="implementation"/>
  <in name="user_data" type="bytearray" place="user_data"/>
  <in name="parallel_rolls" type="unsigned long" place="parallel_rolls"/>
  <out name="result" type="bytearray" place="result"/>
  <out name="got_heureka" type="bool" place="got_heureka"/>
  <out name="number_of_rolls_done" type="unsigned long"
       place="number_of_rolls_done"/>
  <net>
    <struct name="job">
      <field name="roll_count" type="unsigned long"/>
      <field name="seed" type="unsigned long"/>
    </struct>
    <struct name="partial_result_and_heureka">
      <field name="partial_result" type="bytearray"/>
      <field name="heureka" type="bool"/>
    </struct>
    <place name="number_of_rolls" type="unsigned long"/>
    <place name="rolls_at_once" type="unsigned long"/>
    <place name="seed" type="unsigned long"/>
    <place name="implementation" type="string"/>
    <place name="user_data" type="bytearray"/>
    <place name="parallel_rolls" type="unsigned long"/>
    <place name="result" type="bytearray"/>
    <place name="got_heureka" type="bool"/>
    <place name="number_of_rolls_done" type="unsigned long"/>
    <place name="number_of_rolls_wanted" type="unsigned long"/>
    <place name="number_of_rolls_left" type="unsigned long"/>
    <place name="job" type="job"/>

    <place name="heureka" type="bool">
      <token><value>false</value></token>
    </place>
    <place name="jobs_in_progress" type="unsigned long">
      <token><value>0UL</value></token>
    </place>

    <transition name="init">
      <defun>
        <in name="number_of_rolls" type="unsigned long"/>
        <out name="number_of_rolls_left" type="unsigned long"/>
        <out name="number_of_rolls_wanted" type="unsigned long"/>
        <expression>
          ${number_of_rolls_wanted} :=
          ${number_of_rolls_left} := ${number_of_rolls};
        </expression>
      </defun>
      <connect-in port="number_of_rolls" place="number_of_rolls"/>
      <connect-out port="number_of_rolls_left" place="number_of_rolls_left"/>
      <connect-out port="number_of_rolls_wanted"
                   place="number_of_rolls_wanted"/>
    </transition>

    <transition name="generate_job">
      <defun>
        <in name="heureka" type="bool"/>
        <in name="rolls_at_once" type="unsigned long"/>
        <in name="parallel_rolls" type="unsigned long"/>
        <inout name="number_of_rolls_left" type="unsigned long"/>
        <inout name="seed" type="unsigned long"/>
        <inout name="jobs_in_progress" type="unsigned long"/>
        <out name="job" type="job"/>
        <expression>
          ${rolls} := min (${rolls_at_once}, ${number_of_rolls_left});
          ${job.roll_count} := ${rolls};
          ${job.seed} := ${seed};
          ${seed} := ${seed} + 1UL;
          ${number_of_rolls_left} := ${number_of_rolls_left} - ${rolls};
          ${jobs_in_progress} := ${jobs_in_progress} + 1UL;
        </expression>
      </defun>
      <condition>
        !${heureka}
      </condition>
      <condition>
        ${number_of_rolls_left} :gt: 0UL
      </condition>
      <!-- TODO: define strategy for overcommitment -->
      <condition>
        ${jobs_in_progress} :lt: ${parallel_rolls}
      </condition>
      <connect-read port="heureka" place="heureka"/>
      <connect-read port="rolls_at_once" place="rolls_at_once"/>
      <connect-read port="parallel_rolls" place="parallel_rolls"/>
      <connect-inout port="number_of_rolls_left" place="number_of_rolls_left"/>
      <connect-inout port="seed" place="seed"/>
      <connect-inout port="jobs_in_progress" place="jobs_in_progress"/>
      <connect-out port="job" place="job"/>
    </transition>

    <transition name="roll_and_heureka">
      <defun>
        <require key="roll_and_heureka" mandatory="true"/>
        <in name="implementation" type="string"/>
        <in name="user_data" type="bytearray"/>
        <in name="job" type="job"/>
        <out name="partial_result_and_heureka"
             type="partial_result_and_heureka"/>
        <module name="stochastic_with_heureka"
                function="roll_and_heureka ( implementation
                                           , user_data
                                           , job
                                           , partial_result_and_heureka
                                           )">
          <cinclude href="interface.hpp"/>
          <cinclude href="fhg/util/dl.hpp"/>
          <cxx flag="--std=c++11"/>
          <code><![CDATA[
          std::pair<we::type::bytearray, bool> const rah
            ( fhg::util::scoped_dlhandle (implementation)
              .sym<decltype (stochastic_with_heureka_roll_and_heureka)>
                ("stochastic_with_heureka_roll_and_heureka")
                  (job.roll_count, job.seed, user_data)
            );

          partial_result_and_heureka.partial_result = rah.first;
          partial_result_and_heureka.heureka = rah.second;
          ]]></code>
        </module>
      </defun>
      <connect-read port="implementation" place="implementation"/>
      <connect-read port="user_data" place="user_data"/>
      <connect-in port="job" place="job"/>
      <connect-out port="partial_result_and_heureka"
                   place="rolled_and_heureka"/>
    </transition>

    <place name="rolled_and_heureka" type="partial_result_and_heureka"/>

    <place name="partial_results_in_reduction" type="unsigned long">
      <token><value>0UL</value></token>
    </place>

    <transition name="decrease_number_of_job_in_progress_and_increase_partial_results_in_reduction">
      <defun>
        <inout name="partial_result_and_heureka"
               type="partial_result_and_heureka"/>
        <inout name="jobs_in_progress" type="unsigned long"/>
        <inout name="partial_results_in_reduction" type="unsigned long"/>
        <expression>
          ${jobs_in_progress} := ${jobs_in_progress} - 1UL;
          ${partial_results_in_reduction} :=
            ${partial_results_in_reduction} + 1UL;
        </expression>
      </defun>
      <connect-inout port="jobs_in_progress" place="jobs_in_progress"/>
      <connect-inout port="partial_results_in_reduction"
                     place="partial_results_in_reduction"/>
      <connect-in port="partial_result_and_heureka"
                  place="rolled_and_heureka"/>
      <connect-out port="partial_result_and_heureka"
                   place="partial_result_and_heureka"/>
    </transition>

    <place name="partial_result_and_heureka"
           type="partial_result_and_heureka"/>

    <transition name="take_partial_result_without_heureka">
      <defun>
        <in name="partial_result_and_heureka"
            type="partial_result_and_heureka"/>
        <out name="partial_result" type="bytearray"/>
        <expression>
          ${partial_result} := ${partial_result_and_heureka.partial_result};
        </expression>
      </defun>
      <condition>
        !${partial_result_and_heureka.heureka}
      </condition>
      <connect-in port="partial_result_and_heureka"
                  place="partial_result_and_heureka"/>
      <connect-out port="partial_result" place="partial_result"/>
    </transition>

    <transition name="take_partial_result_with_heureka">
      <defun>
        <inout name="heureka" type="bool"/>
        <in name="partial_result_and_heureka"
            type="partial_result_and_heureka"/>
        <out name="partial_result" type="bytearray"/>
        <expression>
          ${heureka} := true;
          ${partial_result} := ${partial_result_and_heureka.partial_result};
        </expression>
      </defun>
      <condition>
        ${partial_result_and_heureka.heureka}
      </condition>
      <connect-inout port="heureka" place="heureka"/>
      <connect-in port="partial_result_and_heureka"
                  place="partial_result_and_heureka"/>
      <connect-out port="partial_result" place="partial_result"/>
    </transition>

    <place name="partial_result" type="bytearray"/>

    <place name="selectL" type="control">
      <token><value>[]</value></token>
    </place>
    <place name="selectR" type="control"/>

    <transition name="selectL">
      <defun>
        <inout name="trigger" type="control"/>
        <inout name="partial_result" type="bytearray"/>
        <expression/>
      </defun>
      <connect-in port="trigger" place="selectL"/>
      <connect-out port="trigger" place="selectR"/>
      <connect-in port="partial_result" place="partial_result"/>
      <connect-out port="partial_result" place="partial_resultL"/>
    </transition>
    <transition name="selectR">
      <defun>
        <inout name="trigger" type="control"/>
        <inout name="partial_result" type="bytearray"/>
        <expression/>
      </defun>
      <connect-in port="trigger" place="selectR"/>
      <connect-out port="trigger" place="selectL"/>
      <connect-in port="partial_result" place="partial_result"/>
      <connect-out port="partial_result" place="partial_resultR"/>
    </transition>

    <place name="partial_resultL" type="bytearray"/>
    <place name="partial_resultR" type="bytearray"/>

    <transition name="reduce">
      <defun>
        <require key="reduce" mandatory="true"/>
        <in name="implementation" type="string"/>
        <in name="user_data" type="bytearray"/>
        <in name="partial_resultL" type="bytearray"/>
        <in name="partial_resultR" type="bytearray"/>
        <out name="partial_result" type="bytearray"/>
        <module name="stochastic_with_heureka"
                function="partial_result reduce ( implementation
                                                , user_data
                                                , partial_resultL
                                                , partial_resultR
                                                )">
          <cinclude href="interface.hpp"/>
          <cinclude href="fhg/util/dl.hpp"/>
          <cxx flag="--std=c++11"/>
          <code><![CDATA[
          return fhg::util::scoped_dlhandle (implementation)
            .sym<decltype (stochastic_with_heureka_reduce)>
              ("stochastic_with_heureka_reduce")
                (partial_resultL, partial_resultR, user_data);
          ]]></code>
        </module>
      </defun>
      <connect-read port="implementation" place="implementation"/>
      <connect-read port="user_data" place="user_data"/>
      <connect-in port="partial_resultL" place="partial_resultL"/>
      <connect-in port="partial_resultR" place="partial_resultR"/>
      <connect-out port="partial_result" place="reduced_partial_result"/>
    </transition>

    <place name="reduced_partial_result" type="bytearray"/>

    <transition name="descrease_number_of_partial_results_in_reduction">
      <defun>
        <inout name="partial_results_in_reduction" type="unsigned long"/>
        <inout name="partial_result" type="bytearray"/>
        <expression>
          ${partial_results_in_reduction} :=
            ${partial_results_in_reduction} - 1UL;
        </expression>
      </defun>
      <connect-inout port="partial_results_in_reduction"
                     place="partial_results_in_reduction"/>
      <connect-in port="partial_result" place="reduced_partial_result"/>
      <connect-out port="partial_result" place="partial_result"/>
    </transition>

    <transition name="take_final_result">
      <defun>
        <inout name="partial_results_in_reduction" type="unsigned long"/>
        <in name="heureka" type="bool"/>
        <in name="jobs_in_progress" type="unsigned long"/>
        <inout name="partial_result" type="bytearray"/>
        <in name="number_of_rolls_left" type="unsigned long"/>
        <in name="number_of_rolls_wanted" type="unsigned long"/>
        <out name="number_of_rolls_done" type="unsigned long"/>
        <expression>
          ${partial_results_in_reduction} :=
            ${partial_results_in_reduction} - 1UL;
          ${number_of_rolls_done} :=
            ${number_of_rolls_wanted} - ${number_of_rolls_left};
        </expression>
      </defun>
      <condition>
        ${partial_results_in_reduction} :eq: 1UL
      </condition>
      <condition>
        ${jobs_in_progress} :eq: 0UL
      </condition>
      <condition>
        (${number_of_rolls_left} :eq: 0UL) || ${heureka}
      </condition>
      <connect-inout port="partial_results_in_reduction"
                     place="partial_results_in_reduction"/>
      <connect-read port="heureka" place="heureka"/>
      <connect-read port="jobs_in_progress" place="jobs_in_progress"/>
      <connect-in port="partial_result" place="partial_resultL"/>
      <connect-out port="partial_result" place="reduced"/>
      <connect-in port="number_of_rolls_left" place="number_of_rolls_left"/>
      <connect-in port="number_of_rolls_wanted" place="number_of_rolls_wanted"/>
      <connect-out port="number_of_rolls_done" place="number_of_rolls_done"/>
    </transition>

    <place name="reduced" type="bytearray"/>

    <transition name="post_process">
      <defun>
        <require key="post_process" mandatory="true"/>
        <in name="implementation" type="string"/>
        <in name="user_data" type="bytearray"/>
        <in name="number_of_rolls_done" type="unsigned long"/>
        <in name="result_IN" type="bytearray"/>
        <out name="result_OUT" type="bytearray"/>
        <module name="stochastic_with_heureka"
                function="result_OUT post_process ( implementation
                                                  , user_data
                                                  , number_of_rolls_done
                                                  , result_IN
                                                  )">
          <cinclude href="interface.hpp"/>
          <cinclude href="fhg/util/dl.hpp"/>
          <cxx flag="--std=c++11"/>
          <code><![CDATA[
          return fhg::util::scoped_dlhandle (implementation)
            .sym<decltype (stochastic_with_heureka_post_process)>
              ("stochastic_with_heureka_post_process")
                (number_of_rolls_done, result_IN, user_data);
          ]]></code>
        </module>
      </defun>
      <connect-read port="implementation" place="implementation"/>
      <connect-read port="user_data" place="user_data"/>
      <connect-read port="number_of_rolls_done" place="number_of_rolls_done"/>
      <connect-in port="result_IN" place="reduced"/>
      <connect-out port="result_OUT" place="post_processed"/>
    </transition>

    <place name="post_processed" type="bytearray"/>

    <transition name="cleanup">
      <defun>
        <inout name="result" type="bytearray"/>
        <inout name="heureka" type="bool"/>
        <in name="implementation" type="string"/>
        <in name="user_data" type="bytearray"/>
        <in name="parallel_rolls" type="unsigned long"/>
        <in name="rolls_at_once" type="unsigned long"/>
        <in name="seed" type="unsigned long"/>
        <out name="got_heureka" type="bool"/>
        <expression>
          ${got_heureka} := ${heureka};
          ${heureka} := false;
        </expression>
      </defun>
      <connect-in port="result" place="post_processed"/>
      <connect-in port="implementation" place="implementation"/>
      <connect-in port="user_data" place="user_data"/>
      <connect-in port="parallel_rolls" place="parallel_rolls"/>
      <connect-in port="rolls_at_once" place="rolls_at_once"/>
      <connect-in port="seed" place="seed"/>
      <connect-out port="got_heureka" place="got_heureka"/>
      <connect-inout port="heureka" place="heureka"/>
      <connect-out port="result" place="result"/>
    </transition>
  </net>
</defun>
