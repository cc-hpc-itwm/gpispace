<!-- This file is part of GPI-Space.                                       -->
<!-- Copyright (C) 2020 Fraunhofer ITWM                                    -->
<!--                                                                       -->
<!-- This program is free software: you can redistribute it and/or modify  -->
<!-- it under the terms of the GNU General Public License as published by  -->
<!-- the Free Software Foundation, either version 3 of the License, or     -->
<!-- (at your option) any later version.                                   -->
<!--                                                                       -->
<!-- This program is distributed in the hope that it will be useful,       -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of        -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          -->
<!-- GNU General Public License for more details.                          -->
<!--                                                                       -->
<!-- You should have received a copy of the GNU General Public License     -->
<!-- along with this program. If not, see <https://www.gnu.org/licenses/>. -->

<defun name="concurrent">
  <in name="N" type="long" place="N"/>
  <out name="call_count_A" type="long" place="call_count_A"/>
  <out name="call_count_B" type="long" place="call_count_B"/>
  <out name="call_count_C" type="long" place="call_count_C"/>
  <out name="call_count_D" type="long" place="call_count_D"/>
  <out name="sum_call_count" type="long" place="sum_call_count"/>
  <out name="sum_ids_A" type="long" place="sum_ids_A"/>
  <out name="sum_ids_B" type="long" place="sum_ids_B"/>
  <out name="sum_ids_C" type="long" place="sum_ids_C"/>
  <out name="sum_ids_D" type="long" place="sum_ids_D"/>
  <out name="sum_ids" type="long" place="sum_ids"/>

  <net>
    <place name="N" type="long"/>
    <place name="produce" type="long"/>
    <place name="consume" type="long"/>
    <place name="id" type="long"/>
    <place name="call_count_A" type="long"><token><value>0L</value></token></place>
    <place name="call_count_B" type="long"><token><value>0L</value></token></place>
    <place name="call_count_C" type="long"><token><value>0L</value></token></place>
    <place name="call_count_D" type="long"><token><value>0L</value></token></place>
    <place name="sum_ids_A" type="long"><token><value>0L</value></token></place>
    <place name="sum_ids_B" type="long"><token><value>0L</value></token></place>
    <place name="sum_ids_C" type="long"><token><value>0L</value></token></place>
    <place name="sum_ids_D" type="long"><token><value>0L</value></token></place>
    <place name="sum_ids" type="long"/>
    <place name="sum_call_count" type="long"/>
    <place name="id_A" type="long"/>
    <place name="id_B" type="long"/>
    <place name="id_C" type="long"/>
    <place name="id_D" type="long"/>
    <place name="id_done" type="long"/>
    <place name="done" type="control"/>

    <include-template href="dup.xml"/>
    <specialize name="dup_long" use="dup">
      <type-map replace="T" with="long"/>
    </specialize>

    <transition name="dup" inline="true">
      <use name="dup_long"/>
      <connect-in port="in" place="N"/>
      <connect-out port="one" place="produce"/>
      <connect-out port="two" place="consume"/>
    </transition>

    <transition name="generate" inline="true">
      <include-function href="sequence.xml"/>
      <connect-in port="amount" place="produce"/>
      <connect-out port="out" place="id"/>
    </transition>

    <transition name="A">
      <defun>
        <inout name="id" type="long"/>
        <expression/>
      </defun>
      <connect-in port="id" place="id"/>
      <connect-out port="id" place="id_A"/>
    </transition>

    <transition name="postA">
      <defun>
        <inout name="id" type="long"/>
        <inout name="sum" type="long"/>
        <inout name="count" type="long"/>
        <expression>
          ${sum} := ${sum} + ${id};
          ${count} := ${count} + 1L;
        </expression>
      </defun>
      <connect-in port="id" place="id_A"/>
      <connect-out port="id" place="id_done"/>
      <connect-inout port="sum" place="sum_ids_A"/>
      <connect-inout port="count" place="call_count_A"/>
    </transition>

    <transition name="B">
      <defun>
        <inout name="id" type="long"/>
        <expression/>
      </defun>
      <connect-in port="id" place="id"/>
      <connect-out port="id" place="id_B"/>
    </transition>

    <transition name="postB">
      <defun>
        <inout name="id" type="long"/>
        <inout name="sum" type="long"/>
        <inout name="count" type="long"/>
        <expression>
          ${sum} := ${sum} + ${id};
          ${count} := ${count} + 1L;
        </expression>
      </defun>
      <connect-in port="id" place="id_B"/>
      <connect-out port="id" place="id_done"/>
      <connect-inout port="sum" place="sum_ids_B"/>
      <connect-inout port="count" place="call_count_B"/>
    </transition>

    <transition name="C">
      <defun>
        <inout name="id" type="long"/>
        <expression/>
      </defun>
      <connect-in port="id" place="id"/>
      <connect-out port="id" place="id_C"/>
    </transition>

    <transition name="postC">
      <defun>
        <inout name="id" type="long"/>
        <inout name="sum" type="long"/>
        <inout name="count" type="long"/>
        <expression>
          ${sum} := ${sum} + ${id};
          ${count} := ${count} + 1L;
        </expression>
      </defun>
      <connect-in port="id" place="id_C"/>
      <connect-out port="id" place="id_done"/>
      <connect-inout port="sum" place="sum_ids_C"/>
      <connect-inout port="count" place="call_count_C"/>
    </transition>

    <transition name="D">
      <defun>
        <inout name="id" type="long"/>
        <expression/>
      </defun>
      <connect-in port="id" place="id"/>
      <connect-out port="id" place="id_D"/>
    </transition>

    <transition name="postD">
      <defun>
        <inout name="id" type="long"/>
        <inout name="sum" type="long"/>
        <inout name="count" type="long"/>
        <expression>
          ${sum} := ${sum} + ${id};
          ${count} := ${count} + 1L;
        </expression>
      </defun>
      <connect-in port="id" place="id_D"/>
      <connect-out port="id" place="id_done"/>
      <connect-inout port="sum" place="sum_ids_D"/>
      <connect-inout port="count" place="call_count_D"/>
    </transition>

    <include-template href="wait.xml"/>
    <specialize name="wait" use="wait">
      <type-map replace="T" with="long"/>
    </specialize>

    <transition name="wait">
      <use name="wait"/>
      <place-map virtual="wait" real="consume"/>
      <connect-in port="trigger" place="id_done"/>
      <connect-out port="done" place="done"/>
    </transition>

    <transition name="summarize">
      <defun>
        <in name="trigger" type="control"/>
        <in name="sum_ids_A" type="long"/>
        <in name="sum_ids_B" type="long"/>
        <in name="sum_ids_C" type="long"/>
        <in name="sum_ids_D" type="long"/>
        <out name="sum_ids" type="long"/>
        <in name="call_count_A" type="long"/>
        <in name="call_count_B" type="long"/>
        <in name="call_count_C" type="long"/>
        <in name="call_count_D" type="long"/>
        <out name="sum_call_count" type="long"/>
        <expression>
          ${sum_ids} := ${sum_ids_A}
                      + ${sum_ids_B}
                      + ${sum_ids_C}
                      + ${sum_ids_D};
          ${sum_call_count} := ${call_count_A}
                             + ${call_count_B}
                             + ${call_count_C}
                              + ${call_count_D};
        </expression>
      </defun>
      <connect-in port="trigger" place="done"/>
      <connect-read port="sum_ids_A" place="sum_ids_A"/>
      <connect-read port="sum_ids_B" place="sum_ids_B"/>
      <connect-read port="sum_ids_C" place="sum_ids_C"/>
      <connect-read port="sum_ids_D" place="sum_ids_D"/>
      <connect-out port="sum_ids" place="sum_ids"/>
      <connect-read port="call_count_A" place="call_count_A"/>
      <connect-read port="call_count_B" place="call_count_B"/>
      <connect-read port="call_count_C" place="call_count_C"/>
      <connect-read port="call_count_D" place="call_count_D"/>
      <connect-out port="sum_call_count" place="sum_call_count"/>
    </transition>
  </net>
</defun>
