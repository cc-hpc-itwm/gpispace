<!-- This file is part of GPI-Space.                                       -->
<!-- Copyright (C) 2021 Fraunhofer ITWM                                    -->
<!--                                                                       -->
<!-- This program is free software: you can redistribute it and/or modify  -->
<!-- it under the terms of the GNU General Public License as published by  -->
<!-- the Free Software Foundation, either version 3 of the License, or     -->
<!-- (at your option) any later version.                                   -->
<!--                                                                       -->
<!-- This program is distributed in the hope that it will be useful,       -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of        -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          -->
<!-- GNU General Public License for more details.                          -->
<!--                                                                       -->
<!-- You should have received a copy of the GNU General Public License     -->
<!-- along with this program. If not, see <https://www.gnu.org/licenses/>. -->

<template name="sequence_forward_credit">
  <template-parameter type="T"/>
  <defun>

    <struct name="WITH_CREDIT">
      <field name="id" type="long"/>
      <field name="credit" type="T"/>
    </struct>

    <in name="n" type="long" place="n"/>
    <out name="i" type="WITH_CREDIT" place="i"/>
    <tunnel name="credit" type="T" place="credit"/>

    <net>

      <struct name="state">
        <field name="max" type="long"/>
        <field name="i" type="long"/>
      </struct>

      <place name="n" type="long"/>
      <place name="i" type="WITH_CREDIT"/>
      <place name="state" type="state"/>
      <place name="credit" type="T" virtual="true"/>

      <transition name="init">
        <defun>
          <in name="n" type="long"/>
          <out name="state" type="state"/>
          <expression>
            ${state.max} := ${n};
            ${state.i} := 0L;
          </expression>
        </defun>
        <connect-in port="n" place="n"/>
        <connect-out port="state" place="state"/>
      </transition>

      <transition name="step">
        <defun>
          <inout name="state" type="state"/>
          <in name="credit" type="T"/>
          <out name="i" type="WITH_CREDIT"/>
          <expression>
            ${i.id} := ${state.i};
            ${i.credit} := ${credit};
            ${state.i} := ${state.i} + 1L;
          </expression>
        </defun>
        <condition>
          ${state.i} :lt: ${state.max}
        </condition>
        <connect-in port="credit" place="credit"/>
        <connect-inout port="state" place="state"/>
        <connect-out port="i" place="i"/>
      </transition>

      <transition name="break">
        <defun>
          <in name="state" type="state"/>
          <expression/>
        </defun>
        <condition>
          ${state.i} :ge: ${state.max}
        </condition>
        <connect-in port="state" place="state"/>
      </transition>

    </net>
  </defun>
</template>
