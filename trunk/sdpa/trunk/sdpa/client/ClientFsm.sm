//%{
//
// Finite state machine for the SDPA client
//
//%}

%package sdpa::client
%class Client
%header Client.hpp

%include <sdpa/types.hpp>
%include <seda/IEvent.hpp>

%start ClientFsm::Unconfigured

%map ClientFsm
%%
Unconfigured
{
  Start(cfg: const std::string &)
    Configuring
    {
      action_configure(cfg);
    }

  Default
    nil
    {
    }
}

Configuring
{
  ConfigOk(evt: const seda::IEvent::Ptr &)
    Configured
    {
      action_config_ok();
      action_store_reply(evt);
    }

  ConfigNok(evt: const seda::IEvent::Ptr &)
    Unconfigured
    {
      action_config_nok(); // exit
      action_store_reply(evt);
    }

  Default
    nil
    {
    }
}

Configured
{
  // client side api
  Submit(evt: const seda::IEvent::Ptr &)
    nil
    {
      action_submit(evt);
    }

  Cancel(evt: const seda::IEvent::Ptr &)
    nil
    {
      action_cancel(evt);
    }

  Query(evt: const seda::IEvent::Ptr &)
    nil
    {
      action_query(evt);
    }

  Retrieve(evt: const seda::IEvent::Ptr &)
    nil
    {
      action_retrieve(evt);
    }

  Delete(evt: const seda::IEvent::Ptr &)
    nil
    {
      action_delete(evt);
    }

  Shutdown
    nil
    {
      action_shutdown();
    }


  // replies (i.e. pseudo callbacks) from daemon
  SubmitAck(evt: const seda::IEvent::Ptr &)
    nil
    {
      action_store_reply(evt);
    }
  CancelAck(evt: const seda::IEvent::Ptr &)
    nil
    {
      action_store_reply(evt);
    }
  DeleteAck(evt: const seda::IEvent::Ptr &)
    nil
    {
      action_store_reply(evt);
    }
  Results(evt: const seda::IEvent::Ptr &)
    nil
    {
      action_store_reply(evt);
    }

  StatusReply(evt: const seda::IEvent::Ptr &)
    nil
    {
      action_store_reply(evt);
    }
}

%%
