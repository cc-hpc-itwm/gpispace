#!/bin/bash

# get the list of nodes
nodes=
switch_to_master=0
rename_master=0
on_master=0
master=
node_name=`hostname`
start_fhglog=0
start_kvs=0
start_gpi=0

case "$1" in
  -h|--help)
	cat <<EOF
usage $0 [-h|--help] [node...]
  initializes a screen session on the given nodes or on all
  nodes

environment variables:
	export IN_INIT_SCREEN="$IN_INIT_SCREEN"
	#export PBS_O_HOST="$PBS_O_HOST"
        export SDPA_SCRATCH="$SDPA_SCRATCH"
	export SDPA_GUI="$SDPA_GUI"
	export SDPA_MASTER="$SDPA_MASTER"
	export FHGLOG_to_console="$FHGLOG_to_console"
	export FHGLOG_to_server="$FHGLOG_to_server"
	export FHGLOG_threaded="$FHGLOG_threaded"
        export KVS_URL="$KVS_URL"
EOF
    exit 0
	;;
  *)
	# ignore
	;;
esac

function log ()
{
    echo "$@" >/dev/stderr
}

if [ ! -d "${SDPA_SCRATCH}" ] ; then
    log "W: SDPA_SCRATCH is not defined, please enter it now or export it before!"
    read -p "type in scratch dir to use: " scratch_dir

    if [ -z "$scratch_dir" ] ; then
        exit 1
    fi

    if [ ! -d "$scratch_dir" ] ; then
	read -n 1 -p "W: $scratch_dir does not exist, shall i create it [y/N]? " do_create
	case "$do_create" in
	    y|Y)
		mkdir -p "$scratch_dir"
		;;
	    *)
		log "bye."
		exit 1
		;;
	esac
    fi
    if [ ! -d "$scratch_dir" ] ; then
        log "bye."
        exit 1
    fi
    SDPA_SCRATCH="$scratch_dir"
fi

if [ -z "$SDPA_SCRATCH" ] ; then
    log "# E: SDPA_SCRATCH is still undefined, Bye."
    exit 1
fi

if [ -z "$SDPA_NODEFILE" ] ; then
    export SDPA_NODEFILE="$HOME/.init-screen.nodes"
    log "# W: SDPA_NODEFILE is not defined, asuming $SDPA_NODEFILE"
fi

if [ ! -r "$SDPA_NODEFILE" ] ; then
    :
fi

if [ -r "$PBS_NODEFILE" ]; then
    log "Running on the initial master node..."
    on_master=1
    master="$node_name"
else
    log "Running on slave $node_name..."
fi

TABLE="$HOME/.init-screen.tab"
if [ $on_master -eq 1 ]; then
    if [ -r "$TABLE" ]; then
	if grep -q "$master" "$TABLE"; then
	    log "# It seems, that there is already another screen environment running."
	    log "#"
	    log "# hint:"
	    log "#   possibly running on: `cat ${TABLE} | awk '{print $3}'`"
	    log "#"
	    log "# Please remove the entry from ${TABLE} and retry."
	fi
    fi

#	echo "Checking node availability..."
#	check-nodes
#	rc=$?
#	if [[ $rc -ne 0 ]]; then
#	  log "$rc node(s) failed the availability test, giving up!"
#	  exit $rc
#	fi

    tmp=`cat $PBS_NODEFILE | sort -u | grep -v "$master" | sort -n`
    tmp=`echo $master $tmp`
    echo "${PS_JOBCOOKIE} = $tmp" > "${TABLE}"

    env_file="$HOME/.init-screen.env"

    log "clearing .init-screen.env..."
    rm -f "$env_file"
    log "writing environment info to $env_file..."

    test -d "$HOME/.sdpa/data" || mkdir -p "$HOME/.sdpa/data"

    SDPA_LOG_DIR="$SDPA_SCRATCH/log"
    test -d "$SDPA_LOG_DIR" || mkdir -p "$SDPA_LOG_DIR"

    cat > "$env_file" <<EOF
#
# init screen internal
#
export IN_INIT_SCREEN="yes"
#export PBS_O_HOST="$PBS_O_HOST"
test -r "$HOME/.init-screen.mod" && source "$HOME/.init-screen.mod"
#
# sdpa config
#
export SDPA_MASTER="$master"
export SDPA_SCRATCH="$SDPA_SCRATCH"
export SDPA_LOG_DIR="$SDPA_SCRATCH/log"
#
# logging config
#
export FHGLOG_to_server="$master"
unset  FHGLOG_to_console
export FHGLOG_threaded="false"
export FHGLOG_level="WARN"
#
# key value store config
#
export KVS_URL="$master:2439"
export KVS_STORE="$HOME/.sdpa/data/kvs.dat"
#
# user config follows (may override above values, please be careful!)
#
test -r "$HOME/.init-screen.rc" && source "$HOME/.init-screen.rc"
EOF

    if [ ! -r "$HOME/.init-screen.rc" ]; then
	log "creating default .init-screen.rc file..."
	cat > "$HOME/.init-screen.rc" <<EOF
export PC_LIBRARY_PATH="\$HOME/.sdpa/modules"
export PC_MODULE_DATA="\$HOME/.sdpa/moddata"
EOF
    fi
    cat > "$HOME/.init-screen.mod" <<EOF
#!/bin/bash
#
# helper function definitions
#
# log <message to be logged>
function log ()
{
  echo "$@" >/dev/stderr
  test -x `which fhglogc` && fhglogc -t "$0" -p 2 -m "$@"
}
EOF
fi

if [ $# -gt 0 ]; then
    nodes=$@
else
    if [ -r "$PBS_NODEFILE" ]; then
	log "using nodes from $PBS_NODEFILE"
	nodes=`cat $PBS_NODEFILE | sort -u | grep -v "$master" | sort -n`
	nodes=`echo $master $nodes`
	rename_master=1
	switch_to_master=1
	start_fhglog=1
	start_gpi=1
	start_kvs=1
    fi
fi

if [ -z "$nodes" ]; then
    log "Nothing to do"
    exit 0
fi

headnode="$PBS_O_HOST"

if [ $start_fhglog -eq 1 ]; then
#	killall fhglogd
    log "starting log-server on master node"
    ssh -Y -t "$headnode" screen -D -RR -X "screen -t log ssh -Y -t $master" # fhglogd"
fi

if [ $start_kvs -eq 1 ]; then
    log "starting kvs-daemon on master node"
    ssh -Y -t "$headnode" screen -D -RR -X "screen -t kvs ssh -Y -t $master" # fhgkvsd
fi

if [ $start_gpi -eq 1 ]; then
    log "starting gpi on master node"
    ssh -Y -t "$headnode" screen -D -RR -X "screen -t gpi ssh -Y -t $master"
    ssh -Y -t "$headnode" screen -D -RR -X "screen -t orch ssh -Y -t $master"
    ssh -Y -t "$headnode" screen -D -RR -X "screen -t agg ssh -Y -t $master"
    ssh -Y -t "$headnode" screen -D -RR -X "screen -t sdpac ssh -Y -t $master"
fi

if [ -z "$headnode" ]; then
    log "I don't know what my headnode is"
    exit 1
fi

numnodes=`echo $nodes | wc -w`
maxnodes=10

if [ $numnodes -gt $maxnodes ]; then
    read -n 1 -p "Do you really want to start screen sessions on $numnodes nodes (configured maximum=$maxnodes)? [y/N]: " answer
    case "$answer" in
	y|Y)
	    echo "ok, I'll do as you whish"
	    ;;
	*)
	    echo "Puh."
	    exit 0
	    ;;
    esac
fi
log "going to start screen session on nodes:" $nodes
for n in $nodes; do
    title="$n"
    if [ $rename_master -eq 1 -a x"$n" == x"$master" ]; then
	title="master:$n"
    fi
    if [ x"$n" == x"$master" ]; then
	ssh -Y -t "$headnode" screen -D -RR -X "screen -t $title ssh -Y -t $n"
	ssh -Y -t "$headnode" screen -D -RR -X "screen -t $n ssh -Y -t $n" &
    else
	ssh -Y -t "$headnode" screen -D -RR -X "screen -t $title ssh -Y -t $n" &
    fi
done
wait
echo "# Please execute the following commands:"
echo "source $HOME/.init-screen.env"
echo "trap \"rm $HOME/.init-screen.nodes\" EXIT"

if [ $switch_to_master -eq 1 ]; then
    log "# switching to master-node screen"
    ssh -Y -t "$headnode" screen -X select master
fi
