#!/bin/bash

init_screen_ver=1
test -r "$HOME/.init-screen.cfg" && source "$HOME/.init-screen.cfg"

head_node="${SDPA_HEAD_NODE}"
if [ -z "$head_node" ] ; then
    head_node="${PBS_O_HOST}"
fi

node_file="${SDPA_NODEFILE}"
if [ -z "$node_file" ] ; then
    node_file="${PBS_NODEFILE}"
fi
scratch_dir="$SDPA_SCRATCH_DIR"
screen_name=

# example ~/.screenrc

# defutf8 on
# startup_message off
# caption always "%{= d} %{+b dr}%H%{= dg} | %c %{= dy}%d.%m.%Y | %{= dw}%?%-Lw%?%{b}%n*%f %t%?(%u)%?%{= dw}%?%+Lw%?%{= d}"
# autodetach on
# bind x
# bind ^X
# vbell off

function usage ()
{
	cat >&2 <<EOF
usage $0 [-h] [-f node-file] [-n head-node] [-d scratch-dir] [-s screen-name]

   -f node-file (=$node_file)     specifies the node file to use
   -n head node (=$head_node)     specifies the head node host (where screen runs)
   -d scratch dir (=$scratch_dir) path to a (shared) scratch directory
   -s screen name (=$screen_name) the name of the screen session
   -c                             configure init-screen
   -l                             print shell code to load init-screen environment

important environment variables:
	export IN_INIT_SCREEN="$IN_INIT_SCREEN"
	export SDPA_HEAD_NODE="$head_node"
        export SDPA_SCRATCH_DIR="$scratch_dir"
	export SDPA_GUI="$SDPA_GUI"
	export SDPA_MASTER="$SDPA_MASTER"
	export FHGLOG_to_console="$FHGLOG_to_console"
	export FHGLOG_to_server="$FHGLOG_to_server"
	export FHGLOG_threaded="$FHGLOG_threaded"
        export KVS_URL="$KVS_URL"
EOF
}

function configure ()
{
    # creates $HOME/.init-screen.cfg
    cat <<EOF
The "scratch"  directory should be a directory  you are allowed to  write to and
that is shared among all nodes. I will create a "log" directory within that into
which all components are going to log.

EOF
    read -p "  scratch directory to use: " scratch_dir

    cat <<EOF

Now I  need a host:ip  string on which  the graphical monitor interface  will be
running.  It does not  have to  run all  the time,  but if  you want  to monitor
activities, I need to know that location. Please make sure that nobody else uses
this location.

EOF
    read -p "  location of the monitor gui [host:ip]: " gui_url

    # create config
    cat > "$HOME/.init-screen.cfg" <<EOF
export INIT_SCREEN_VER="$init_screen_ver"
export SDPA_SCRATCH_DIR="$scratch_dir"
export SDPA_GUI="$gui_url"
EOF

    cat <<EOF

Congratulations,    your    configuration    file    has    been    stored    in
~/.init-screen.cfg.

To  finish the  setup of  init-screen,  please add  the following  line to  your
~/.bashrc:

   eval \$(init-screen -l)

You can do so, by executing

   echo 'eval \$(init-screen -l)' >> ~/.bashrc
EOF
}

function print_load_instructions ()
{
# please pass the following to the 'eval' function
     cat <<EOF
if test -r ~/.init-screen.tab ; then if grep -q "\$(hostname -s)" ~/.init-screen.tab ; then if test -r ~/.init-screen.env ; then source ~/.init-screen.env; fi; fi; fi
EOF
}

while getopts ":hclf:n:d:s:" opt; do
    case $opt in
	h)
	    usage
	    exit 0
	    ;;
	c)
	    configure
	    exit 0
	    ;;
	f)
	    node_file=$OPTARG
	    ;;
	n)
	    head_node=$OPTARG
	    ;;
	d)
	    scratch_dir=$OPTARG
	    ;;
	s)
	    screen_name=$OPTARG
	    ;;
	l)
	    print_load_instructions
	    exit 0
	    ;;
	\?)
	    echo "invalid option: $OPTARG" >&2
	    echo "try $0 -h to get a list of options" >&2
	    exit 1
    esac
done

function log ()
{
    echo "$@" >&2
}

if [ ! -e "$HOME/.init-screen.cfg" ] ; then
    log "E: \"$HOME/.init-screen.cfg\" does not exist, please run $0 -c to create one."
    exit 1
fi

if [ x"$init_screen_ver" != x"$INIT_SCREEN_VER" ] ; then
    log "E: \"$HOME/.init-screen.cfg\" is outdated and needs to be recreated. Please run $0 -c"
    exit 1
fi

# sanity check for scratch directory
if [ ! -d "${scratch_dir}" ] ; then
    log "W: scratch_dir is not defined, please enter it now or export SDPA_SCRATCH_DIR before!"
    read -p "type in scratch dir to use: " scratch_dir

    if [ -z "$scratch_dir" ] ; then
        exit 1
    fi

    if [ ! -d "$scratch_dir" ] ; then
	read -n 1 -p "W: $scratch_dir does not exist, shall i create it for you [y/N]? " do_create
	case "$do_create" in
	    y|Y)
		if ! mkdir -p "$scratch_dir" ; then
		    exit 1
		fi
		;;
	    *)
		log "bye."
		exit 1
		;;
	esac
    fi
fi

if [ ! -d "${scratch_dir}" -o ! -w "${scratch_dir}" ] ; then
    log "scratch-dir ${scratch_dir} still does not exist or cannot be written do, giving up" >&2
    exit 1
fi

export SDPA_SCRATCH_DIR="$scratch_dir"

# sanity check for node file
if [ -z "$node_file" ] ; then
    log "W: node_file is not defined, please enter it now or export SDPA_NODEFILE."
    read -p "type in node file to use: " node_file

    if [ -z "$node_file" -o ! -r "$node_file" ] ; then
	log "cannot access node_file!" >&2
        exit 1
    fi
fi

cp "$node_file" "$HOME/.init-screen.nodefile"

export SDPA_NODEFILE="$HOME/.init-screen.nodefile"

node_name=`hostname -s`
first_node=$( head -n 1 "$node_file" )
if [ x"$first_node" != x"$node_name" ] ; then
    log "Sorry, but I have to be run on the master node ($first_node)!"
    exit 1
fi

# check head node
if [ -z "$head_node" ] ; then
    log "Sorry, I don't know my head node, can you help me out here?"
    read -p "head node to use: " head_node
fi

if ! ping -c 1 "$head_node" >/dev/null 2>&1 ; then
    log "head-node $head_node is not reachable ;-("
    exit 1
fi

job_id="${PBS_JOB_ID}"
if [ -z "$job_id" ] ; then
    job_id="job.$head_node.$RANDOM"
fi

master="$node_name"
TABLE="$HOME/.init-screen.tab"
if [ -r "$TABLE" ]; then
    if grep -q "$master" "$TABLE"; then
	log "# It seems, that there is already another screen environment running."
	log "#"
	log "# hint:"
	log "#   possibly running on: `cat ${TABLE} | awk '{print $3}'`"
	read -n 1 -p "Do you want me to fix this? [y/N] " ignore_running
	case $ignore_running in
	    y|Y)
		/bin/rm -f "${TABLE}"
		;;
	    *)
		exit 0
		;;
	esac
    fi
fi

tmp=`cat $node_file | grep -v "$master" | uniq`
tmp=`echo $master $tmp`
echo "${job_id} = $tmp" > "${TABLE}"

env_file="$HOME/.init-screen.env"

log "clearing .init-screen.env..."
/bin/rm -f "$env_file"
log "writing environment info to $env_file..."

test -d "$HOME/.sdpa/data" || mkdir -p "$HOME/.sdpa/data"

export SDPA_LOG_DIR="$scratch_dir/log"
test -d "$SDPA_LOG_DIR" || mkdir -p "$SDPA_LOG_DIR"

cat > "$env_file" <<EOF
#
# init screen internal
#
export IN_INIT_SCREEN="yes"
export SDPA_HEAD_NODE="$head_node"

function log ()
{
  echo "\$@" >&2
  test -x "`which fhglogc 2>/dev/null`" && fhglogc -t "\$0" -p 2 -m "\$@"
}

#
# sdpa config
#
export SDPA_MASTER="$master"
export SDPA_SCRATCH_DIR="$SDPA_SCRATCH_DIR"
export SDPA_LOG_DIR="$SDPA_LOG_DIR"
export SDPA_NODEFILE="$HOME/.init-screen.nodefile"
#
# logging config
#
export FHGLOG_to_server="$master"
#unset  FHGLOG_to_console
export FHGLOG_threaded="false"
export FHGLOG_level="WARN"
#
# key value store config
#
export KVS_URL="$master:2439"
export KVS_STORE="$HOME/.sdpa/data/kvs.dat"
#
# user config follows (may override above values, please be careful!)
#
test -r "$HOME/.init-screen.rc" && source "$HOME/.init-screen.rc"
EOF

if [ ! -r "$HOME/.init-screen.rc" ]; then
    log "creating default .init-screen.rc file..."
    cat > "$HOME/.init-screen.rc" <<EOF
export PC_LIBRARY_PATH="\$HOME/.sdpa/modules"
export PC_MODULE_DATA="\$HOME/.sdpa/moddata"
EOF
fi

function open_screen_window ()
{
    title="${1:?}"
    node="${2:?}"
    log "opening screen window $title on node $node"
    ssh -Y -t "$head_node" screen -D -RR -r -X "screen -t $title ssh -Y -t $node"
}

# fix permissions on ~/.Xauthority?
touch $HOME/.Xauthority
chmod u=rw,g=,o= $HOME/.Xauthority

for t in log kvs gpi orch agg sdpac ; do
    open_screen_window "$t" "$master"
done
open_screen_window "master:$master" "$master"

log "using slave nodes from ${node_file}..."
nodes=`cat ${node_file} | grep -v "$master" | uniq`
num_nodes=`echo $nodes | wc -w`
max_nodes=${SDPA_MAX_SCREEN_NODES:=16}

open_slave_screens=true
if [ $num_nodes -gt $max_nodes ] ; then
    read -n 1 -p "Do you really want to start screen sessions on $num_nodes nodes (configured maximum=$max_nodes)? [y/N]: " answer
    case "$answer" in
	y|Y)
	    log "ok, I'll do as you whish"
	    open_slave_screens=true
	    ;;
	*)
	    open_slave_screens=false
	    log "Puh."
	    ;;
    esac
fi

if [ "$open_slave_screens" == "true" ] ; then
    log "going to start screen session on nodes:" $nodes
    bunch_size=16
    count=0
    for n in $nodes; do
	open_screen_window "$n" "$n" &
	count=$(( count + 1 ))
	if [ $count -ge $bunch_size ] ; then
	    wait
	    count=0
	fi
    done
    wait
    ssh -Y -t "$head_node" screen -D -RR -r -X 'select 0'
fi

echo "# entering new shell, please logout twice from this window"
echo "# Please execute the following commands:"
echo "trap \"rm -f \$HOME/.init-screen.env\" EXIT"

# use the sideeffect that it will source the init-screen.env
# you have to logout twice now ;-(
exec $SHELL
