#!/bin/bash

test -r "$HOME/.sdpa/state/sdpa.env" && source "$HOME/.sdpa/state/sdpa.env"

# set some default values
gpi_bin_path=""
if [ -n "$GPI_PRIV_DIR" -a -w "$GPI_PRIV_DIR" ] ; then
    gpi_bin_path="$GPI_PRIV_DIR"
elif [ -r "$HOME/.sdpa/configs/gpi.dir" ] ; then
    gpi_bin_path=$( cat "$HOME/.sdpa/configs/gpi.dir" )
fi

gpi_cfg=
gpi_exe="gpi-space"
force=false
debug=false

function usage ()
{
    cat >&2 <<EOF
usage: $0 [options]

    -h: print this help
    -d gpid directory (=$gpi_bin_path): priviledged binary path for the gpid
    -c gpi-cfg (=$gpi_cfg): path to the gpi cfg
    -x gpi-exe (=$gpi_exe): gpi program to use
    -g run within debugger
    -f: force (always copy binary)
EOF
}

while getopts ":hgfd:c:x:" opt; do
    case $opt in
	g)
	    debug=true
	    ;;
	f)
	    force=true
	    ;;
	d)
	    gpi_bin_path=$OPTARG
	    ;;
	c)
	    gpi_cfg=$OPTARG
	    ;;
	h)
	    usage
	    exit 0
	    ;;
	x)
	    gpi_exe=$OPTARG
	    ;;
	\?)
	    echo "invalid option: -$OPTARG" >&2
	    echo "try: $0 -h" >&2
	    exit 1
	    ;;
    esac
done

if [ -z "$gpi_bin_path" ] ; then
    log "could not deduce GPI_PRIV_DIR, please export GPI_PRIV_DIR or pass via commandline!"
    exit 1
fi

gpi_exe_path="$SDPA_HOME/bin/gpi-space"
if [ ! -x "${gpi_exe_path}" ] ; then
    log "Sorry, ${gpi_exe} is not executable"
    exit 1
fi
gpi_exe="$(basename ${gpi_exe_path})"

need_copy=false
if [ ! -x "${gpi_bin_path}/${gpi_exe}" ] ; then
    log "${gpi_exe} does not seem to be installed in $gpi_bin_path"
    need_copy=true
else
    ts_inst=$( stat -c %Y "${gpi_bin_path}/${gpi_exe}" )
    ts_cand=$( stat -c %Y "${gpi_exe_path}" )
    if [ $ts_cand -gt $ts_inst ] ; then
	md_inst=$( md5sum "${gpi_bin_path}/${gpi_exe}" | cut -d ' ' -f 1 )
	md_cand=$( md5sum "${gpi_exe_path}" | cut -d ' ' -f 1 )
	if [ "$md_inst" != "$md_cand" ] ; then
	    log "candidate ${gpi_exe_path} is newer than the one in ${gpi_bin_path}"
	    need_copy=true
	fi
    fi
fi

do_copy=false
if [ $need_copy == "true" -a $force == "true" ] ; then
    do_copy=true
fi
if [ $need_copy == "true" -a $do_copy == "false" ] ; then
    read -t 5 -n 1 -p "Do you want me to copy \"$gpi_exe_path\" to \"$gpi_bin_path\"? [y/N] " ans
    case "$ans" in
	y|Y)
	    do_copy=true
	    ;;
	*)
	    ;;
    esac
fi

if [ $do_copy == "true" ] ; then
    if [ ! -d "$gpi_bin_path" ] ; then
	tmp=$( mkdir -p "$gpi_bin_path" 2>&1 )
	if [ $? -ne 0 ] ; then
	    log "could not create $gpi_bin_path: $tmp"
	    exit 1
	fi
    fi
    if [ -w "$gpi_bin_path" ] ; then
	cp "${gpi_exe_path}" "${gpi_bin_path}/${gpi_exe}"
    else
	log "$gpi_bin_path does not exist, or i am not allowed to write to it!"
    fi
fi

if [ -x "$gpi_bin_path/$gpi_exe" ] ; then
    cmdline=
    if [ "$debug" = "true" ] ; then
	cmdline="gdb -ex run --args $cmdline"
    fi
    cmdline="$cmdline ${gpi_bin_path}/${gpi_exe}"

    if [ -n "$gpi_cfg" ] ; then
	log "# Using config file in: $gpi_cfg"
	cmdline="$cmdline $gpi_cfg"
    fi

    log "executing $cmdline"
    exec ${cmdline}
else
    log "cannot execute $gpi_bin_path/$gpi_bin, giving up."
    exit 2
fi
