<defun name="stresstest">
  <properties name="pnetc">
    <properties name="context">
      <property key="MILLI">1000</property>
      <property key="SECOND">${MILLI} * 1000</property>
      <property key="KIBI">2^10</property>
      <property key="MIBI">2^20</property>
      <property key="GIBI">2^30</property>
      <property key="SIZE_OF_LONG">8</property>

      <property key="aggregator">1</property>
      <property key="nre">3</property>
      <property key="seed">long(1000.0 * pi)</property>
      <property key="bytes_to_transfer">1 * ${MIBI}</property>

      <!-- when true, the full shmem segment is verified, not only the data -->
      <property key="verify_all_mem">false</property>
      <property key="verify">false</property>
      <property key="communicate">false</property>

      <property key="num_long_to_transfer">
         ${bytes_to_transfer} div ${SIZE_OF_LONG}
      </property>
    </properties>
  </properties>

  <in name="agg" type="long" place="N"/>
  <in name="nre" type="long" place="M"/>
  <in name="sleeptime" type="long" place="sleeptime"/>
  <in name="num_long_to_transfer" type="long" place="num_long"/>
  <in name="seed" type="long" place="seed"/>
  <in name="verify_all_mem" type="bool" place="verify_all_mem"/>
  <out name="out" type="control" place="out"/>

  <net>
    <struct name="config">
      <field name="handle" type="long"/>
      <field name="scratch" type="long"/>
      <field name="sleeptime" type="long"/>
      <field name="num_long" type="long"/>
      <field name="seed" type="long"/>
      <field name="verify_all_mem" type="bool"/>
      <field name="verify" type="bool"/>
      <field name="communicate" type="bool"/>
    </struct>

    <place name="sleeptime" type="long"><token><value>0 * ${MILLI}</value></token></place>
    <place name="N" type="long"><token><value>${aggregator}</value></token></place>
    <place name="M" type="long"><token><value>${nre}</value></token></place>
    <place name="num_long" type="long"><token><value>${num_long_to_transfer}</value></token></place>
    <place name="seed" type="long"><token><value>${seed}</value></token></place>
    <place name="verify_all_mem" type="bool"><token><value>${verify_all_mem}</value></token></place>
    <place name="verify" type="bool"><token><value>${verify}</value></token></place>
    <place name="communicate" type="bool"><token><value>${communicate}</value></token></place>
    <place name="Nstep" type="long"/>
    <place name="wait" type="long"/>

    <place name="pending" type="long"/>

    <place name="done" type="control"/>
    <place name="out" type="control"/>

    <place name="config" type="config"/>

    <place name="trigger_initialize" type="control"/>
    <place name="trigger_finalize" type="control"/>

    <transition name="init">
      <defun>
        <in name="N" type="long"/>
        <out name="N" type="long"/>
        <out name="wait" type="long"/>
        <out name="trigger" type="control"/>
        <expression>
          ${wait} := ${N};
          ${trigger} := [];
        </expression>
      </defun>
      <connect-in port="N" place="N"/>
      <connect-out port="N" place="Nstep"/>
      <connect-out port="wait" place="wait"/>
      <connect-out port="trigger" place="trigger_initialize"/>
    </transition>

    <transition name="initialize">
      <defun>
        <in name="trigger" type="control"/>
        <in name="sleeptime" type="long"/>
        <in name="seed" type="long"/>
        <in name="num_long" type="long"/>
        <in name="verify_all_mem" type="bool"/>
        <in name="verify" type="bool"/>
        <in name="communicate" type="bool"/>
        <out name="config" type="config"/>
        <module name="stresstest" function="initialize"/>
      </defun>
      <connect-in port="trigger" place="trigger_initialize"/>
      <connect-in port="sleeptime" place="sleeptime"/>
      <connect-in port="seed" place="seed"/>
      <connect-in port="num_long" place="num_long"/>
      <connect-in port="verify_all_mem" place="verify_all_mem"/>
      <connect-in port="verify" place="verify"/>
      <connect-in port="communicate" place="communicate"/>
      <connect-out port="config" place="config"/>
    </transition>

    <transition name="finalize">
      <defun>
        <in name="trigger" type="control"/>
        <in name="config" type="config"/>
        <out name="trigger" type="control"/>
        <module name="stresstest" function="finalize"/>
      </defun>
      <connect-in port="trigger" place="trigger_finalize"/>
      <connect-in port="config" place="config"/>
      <connect-out port="trigger" place="out"/>
    </transition>

    <transition name="generate" inline="true">
      <include-function href="sequence.xml"/>
      <connect-in place="Nstep" port="amount"/>
      <connect-out port="out" place="pending"/>
    </transition>

    <transition name="nre">
      <include-function href="stress.xml"/>
      <connect-read port="N" place="M"/>
      <connect-read port="config" place="config"/>
      <connect-out port="done" place="done"/>
      <connect-in port="trigger" place="pending"/>
    </transition>

    <transition name="dec" priority="1">
      <defun>
        <in name="trigger" type="control"/>
        <in name="wait" type="long"/>
        <out name="wait" type="long"/>
        <expression>
          ${wait} := ${wait} - 1
        </expression>
        <condition>${wait} :gt: 0</condition>
      </defun>
      <connect-in port="trigger" place="done"/>
      <connect-in port="wait" place="wait"/>
      <connect-out port="wait" place="wait"/>
    </transition>

    <transition name="done">
      <defun>
        <in name="wait" type="long"/>
        <in name="M" type="long"/>
        <out name="done" type="control"/>
        <expression>
          ${done} := []
        </expression>
        <condition>${wait} :eq: 0</condition>
      </defun>
      <connect-in port="wait" place="wait"/>
      <connect-in port="M" place="M"/>
      <connect-out port="done" place="trigger_finalize"/>
    </transition>
  </net>
</defun>
