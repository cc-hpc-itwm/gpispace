/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : PerformanceTest.sm
 */

#include <tests/sdpa/PerformanceTestFSMEvent.hpp>
#include "test_FSMPerformance.hpp"
#include "PerformanceTest_sm.h"

using namespace statemap;

namespace tests
{
    namespace sdpa
    {
        // Static class declarations.
        PerfFSM_S0 PerfFSM::S0("PerfFSM::S0", 0);
        PerfFSM_S1 PerfFSM::S1("PerfFSM::S1", 1);

        void FSMPerformanceTestState::T(FSMPerformanceTestContext& context, const PerformanceTestFSMEvent& e)
        {
            Default(context);
            return;
        }

        void FSMPerformanceTestState::Default(FSMPerformanceTestContext& context)
        {
            throw (
                TransitionUndefinedException(
                    context.getState().getName(),
                    context.getTransition()));

            return;
        }

        void PerfFSM_S0::T(FSMPerformanceTestContext& context, const PerformanceTestFSMEvent& e)
        {
            FSMPerformanceTest& ctxt(context.getOwner());

            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.do_s0_s1(e);
                context.setState(PerfFSM::S1);
            }
            catch (...)
            {
                context.setState(PerfFSM::S1);
                throw;
            }
            (context.getState()).Entry(context);

            return;
        }

        void PerfFSM_S1::T(FSMPerformanceTestContext& context, const PerformanceTestFSMEvent& e)
        {
            FSMPerformanceTest& ctxt(context.getOwner());

            (context.getState()).Exit(context);
            context.clearState();
            try
            {
                ctxt.do_s1_s0(e);
                context.setState(PerfFSM::S0);
            }
            catch (...)
            {
                context.setState(PerfFSM::S0);
                throw;
            }
            (context.getState()).Entry(context);

            return;
        }
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
