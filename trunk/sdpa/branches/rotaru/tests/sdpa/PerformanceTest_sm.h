#ifndef _H_PERFORMANCETEST_SM
#define _H_PERFORMANCETEST_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : PerformanceTest.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace sdpa
{
    namespace tests
    {
        // Forward declarations.
        class PerformanceTest;
        class PerformanceTest_S0;
        class PerformanceTest_S1;
        class PerformanceTest_Default;
        class FSMPerformanceTestState;
        class FSMPerformanceTestContext;
        class FSMPerformanceTest;

        class FSMPerformanceTestState :
            public statemap::State
        {
        public:

            FSMPerformanceTestState(const char *name, int stateId)
            : statemap::State(name, stateId)
            {};

            virtual void Entry(FSMPerformanceTestContext&) {};
            virtual void Exit(FSMPerformanceTestContext&) {};

            virtual void T(FSMPerformanceTestContext& context, const ::sdpa::tests::PerformanceTestFSMEvent& e);

        protected:

            virtual void Default(FSMPerformanceTestContext& context);
        };

        class PerformanceTest
        {
        public:

            static PerformanceTest_S0 S0;
            static PerformanceTest_S1 S1;
        };

        class PerformanceTest_Default :
            public FSMPerformanceTestState
        {
        public:

            PerformanceTest_Default(const char *name, int stateId)
            : FSMPerformanceTestState(name, stateId)
            {};

        };

        class PerformanceTest_S0 :
            public PerformanceTest_Default
        {
        public:
            PerformanceTest_S0(const char *name, int stateId)
            : PerformanceTest_Default(name, stateId)
            {};

            void T(FSMPerformanceTestContext& context, const ::sdpa::tests::PerformanceTestFSMEvent& e);
        };

        class PerformanceTest_S1 :
            public PerformanceTest_Default
        {
        public:
            PerformanceTest_S1(const char *name, int stateId)
            : PerformanceTest_Default(name, stateId)
            {};

            void T(FSMPerformanceTestContext& context, const ::sdpa::tests::PerformanceTestFSMEvent& e);
        };

        class FSMPerformanceTestContext :
            public statemap::FSMContext
        {
        public:

            FSMPerformanceTestContext(FSMPerformanceTest& owner)
            : FSMContext(PerformanceTest::S0),
              _owner(owner)
            {};

            FSMPerformanceTestContext(FSMPerformanceTest& owner, const statemap::State& state)
            : FSMContext(state),
              _owner(owner)
            {};

            virtual void enterStartState()
            {
                getState().Entry(*this);
                return;
            }

            FSMPerformanceTest& getOwner() const
            {
                return (_owner);
            };

            FSMPerformanceTestState& getState() const
            {
                if (_state == NULL)
                {
                    throw statemap::StateUndefinedException();
                }

                return (dynamic_cast<FSMPerformanceTestState&>(*_state));
            };

            void T(const ::sdpa::tests::PerformanceTestFSMEvent& e)
            {
                (getState()).T(*this, e);
            };

        private:

            FSMPerformanceTest& _owner;
        };
    }

}


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_PERFORMANCETEST_SM
