%{
  // Finite state machine of the SDPA protocol
  //
%}

%include <string.h>
%package sdpa::fsm::smc
%class DaemonFSM
%header DaemonFSM.hpp

%start SMC_DaemonFSM::Down
%map SMC_DaemonFSM

%%
Down
{
    StartUp(event: sdpa::events::StartUpEvent&)
        Configurring
        {
        	action_configure(event); 
        }
}

Configurring
{
    ConfigOk(event: sdpa::events::ConfigOkEvent&)
        Up
        {
        	action_config_ok(event); 
        }
        
	ConfigNok(event: sdpa::events::ConfigNokEvent&)
        Down
        {
        	action_config_nok(event); 
        }
}

Up
{
	Interrupt(event: sdpa::events::InterruptEvent& )
	Down
	{
		action_interrupt(event);
	}
	
	//event sent from the upper level
	DeleteJob(event: sdpa::events::DeleteJobEvent& )
	nil
	{
		action_delete_job(event);
	}
	
	//event sent from the lower level
	SubmitJob(event: sdpa::events::SubmitJobEvent& )
	nil
	{
		action_submit_job(event);
	}
		
	//event sent from the lower level
	LifeSign(event: sdpa::events::LifeSignEvent& )
	nil
	{
		action_lifesign(event);
	}
		
	//event sent from the lower level
	RequestJob(event: sdpa::events::RequestJobEvent& )
	nil
	{
		action_request_job(event);
	}
	
	//event sent from the lower level
	SubmitJobAck(event: sdpa::events::SubmitJobAckEvent& )
	nil
	{
		action_submit_job_ack(event);
	}
	
	//event sent from the lower level
	ConfigRequest(event: sdpa::events::ConfigRequestEvent& )
	nil
	{
		action_config_request(event);
	}
	
	//a slave finished its job
	JobFinished(event: sdpa::events::JobFinishedEvent& )
	nil
	{
		action_job_finished(event);
	}
	
	//a slave finished its job
	JobFailed(event: sdpa::events::JobFailedEvent& )
	nil
	{
		action_job_failed(event);
	}
	
	//a slave finished its job
	JobCanceled(event: sdpa::events::CancelJobAckEvent& )
	nil
	{
		action_job_canceled(event);
	}
}
%%
