#include "JobImpl.hpp"
#include <sstream>

#include <sdpa/events/JobResultsReplyEvent.hpp>
#include <sdpa/events/JobStatusReplyEvent.hpp>

#include <sdpa/events/JobResultsReplyEvent.hpp>
#include <sdpa/events/JobStatusReplyEvent.hpp>
#include <sdpa/events/DeleteJobAckEvent.hpp>
#include <sdpa/events/CancelJobEvent.hpp>

#include <seda/Stage.hpp>
#include <seda/StageRegistry.hpp>

#include <sdpa/daemon/GenericDaemon.hpp>

using namespace std;
using namespace boost::statechart;
using namespace sdpa::events;

namespace sdpa { namespace daemon {
    JobImpl::JobImpl(const sdpa::job_id_t &id,
                     const sdpa::job_desc_t &desc,
                     const sdpa::daemon::IComm* pHandler,
                     const sdpa::job_id_t &parent)
        : id_(id), desc_(desc),
          parent_(parent),
          b_marked_for_del_(false),
          b_local_(false),
          SDPA_INIT_LOGGER( string("Job ")+ id.str() ),
          pComm(const_cast<IComm*>(pHandler))
    {}

    JobImpl::~JobImpl() throw () { }

    const sdpa::job_id_t & JobImpl::id() const {
        return id_;
    }

    const sdpa::job_id_t & JobImpl::parent() const {
        return parent_;
    }

    const sdpa::job_desc_t & JobImpl::description() const {
        return desc_;
    }

    const Job::data_t & JobImpl::input() const {
        return input_;
    }
    const Job::data_t & JobImpl::output() const {
        return output_;
    }

    void JobImpl::add_input(const Job::value_t & v) {
        input_.push_back(v);
    }

    void JobImpl::add_output(const Job::value_t & v) {
        output_.push_back(v);
    }

    void JobImpl::add_subjob(const Job::ptr_t & job) {
        subjobs_.insert(std::make_pair(job->id(), job));
    }

    Job::ptr_t JobImpl::get_subjob(const job_id_t & jid) {
        return subjobs_[jid];
    }

    bool JobImpl::is_marked_for_deletion() {
    	return b_marked_for_del_;
    }

    bool JobImpl::mark_for_deletion() {
    	return b_marked_for_del_ = true;
    }

    bool JobImpl::is_local() {
      	return b_local_;
    }

    void JobImpl::set_local(bool b_val) {
    	b_local_ = b_val;
    }

    void JobImpl::action_run_job()
    {
    	ostringstream os;
    	os<<"Process 'action_run_job'";
    	SDPA_LOG_DEBUG(os.str());
    }

    // transition from Pending to Cancelled
	void JobImpl::action_cancel_job_from_pending(const sdpa::events::CancelJobEvent& evt)
	{
		ostringstream os;
		os<<"Process 'action_cancel_job_from_pending'";
		SDPA_LOG_DEBUG(os.str());


		// the message comes from GWES, should identify the worker to which the activity was assigned
		// and send him a CancelJob
		// put the job into Cancelling state
		// until you receive a CancelJobAck from the worker
		if(evt.from() == evt.to() ) // the event was  generated by GWES
		{
			try {
				// clearly, I'm in the Pending state here
				// inform immediately GWES that the corresponding activity was cancelled
				gwes::activity_id_t actId = evt.job_id();
				gwes::workflow_id_t wfId  = parent().str();

				pComm->gwes()->activityCanceled( wfId, actId );

			} catch(sdpa::PropertyLookupFailed& ) {
				os.str("");
				os<<"The job was not assigned to a worker!";
				SDPA_LOG_DEBUG(os.str());
			} catch(...) {
				os.str("");
				os<<"Unexpected exception occurred!";
				SDPA_LOG_DEBUG(os.str());
			} //handle here NoSuchWorkflow,NoSuchActivity exceptions
		}
		else //the master sent a Cancel message -> forward it to the workflow engine
		{
			if( pComm->name()!= sdpa::daemon::ORCHESTRATOR )
			{
				// clearly, I'm into the Pending state here
				// return back to the master a CancelJobAckEvent
				CancelJobAckEvent::Ptr pCancelAckEvt(new CancelJobAckEvent( pComm->name(), pComm->master(), evt.job_id()) );
				pComm->sendEvent( pComm->output_stage(), pCancelAckEvt );

				// delete the job
				if( GenericDaemon* pDaemon = dynamic_cast<GenericDaemon*>(pComm))
					pDaemon->jobManager()->deleteJob(evt.job_id());
			}
		}
	}

	// transition from Cancelling to Cancelled
    void JobImpl::action_cancel_job(const sdpa::events::CancelJobEvent& evt)
    {
    	ostringstream os;
    	os<<"Process 'action_cancel_job'";
    	// cancel the job
    	SDPA_LOG_DEBUG(os.str());

    	/*else // the message comes from GWES, should identify the worker to which the activity was assigned
		 * and send him a CancelJob
		 * put the job into Cancelling state
		 * until you receive a CancelJobAck from the worker*/
    	if( evt.from() ==  evt.to() )
		{
    		try
    		{
				sdpa::worker_id_t worker_id = get("worker");// Clearly, the job can be into the submitted or acknowledged queue

				// else, forward the cancel to the worker
				os.str("");
				os<<"Send CancelJobEvent for the job "<<evt.job_id()<<" to the worker "<<worker_id;
				SDPA_LOG_DEBUG(os.str());

				CancelJobEvent::Ptr pCancelEvt( new CancelJobEvent( pComm->name(), worker_id, evt.job_id()));
				pComm->sendEvent(pComm->output_stage(), pCancelEvt);

			} catch(sdpa::PropertyLookupFailed& ) {
				os.str("");
				os<<"The job was not assigned to a worker!";
				SDPA_LOG_DEBUG(os.str());
			} catch(...) {
				os.str("");
				os<<"Unexpected exception occurred!";
				SDPA_LOG_DEBUG(os.str());
			}
		}
		else // /the upper level sent a Cancel message -> inform Gwes
		{
			try {
				gwes::workflow_id_t workflowId = evt.job_id();
				pComm->gwes()->cancelWorkflow(workflowId);
			}
			catch(gwes::Gwes2Sdpa::NoSuchWorkflow)
			{
				os.str("");
				os<<"No such workflow exception occured!";
				SDPA_LOG_DEBUG(os.str());
			}
			catch(...) {
				os.str("");
				os<<"Unexpected exception occurred!";
				SDPA_LOG_DEBUG(os.str());
			}
		}
    }

    void JobImpl::action_cancel_job_ack(const sdpa::events::CancelJobAckEvent& event)
    {
    	ostringstream os;
    	os<<"Process 'action_cancel_job_ack'" ;
    	// Notify WFE that the job e.job_id() was canceled (send a CancelJobAckEvent event to the stage WFE)

    	SDPA_LOG_DEBUG(os.str());
    }

    void JobImpl::action_delete_job(const sdpa::events::DeleteJobEvent& e)
    {
    	ostringstream os;
    	os<<"Process 'action_delete_job'" ;
    	b_marked_for_del_ = true;

    	DeleteJobAckEvent::Ptr pDelJobReply(new DeleteJobAckEvent(e.to(), e.from(), id()) );
    	//send the event
    	pComm->sendEvent(pComm->output_stage(), pDelJobReply);

    	SDPA_LOG_DEBUG(os.str());
    }

    void JobImpl::action_query_job_status(const sdpa::events::QueryJobStatusEvent& e)
    {
    	ostringstream os;
    	os<<"Process 'action_query_job_status'";
    	SDPA_LOG_DEBUG(os.str());

    	JobStatusReplyEvent::status_t status = getStatus();

    	// Post a JobStatusReplyEvent to e.from()
		JobStatusReplyEvent::Ptr pStatReply(new JobStatusReplyEvent(e.to(), e.from(), id(), status));

		// send the event
		pComm->sendEvent(pComm->output_stage(), pStatReply);

    	os.str("");
    	os<<"Posted an event of type StatusReplyEvent";
    	SDPA_LOG_DEBUG(os.str());
    }

    void JobImpl::action_job_finished(const sdpa::events::JobFinishedEvent& event)
    {
    	ostringstream os;
    	os <<"Process 'action_job_finished'";
    	// inform WFE (send a JobFinishedEvent event to the stage WFE)
    	// obsolete: post a JobFinishedAckEvent to e.from()
    	SDPA_LOG_DEBUG(os.str());
    }

    void JobImpl::action_job_failed(const sdpa::events::JobFailedEvent& event)
    {
    	ostringstream os;
    	os <<"Process 'action_job_failed'";
    	// inform WFE (send a JobFailedEvent event to the stage WFE)
    	// obsolete: post a JobFailedAckEvent to e.from()
    	SDPA_LOG_DEBUG(os.str());
    }

    void  JobImpl::action_retrieve_job_results(const sdpa::events::RetrieveJobResultsEvent& e)
    {
    	ostringstream os;
    	os <<"Process 'action_retrieve_results'";

    	// fill it here with real results
    	JobResultsReplyEvent::result_t results("");

    	const JobResultsReplyEvent::Ptr pResReply(new JobResultsReplyEvent(e.to(), e.from(), id(), results));

    	// attach to this event the results!

    	// send the event
    	const std::string outstage = pComm->output_stage();
    	pComm->sendEvent(outstage, pResReply);

    	// Post a JobResultsReplyEvent to e.from()
    	SDPA_LOG_DEBUG(os.str());
    }
}}
