<?xml version = "1.0" encoding = "UTF-8"?>
<xs:schema xmlns="http://www.gridworkflow.org/gworkflowdl" targetNamespace="http://www.gridworkflow.org/gworkflowdl"
           xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
    <xs:annotation>
        <xs:documentation>
<p>
<strong>XML Schema of the Petrinet-based Grid Workflow Description Language (GWorfklowDL).</strong>
</p>
<br/>
<p>Copyright 2009 Fraunhofer Gesellschaft, Munich, Germany, for its Fraunhofer Institute for Computer
Architecture and Software Technology (FIRST), Berlin, Germany
<br/>
All rights reserved. This file is licensed under the terms of the
<a href="http://www.gridworkflow.org/kwfgrid/gworkflowdl/docs/license.html">Fraunhofer FIRST license</a>
<br/>
Written by <a href="http://www.andreas-hoheisel.de/">Andreas Hoheisel</a>, Hans-Werner Pohl, and Tilman
Linden; <a href="http://www.first.fraunhofer.de/">Fraunhofer FIRST</a>.
<br/>
Version: $Id: gworkflowdl_2_0.xsd 1308 2009-05-22 11:16:17Z andreas.hoheisel@first.fraunhofer.de $
</p>
<br/>
<p>This XML Schema specifies a language for describing the data and control flow of workflows based on the
Petri net standard ISO/IEC 15909-1: "High-level Petri nets - Part 1: Concepts, definitions and graphical
notation". Within the GWorkflowDL, the root element <a href="element/workflow.html">workflow</a>
represents a High-Level Petri Net (HLPN), which is composed of a set of
<a href="element/workflow.place.html">places</a> visualized by circles,
<a href="element/workflow.transition.html">transitions</a>
visualized by squares, and ﬂow relations represented by arcs from places to transitions
or from transitions to places. In addition, places can be labeled with a partial capacity restriction
specifying the maximum number of tokens hold by a place. In contrast to ordinary P/T Petri Nets, the
<a href="element/workflow.place.token.html">tokens</a>
of HLPNs are distinguishable and can be used to model high-level values, such as real input/output data,
references to data (e.g., ﬁlenames or URLs), and boolean values representing side-effects. The
distribution of tokens on places is called marking and represents the state of the distributed system.
When an enabled transition occurs (fires), then one input token is consumed from each input place (e.g.,
holding input data) and one new output token is put on each output place (e.g., holding output data).
</p>
<p>This XML namespace mainly comprises the sematics and syntax for describing worklow structures. The
declaration of specific operations and data may be done by means of additional namespaces, such as
<a href="../../gworkflowdl_operationclass_2_0.xsd/index.html">http://www.gridworkflow.org/gworkflowdl/operationclass</a>.
</p><br/>
<p>Example workflow:
<pre>
&lt;workflow xmlns="http://www.gridworkflow.org/gworkflowdl" ID="No_ID"&gt;
  &lt;description&gt;simple workflow&lt;/description&gt;
  &lt;place ID="begin"&gt;
    &lt;token&gt;&lt;control&gt;true&lt;/control&gt;&lt;/token&gt;
  &lt;/place&gt;
  &lt;place ID="end"/&gt;
  &lt;transition ID="t"&gt;
    &lt;inputPlace placeID="begin"/&gt;
    &lt;outputPlace placeID="end"/&gt;
  &lt;/transition&gt;
&lt;/workflow&gt;
</pre>
</p>
</xs:documentation>
    </xs:annotation>
    <xs:element name="workflow">
        <xs:annotation>
            <xs:documentation>
Representation of a workflow by means of a High-level Petri net, mainly composed of places and transitions. The
"workflow" element is the root element of each GWorkflowDL document. The arcs are represented as child elements of
transitions, the tokens are child elements of places.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="owl" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element ref="description" minOccurs="0"/>
                <xs:element ref="property" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="place" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>
A place is a placeholder for tokens that represent the data and the state of the workflow.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element ref="description" minOccurs="0"/>
                            <xs:element ref="property" minOccurs="0" maxOccurs="unbounded"/>
                            <xs:element name="tokenClass" minOccurs="0">
                                <xs:annotation>
                                    <xs:documentation>
Description of the class of tokens hold by a place.
                                    </xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element ref="owl" minOccurs="0" maxOccurs="unbounded"/>
                                    </xs:sequence>
                                    <xs:attribute name="type" type="xs:string"/>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="token" minOccurs="0" maxOccurs="unbounded">
                                <xs:annotation>
                                    <xs:documentation>
A token represents state information, such as true/false (control token) or arbitrary XML (data token).
                                    </xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element ref="property" minOccurs="0" maxOccurs="unbounded"/>
                                        <xs:choice minOccurs="0">
                                            <xs:element name="data">
                                                <xs:annotation>
                                                    <xs:documentation>
The data element can hold one single child element with arbitrary XML representing data (e.g., SOAP parameters) or
references to data (e.g., filenames).
                                                    </xs:documentation>
                                                </xs:annotation>
                                                <xs:complexType>
                                                    <xs:sequence>
                                                        <xs:any namespace="##any" processContents="lax" minOccurs="0"
                                                                maxOccurs="unbounded"/>
                                                    </xs:sequence>
                                                </xs:complexType>
                                            </xs:element>
                                            <xs:element name="control" type="xs:boolean">
                                                <xs:annotation>
                                                    <xs:documentation>
A control token can either be "true" or "false", reflecting the exit status of the previous transition.
                                                    </xs:documentation>
                                                </xs:annotation>
                                            </xs:element>
                                        </xs:choice>
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                        <xs:attribute name="ID" use="required" type="xs:ID"/>
                        <xs:attribute name="capacity" type="xs:integer"/>
                    </xs:complexType>
                </xs:element>
                <xs:element name="transition" minOccurs="0" maxOccurs="unbounded">
                    <xs:annotation>
                        <xs:documentation>
The ocurrence of a transition alters the state of the Petri net. A transition may be linked
to an (external) operation. Petri net arcs are directed edges that are represented by read places, input places,
write places and output places.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element ref="description" minOccurs="0"/>
                            <xs:element ref="property" minOccurs="0" maxOccurs="unbounded"/>
                            <xs:element name="readPlace" type="placeRef" minOccurs="0" maxOccurs="unbounded"/>
                            <xs:element name="inputPlace" type="placeRef" minOccurs="0" maxOccurs="unbounded"/>
                            <xs:element name="writePlace" type="placeRef" minOccurs="0" maxOccurs="unbounded"/>
                            <xs:element name="outputPlace" type="placeRef" minOccurs="0" maxOccurs="unbounded"/>
                            <xs:element name="condition" type="xs:string" minOccurs="0" maxOccurs="unbounded">
                                <xs:annotation>
                                    <xs:documentation>
The optional element "condition" specifies a pre condition expression that must evaluate to "true" for a transition to
be enabled. The syntax for conditions is XPath 1.0. The context for the evaluation is the contents of the input and
read tokens which can be referred to by means of a "$" concatenated with the corresponding edgeExpression (e.g., 
"$input".
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:element name="operation" minOccurs="0">
                                <xs:annotation>
                                    <xs:documentation>
The element "operation" links transitions with (external) operations. As operations may be platform-specific, they are
specified in a separate XML Schema using different namespace.
                                    </xs:documentation>
                                </xs:annotation>
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:any namespace="##any" processContents="lax" minOccurs="0"/>
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                        <xs:attribute name="ID" use="required" type="xs:ID"/>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="ID" use="required" type="xs:ID"/>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="placeRef">
        <xs:annotation>
            <xs:documentation>
Reference to a place within the same GWorkflowDL document.
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="placeID" use="required" type="xs:string">
            <xs:annotation>
                <xs:documentation>
The attribute "placeRef" denotes a place ID.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="edgeExpression" type="xs:string">
            <xs:annotation>
                <xs:documentation>
The attribute edgeExpression is used as value assignement for input and read places and as functional statement for
output places using the XPath 1.0 standard.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:element name="description" type="xs:string">
        <xs:annotation>
            <xs:documentation>
Human-readable description of the element.
            </xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="property">
        <xs:annotation>
            <xs:documentation>
Generic property. The attribute "name" specifies the property name,
the element contents its value.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:simpleContent>
                <xs:extension base="xs:string">
                    <xs:attribute name="name" use="required" type="xs:string"/>
                </xs:extension>
            </xs:simpleContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="owl" type="xs:string">
        <xs:annotation>
            <xs:documentation>URI to external OWL description of the element.</xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="readPlace" type="placeRef">
        <xs:annotation>
            <xs:documentation>
Specifies a read edge which connects the transition with a specific read place. One occurrence of the transition
uses one token on each read place as input token, but the transition does not remove these tokens after occurrence.
Several occurrences of transitions may read the same token on a read place concurrently. Regarding the theory of
P/T nets a read edge is equivalent to a loop of input and output edge, however in practice, a read edge allows
to model concurrent read operations on shared data.
            </xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="inputPlace" type="placeRef">
        <xs:annotation>
            <xs:documentation>
Specifies an input edge which connects the transition with a specific input place. One occurrence of the transition
locks one token on each input place as input token, and removes these tokens from the input places after occurrence.
            </xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="writePlace" type="placeRef">
        <xs:annotation>
            <xs:documentation>
Specifies a write edge which connects the transition with a specific write place. One occurrence of the transition
(partially) overwrites one existing token on each write place. Regarding the theory of P/T nets a write edge is
equivalent to a loop of input and output edge, however in practice, a write edge allows to model concurrent write
operations on shared data.
            </xs:documentation>
        </xs:annotation>
    </xs:element>
    <xs:element name="outputPlace" type="placeRef">
        <xs:annotation>
            <xs:documentation>
Specifies an output edge which connects the transition with a specific output place. One occurrence of the transition
reserves space for one token on each output place, and creates a new token on each output place after occurrence.
            </xs:documentation>
        </xs:annotation>
    </xs:element>
    
</xs:schema>