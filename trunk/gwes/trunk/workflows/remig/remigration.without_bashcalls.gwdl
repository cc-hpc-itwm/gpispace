<workflow xmlns="http://www.gridworkflow.org/gworkflowdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xsi:schemaLocation="http://www.gridworkflow.org/gworkflowdl http://www.gridworkflow.org/kwfgrid/src/xsd/gworkflowdl_2_0.xsd" ID="No_ID">

    <description>ReMigration, complete workflow to be executed on the aggregator</description>

    <!-- set by master workflow -->
    <place ID="config file"/>

    <!-- global settings, normally set by the init function -->
    <place ID="number_of_frequencies"><token><data><sdpa>100</sdpa></data></token></place>
    <place ID="number_of_depthlevels"><token><data><sdpa>50</sdpa></data></token></place>
    <place ID="number_of_parallel_propagators"><token><data><sdpa>3</sdpa></data></token></place>
    <place ID="memhandle_for_outputvolume"><token><data><sdpa>0xdeadbeef</sdpa></data></token></place>
    <place ID="memhandle_for_configuration"><token><data><sdpa>0x47110815</sdpa></data></token></place>

    <!-- init -->
    <place ID="seq after init"><token><data><sdpa>SEQ</sdpa></data></token></place>


    <place ID="seq after read input"/>

    <!-- insert some real operationCandidate here -->
    <transition ID="read input">
      <inputPlace placeID="seq after init" edgeExpression="seq"/>
      <outputPlace placeID="seq after read input" edgeExpression="$seq"/>
    </transition>

    <place ID="seq after read velocity"/>

    <!-- insert some real operationCandidate here -->
    <transition ID="read velocity">
      <inputPlace placeID="seq after read input" edgeExpression="seq"/>
      <outputPlace placeID="seq after read velocity" edgeExpression="$seq"/>
    </transition>

    <!-- the split/join pattern -->
    <!-- works without capacities, later use capacities! -->
    <place ID="slice before work"/>
    <place ID="slice after work"/>

    <place ID="slices_queued"><token><data><sdpa>0</sdpa></data></token></place>
    <place ID="slices_initialized"><token><data><sdpa>0</sdpa></data></token></place>
    <place ID="slices_finalized"><token><data><sdpa>0</sdpa></data></token></place>

    <transition ID="initialize a slice">
      <readPlace placeID="seq after read velocity"/>
      <readPlace placeID="number_of_frequencies" edgeExpression="number_of_frequencies"/>
      <inputPlace placeID="slices_initialized" edgeExpression="slices_initialized"/>

      <condition>$slices_initialized &lt; $number_of_frequencies</condition>

      <readPlace placeID="number_of_parallel_propagators" edgeExpression="number_of_parallel_propagators"/>
      <inputPlace placeID="slices_queued" edgeExpression="slices_queued"/>

      <condition>$slices_queued &lt; $number_of_parallel_propagators</condition>

      <outputPlace placeID="slices_initialized" edgeExpression="$slices_initialized + 1"/>
      <outputPlace placeID="slices_queued" edgeExpression="$slices_queued + 1"/>

      <!-- produce a slice -->
      <outputPlace placeID="slice before work" edgeExpression="$slices_initialized"/>
    </transition>

    <transition ID="all slices are initialized">
      <readPlace placeID="number_of_frequencies" edgeExpression="number_of_frequencies"/>
      <inputPlace placeID="slices_initialized" edgeExpression="slices_initialized"/>
      <condition>$slices_initialized &gt;= $number_of_frequencies</condition>
    </transition>

    <transition ID="finalize a slice">
      <readPlace placeID="number_of_frequencies" edgeExpression="number_of_frequencies"/>
      <inputPlace placeID="slices_finalized" edgeExpression="slices_finalized"/>

      <condition>$slices_finalized &lt; $number_of_frequencies</condition>

      <inputPlace placeID="slices_queued" edgeExpression="slices_queued"/>

      <outputPlace placeID="slices_queued" edgeExpression="$slices_queued - 1"/>
      <outputPlace placeID="slices_finalized" edgeExpression="$slices_finalized + 1"/>

      <!-- consume a slice -->
      <inputPlace placeID="slice after work" edgeExpression="slice"/>
    </transition>

    <place ID="seq after calculation"/>

    <transition ID="all slices are finalized">
      <readPlace placeID="number_of_frequencies" edgeExpression="number_of_frequencies"/>
      <inputPlace placeID="slices_finalized" edgeExpression="slices_finalized"/>
      <condition>$slices_finalized &gt;= $number_of_frequencies</condition>
      <inputPlace placeID="seq after read velocity" edgeExpression="seq"/>
      <outputPlace placeID="seq after calculation" edgeExpression="$seq"/>
    </transition>

    <!-- the real work goes here -->

    <place ID="slice_and_depth before calc one level"/>
    <place ID="slice_and_depth after calc one level"/>
    <place ID="slice_and_depth after update"/>

    <transition ID="tag slice with depth zero">
      <inputPlace placeID="slice before work" edgeExpression="slice"/>
      <readPlace placeID="number_of_frequencies" edgeExpression="number_of_frequencies"/>
      <outputPlace placeID="slice_and_depth before calc one level" edgeExpression="$slice * $number_of_frequencies"/>
    </transition>

    <!-- insert some real operationCandidate here -->
    <transition ID="calc one level">
      <inputPlace placeID="slice_and_depth before calc one level" edgeExpression="slice_and_depth"/>
      <readPlace placeID="number_of_frequencies" edgeExpression="number_of_frequencies"/>
      <readPlace placeID="memhandle_for_configuration" edgeExpression="memhandle_for_configuration"/>
      <outputPlace placeID="slice_and_depth after calc one level" edgeExpression="$slice_and_depth"/>
    </transition>

    <!-- insert some real operationCandidate here -->
    <transition ID="update">
      <inputPlace placeID="slice_and_depth after calc one level" edgeExpression="slice_and_depth"/>
      <!-- exclusive access to the outputvolume -->
      <inputPlace placeID="memhandle_for_outputvolume" edgeExpression="memhandle_for_outputvolume"/>

      <outputPlace placeID="slice_and_depth after update" edgeExpression="$slice_and_depth"/>
      <outputPlace placeID="memhandle_for_outputvolume" edgeExpression="$memhandle_for_outputvolume"/>
    </transition>

    <transition ID="prepare slice for next depthlevel">
      <inputPlace placeID="slice_and_depth after update" edgeExpression="slice_and_depth"/>
      <readPlace placeID="number_of_frequencies" edgeExpression="number_of_frequencies"/>
      <readPlace placeID="number_of_depthlevels" edgeExpression="number_of_depthlevels"/>

      <condition>($slice_and_depth mod $number_of_frequencies) &lt; $number_of_depthlevels - 1</condition>

      <outputPlace placeID="slice_and_depth before calc one level" edgeExpression="$slice_and_depth + 1"/>
    </transition>

    <transition ID="finish calculation for a slice">
      <inputPlace placeID="slice_and_depth after update" edgeExpression="slice_and_depth"/>
      <readPlace placeID="number_of_frequencies" edgeExpression="number_of_frequencies"/>
      <readPlace placeID="number_of_depthlevels" edgeExpression="number_of_depthlevels"/>

      <condition>($slice_and_depth mod $number_of_frequencies) &gt;= $number_of_depthlevels - 1</condition>

      <outputPlace placeID="slice after work" edgeExpression="$slice_and_depth div $number_of_frequencies"/>
    </transition>

    <!-- works done, postprocessing -->
 
    <place ID="seq after prefix sum"/>

    <!-- insert some real operationCandidate here -->
    <transition ID="prefix sum">
      <inputPlace placeID="seq after calculation" edgeExpression="seq"/>
      <outputPlace placeID="seq after prefix sum" edgeExpression="$seq"/>
    </transition>

    <place ID="seq after write output"/>

    <!-- insert some real operationCandidate here -->
    <transition ID="write output">
      <inputPlace placeID="seq after prefix sum" edgeExpression="seq"/>
      <outputPlace placeID="seq after write output" edgeExpression="$seq"/>
    </transition>

    <place ID="seq after finalize"/>

    <!-- insert some real operationCandidate here -->
    <transition ID="finalize">
      <!-- consume all the global variable tokens, not strictly necessary -->
      <inputPlace placeID="number_of_frequencies"/>
      <inputPlace placeID="number_of_depthlevels"/>
      <inputPlace placeID="number_of_parallel_propagators"/>
      <inputPlace placeID="memhandle_for_outputvolume"/>
      <inputPlace placeID="memhandle_for_configuration"/>

      <inputPlace placeID="seq after write output" edgeExpression="seq"/>
      <outputPlace placeID="seq after finalize" edgeExpression="$seq"/>
    </transition>

    <!-- give control back to master workflow -->
    <place ID="done"/>

    <transition ID="done">
      <inputPlace placeID="seq after finalize" edgeExpression="seq"/>
      <outputPlace placeID="done" edgeExpression="$seq"/>
    </transition>

</workflow>
