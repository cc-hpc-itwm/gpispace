#!/bin/sh
if [ -z "$1" ]; then
  echo "usage: $0 MAJOR.MINOR.PATCH"
  exit 1
fi

if ! echo "$1" | grep -q -e '^[[:digit:]]\+\(\.[[:digit:]]\+\(\.[[:digit:]]\+[^ .]*\)\?\)\?$'; then
  echo "version input was not ok: $1"
  echo "   must match \d+(.\d+(.\d+)?)?"
  exit 2
fi

tmp=$( echo $1 | tr . ' ')
read major minor patch <<<$tmp

if [ -z "$minor" ]; then
  minor="0"
fi

if [ -z "$patch" ]; then
  patch="0"
fi

tmp=$( grep -o 'V_.*\ [^ \)]\+' version.cmake )
read foo cur_major foo cur_minor foo cur_patch <<<$tmp
if [ $major -lt $cur_major ]; then
  echo "new major cannot be less than current major"
  exit 4
else
  if [ $major -eq $cur_major ]; then
	if [ $minor -lt $cur_minor ]; then
	  echo "new minor cannot be less than current minor"
	  exit 4
	else
	  if [ $minor -eq $cur_minor ]; then
		if [ $patch -le $cur_patch ]; then
		  echo "new patch cannot be less than current patch"
		  exit 4
		fi	
	  fi
	fi
  fi
fi

version="${major}.${minor}.${patch}"
cur_version="${cur_major}.${cur_minor}.${cur_patch}"
tag="v${version}"
cur_tag="v${cur_version}"
if git tag | grep "$tag"; then
  echo "tag \"$tag\" does already exist, try a different one!"
  exit 3
fi

echo "current: $cur_version"
echo "new:     $version"

echo "replacing version.cmake.in..."
sed -e "s/\@V_MAJOR\@/$major/" -e "s/\@V_MINOR\@/$minor/" -e "s/\@V_PATCH\@/$patch/" version.cmake.in

echo "tagging with $tag..."
