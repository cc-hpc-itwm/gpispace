<defun name="stresstest">
  <in name="agg" type="long" place="N"/>
  <in name="nre" type="long" place="M"/>
  <in name="sleeptime" type="long" place="sleeptime"/>
  <in name="num_long_to_transfer" type="long" place="num_long"/>
  <in name="seed" type="long" place="seed"/>
  <in name="verify_all_mem" type="bool" place="verify_all_mem"/>
  <out name="out" type="control" place="out"/>
  <net>
    <struct name="config">
      <field name="communicate" type="bool"/>
      <field name="handle" type="long"/>
      <field name="num_long" type="long"/>
      <field name="scratch" type="long"/>
      <field name="seed" type="long"/>
      <field name="sleeptime" type="long"/>
      <field name="verify" type="bool"/>
      <field name="verify_all_mem" type="bool"/>
    </struct>
    <place name="sleeptime" type="long">
      <token>
        <value>
	  0
        </value>
      </token>
    </place>
    <place name="N" type="long">
      <token>
        <value>
	  8
        </value>
      </token>
    </place>
    <place name="M" type="long">
      <token>
        <value>
	  1
        </value>
      </token>
    </place>
    <place name="num_long" type="long">
      <token>
        <value>
	  25165824
        </value>
      </token>
    </place>
    <place name="seed" type="long">
      <token>
        <value>
	  3124
        </value>
      </token>
    </place>
    <place name="verify_all_mem" type="bool">
      <token>
        <value>
	  false
        </value>
      </token>
    </place>
    <place name="verify" type="bool">
      <token>
        <value>
	  true
        </value>
      </token>
    </place>
    <place name="communicate" type="bool">
      <token><value>true</value></token>
    </place>
    <place name="Nstep" type="long"/>
    <place name="wait" type="long"/>
    <place name="pending" type="long"/>
    <place name="done" type="control"/>
    <place name="out" type="control"/>
    <place name="config" type="config"/>
    <place name="trigger_initialize" type="control"/>
    <place name="trigger_finalize" type="control"/>
    <transition name="init">
      <defun>
        <in name="N" type="long"/>
        <out name="N" type="long"/>
        <out name="wait" type="long"/>
        <out name="trigger" type="control"/>
        <expression>
          ${wait} := ${N}; ${trigger} := [];
        </expression>
      </defun>
      <connect-in port="N" place="N"/>
      <connect-out port="N" place="Nstep"/>
      <connect-out port="wait" place="wait"/>
      <connect-out port="trigger" place="trigger_initialize"/>
    </transition>
    <transition name="initialize">
      <defun>
        <in name="trigger" type="control"/>
        <in name="sleeptime" type="long"/>
        <in name="seed" type="long"/>
        <in name="num_long" type="long"/>
        <in name="verify_all_mem" type="bool"/>
        <in name="verify" type="bool"/>
        <in name="communicate" type="bool"/>
        <out name="config" type="config"/>
        <module name="stresstest" function="initialize ()"/>
      </defun>
      <connect-in port="trigger" place="trigger_initialize"/>
      <connect-in port="sleeptime" place="sleeptime"/>
      <connect-in port="seed" place="seed"/>
      <connect-in port="num_long" place="num_long"/>
      <connect-in port="verify_all_mem" place="verify_all_mem"/>
      <connect-in port="verify" place="verify"/>
      <connect-in port="communicate" place="communicate"/>
      <connect-out port="config" place="config"/>
    </transition>
    <transition name="finalize">
      <defun>
        <in name="trigger" type="control"/>
        <in name="config" type="config"/>
        <out name="trigger" type="control"/>
        <module name="stresstest" function="finalize ()"/>
      </defun>
      <connect-in port="trigger" place="trigger_finalize"/>
      <connect-in port="config" place="config"/>
      <connect-out port="trigger" place="out"/>
    </transition>
    <transition name="generate" inline="true">
      <defun name="sequence">
        <in name="amount" type="long" place="N"/>
        <out name="out" type="long" place="id"/>
        <net>
          <struct name="state">
            <field name="id" type="long"/>
            <field name="max" type="long"/>
          </struct>
          <place name="N" type="long"/>
          <place name="state" type="state"/>
          <place name="id" type="long"/>
          <place name="check_break" type="state" capacity="1"/>
          <transition name="init">
            <defun>
              <in name="N" type="long"/>
              <out name="state" type="state"/>
              <expression>
                ${state.id} := 0L; ${state.max} := ${N}
              </expression>
            </defun>
            <connect-in port="N" place="N"/>
            <connect-out port="state" place="check_break"/>
          </transition>
          <transition name="break">
            <defun>
              <in name="state" type="state"/>
              <expression/>
              <condition>
                ${state.id} :ge: ${state.max}
              </condition>
            </defun>
            <connect-in port="state" place="check_break"/>
          </transition>
          <transition name="not_break">
            <defun>
              <in name="state" type="state"/>
              <out name="state" type="state"/>
              <expression/>
              <condition>
                ${state.id} :lt: ${state.max}
              </condition>
            </defun>
            <connect-in port="state" place="check_break"/>
            <connect-out port="state" place="state"/>
          </transition>
          <transition name="step">
            <defun>
              <in name="state" type="state"/>
              <out name="state" type="state"/>
              <out name="id" type="long"/>
              <expression>
                ${id} := ${state.id}; ${state.id} := ${state.id} + 1
              </expression>
            </defun>
            <connect-in port="state" place="state"/>
            <connect-out port="state" place="check_break"/>
            <connect-out port="id" place="id"/>
          </transition>
        </net>
      </defun>
      <connect-in port="amount" place="Nstep"/>
      <connect-out port="out" place="pending"/>
    </transition>
    <transition name="nre">
      <defun>
        <in name="N" type="long" place="Nin"/>
        <in name="config" type="config" place="config"/>
        <in name="trigger" type="long" place="id"/>
        <out name="done" type="control" place="out"/>
        <net>
          <template name="dup">
            <in name="in" type="T" place="x"/>
            <out name="one" type="T" place="a"/>
            <out name="two" type="T" place="b"/>
            <net>
              <place name="x" type="T"/>
              <place name="a" type="T"/>
              <place name="b" type="T"/>
              <transition name="dup">
                <defun>
                  <in name="x" type="T"/>
                  <out name="a" type="T"/>
                  <out name="b" type="T"/>
                  <expression>
                    ${a} := ${x}; ${b} := ${x};
                  </expression>
                </defun>
                <connect-in port="x" place="x"/>
                <connect-out port="a" place="a"/>
                <connect-out port="b" place="b"/>
              </transition>
            </net>
          </template>
          <specialize name="dup_long" use="dup">
            <type-map replace="T" with="long"/>
          </specialize>
          <place name="Nin" type="long"/>
          <place name="id" type="long"/>
          <place name="N" type="long"/>
          <place name="wait" type="long"/>
          <place name="pending" type="long"/>
          <place name="config" type="config"/>
          <place name="done" type="control"/>
          <place name="out" type="control"/>
          <transition name="dup" inline="true">
            <use name="dup_long"/>
            <connect-in port="in" place="Nin"/>
            <connect-out port="one" place="N"/>
            <connect-out port="two" place="wait"/>
          </transition>
          <transition name="generate" inline="true">
            <defun name="sequence">
              <in name="amount" type="long" place="N"/>
              <out name="out" type="long" place="id"/>
              <net>
                <struct name="state">
                  <field name="id" type="long"/>
                  <field name="max" type="long"/>
                </struct>
                <place name="N" type="long"/>
                <place name="state" type="state"/>
                <place name="id" type="long"/>
                <place name="check_break" type="state" capacity="1"/>
                <transition name="init">
                  <defun>
                    <in name="N" type="long"/>
                    <out name="state" type="state"/>
                    <expression>
                      ${state.id} := 0L; ${state.max} := ${N}
                    </expression>
                  </defun>
                  <connect-in port="N" place="N"/>
                  <connect-out port="state" place="check_break"/>
                </transition>
                <transition name="break">
                  <defun>
                    <in name="state" type="state"/>
                    <expression/>
                    <condition>
                      ${state.id} :ge: ${state.max}
                    </condition>
                  </defun>
                  <connect-in port="state" place="check_break"/>
                </transition>
                <transition name="not_break">
                  <defun>
                    <in name="state" type="state"/>
                    <out name="state" type="state"/>
                    <expression/>
                    <condition>
                      ${state.id} :lt: ${state.max}
                    </condition>
                  </defun>
                  <connect-in port="state" place="check_break"/>
                  <connect-out port="state" place="state"/>
                </transition>
                <transition name="step">
                  <defun>
                    <in name="state" type="state"/>
                    <out name="state" type="state"/>
                    <out name="id" type="long"/>
                    <expression>
                      ${id} := ${state.id}; ${state.id} := ${state.id} + 1
                    </expression>
                  </defun>
                  <connect-in port="state" place="state"/>
                  <connect-out port="state" place="check_break"/>
                  <connect-out port="id" place="id"/>
                </transition>
              </net>
            </defun>
            <connect-in port="amount" place="N"/>
            <connect-out port="out" place="pending"/>
          </transition>
          <transition name="run">
            <defun>
              <in name="id" type="long"/>
              <in name="i" type="long"/>
              <in name="config" type="config"/>
              <out name="done" type="control"/>
              <module name="stresstest" function="run ()"/>
            </defun>
            <connect-read port="id" place="id"/>
            <connect-read port="config" place="config"/>
            <connect-in port="i" place="pending"/>
            <connect-out port="done" place="done"/>
          </transition>
          <transition name="dec" priority="1">
            <defun>
              <in name="trigger" type="control"/>
              <in name="wait" type="long"/>
              <out name="wait" type="long"/>
              <expression>
                ${wait} := ${wait} - 1
              </expression>
              <condition>
                ${wait} :gt: 0
              </condition>
            </defun>
            <connect-in port="trigger" place="done"/>
            <connect-in port="wait" place="wait"/>
            <connect-out port="wait" place="wait"/>
          </transition>
          <transition name="done">
            <defun>
              <in name="wait" type="long"/>
              <in name="config" type="config"/>
              <in name="id" type="long"/>
              <out name="done" type="control"/>
              <expression>
                ${done} := []
              </expression>
              <condition>
                ${wait} :eq: 0
              </condition>
            </defun>
            <connect-in port="wait" place="wait"/>
            <connect-in port="config" place="config"/>
            <connect-in port="id" place="id"/>
            <connect-out port="done" place="out"/>
          </transition>
        </net>
      </defun>
      <connect-read port="N" place="M"/>
      <connect-read port="config" place="config"/>
      <connect-in port="trigger" place="pending"/>
      <connect-out port="done" place="done"/>
    </transition>
    <transition name="dec" priority="1">
      <defun>
        <in name="trigger" type="control"/>
        <in name="wait" type="long"/>
        <out name="wait" type="long"/>
        <expression>
          ${wait} := ${wait} - 1
        </expression>
        <condition>
          ${wait} :gt: 0
        </condition>
      </defun>
      <connect-in port="trigger" place="done"/>
      <connect-in port="wait" place="wait"/>
      <connect-out port="wait" place="wait"/>
    </transition>
    <transition name="done">
      <defun>
        <in name="wait" type="long"/>
        <in name="M" type="long"/>
        <out name="done" type="control"/>
        <expression>
          ${done} := []
        </expression>
        <condition>
          ${wait} :eq: 0
        </condition>
      </defun>
      <connect-in port="wait" place="wait"/>
      <connect-in port="M" place="M"/>
      <connect-out port="done" place="trigger_finalize"/>
    </transition>
  </net>
</defun>
