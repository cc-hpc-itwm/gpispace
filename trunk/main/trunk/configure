#!/bin/sh
if [ -e ./CMakeLists.txt ] ; then
  echo "F: This script is intended to be executed in a build directory!"
  exit 1
fi

src=$( grep 'CMAKE_HOME_DIRECTORY' CMakeCache.txt | cut -d= -f 2 2>&1 )
if [ $? -ne 0 ] ; then
    src=$( cd $( dirname "$0" ) && pwd )
fi

function usage ()
{
    echo "$0 [-h] [-d] [-t] [-r version] [-p prefix]" >&2
    echo "   -h : print help" >&2
    echo "   -d : debug build" >&2
    echo "   -t : build tests" >&2
    echo "   -r : explicitly set revision" >&2
    echo "   -p : install prefix" >&2
}

build_debug=false
build_tests=false
build_rev=
build_prefix=

count=0
while getopts ":hdtr:p:" opt; do
    case $opt in
	h)
	    usage
	    exit 0
	    ;;
	d)
	    count=$(( count + 1 ))
	    build_debug=true
	    ;;
	t)
	    count=$(( count + 1 ))
	    build_tests=true
	    ;;
	r)
	    count=$(( count + 2 ))
	    build_rev="$OPTARG"
	    ;;
	p)
	    count=$(( count + 2 ))
	    build_prefix="$OPTARG"
	    ;;
	\?)
	    echo "invalid option: -$OPTARG" >&2
	    echo "try: $0 -h" >&2
	    exit 1
	    ;;
    esac
done
shift $count

if [ -z "$build_rev" ] ; then
    build_rev=$( cd "$src" && git describe 2>/dev/null )
    if [ $? != 0 ]; then
	echo "W: could not get version information from git, trying svn..."
	build_rev="$( cd "$src" && svn info | grep '^Revision:' | cut -d' ' -f 2 )"
	if [ $? != 0 ]; then
	    if [ -z "$REV" ] ; then
		echo "E: could not figure out which version identification to use, aborting"
		exit 2
	    else
		echo "I: using revision information from environment \$REV: $REV"
		build_rev="$REV"
	    fi
	fi
    fi
fi

cmake_flags=
if [ -n "$build_rev" ] ; then
    build_rev=$( echo $build_rev | sed -e 's/^v//' )
    cmake_flags="$cmake_flags -DPROJECT_REVISION=$build_rev"
fi

if [ "$build_debug" == "true" ] ; then
    cmake_flags="$cmake_flags -DCMAKE_BUILD_TYPE=Debug"
else
    cmake_flags="$cmake_flags -DCMAKE_BUILD_TYPE=Release"
fi

if [ "$build_tests" == "true" ] ; then
    cmake_flags="$cmake_flags -DBUILD_TESTING=ON"
else
    cmake_flags="$cmake_flags -DBUILD_TESTING=OFF"
fi

if [ -z "$build_prefix" ] ; then
    build_prefix=$( grep CMAKE_INSTALL_PREFIX ./CMakeCache.txt | cut -d= -f 2 | tr -d \" 2>&1 )
fi
if [ -n "$build_prefix" ] ; then
    cmake_flags="$cmake_flags -DCMAKE_INSTALL_PREFIX=$build_prefix"
fi

cmake_flags="$cmake_flags $@"

cmd="cmake \"$src\" $cmake_flags"
echo "# configuring build tree"
echo "# ======================"
echo "#"
echo "#   revision: $build_rev"
echo "#     source: $src"
echo "#      build: `pwd`"
echo "#     prefix: $build_prefix"
echo "#      tests: $build_tests"
echo "#      debug: $build_debug"
echo "#"
echo "# cmake \"$src\" $cmake_flags"
read -t 10 -n 1 -p "press any key to continue (Ctrl+C to abort)..."
echo
cmake "$src" $cmake_flags
