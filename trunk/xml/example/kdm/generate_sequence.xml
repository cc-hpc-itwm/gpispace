<?xml version="1.0" encoding="UTF-8"?>
<defun>
	<in name="amount" type="long" place="amount" />
	<out name="out" type="long" place="out" />
	<net>

		<struct name="COUNTER">
			<field name="i" type="long"/>
			<field name="max" type="long"/>
		</struct>

		<place name="amount" type="long" />
		<place name="out" type="long" />

		<defun name="f_init">
			<in name="N" type="long" />
			<out name="counter" type="COUNTER" />
			<expression>
				${counter.i} := 0L;
				${counter.max} := ${N};
			</expression>
		</defun>

		<place name="counter" type="COUNTER" />
		<transition name="init">
<use name="f_init"/>
			<connect-in place="amount" port="N" />
			<connect-out port="counter" place="counter" />
		</transition>

		<!-- just consume a token -->
		<defun name="f_break">
			<in name="in" type="COUNTER" />
			<expression>
			</expression>
			<condition>${counter.i} &gt;= ${counter.max}</condition>
		</defun>

		<transition name="break">
<use name="f_break"/>
			<connect-in place="counter" port="state" />
		</transition>

		<defun name="f_step">
			<in name="counter" type="COUNTER" />
			<out name="counter" type="COUNTER" />
			<out name="out" type="long" />
			<expression>
				${out} := ${counter.i};
				${counter.i} := ${counter.i} + 1;
			</expression>
			<condition>${counter.i} &lt; ${counter.max}</condition>
		</defun>

		<transition name="step">
<use name="f_step"/>
			<connect-in place="counter" port="counter" />
			<connect-out place="counter" port="counter" />
			<connect-out place="out" port="out" />
		</transition>

	</net>
</defun>