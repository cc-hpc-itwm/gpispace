digraph KDM {
t1 [label = "loadTT\nexp:\n${trigger_gen_store} := []\ncond:\ntrue", shape = "rectangle", style="filled", fillcolor="yellow"];
t2 [label = "gen_store\nexp:\n${gen_store_state.num} := ${config.STORES};\n ${gen_store_state.state} := 0L\ncond:\ntrue", shape = "rectangle"];
t26 [label = "finalize\nexp:\n\ncond:\n${volume_wait} == 0L", shape = "rectangle", style="filled", fillcolor="yellow"];
t4 [label = "gen_store_break\nexp:\n${trigger_gen_offset} := []\ncond:\n${gen_store_state.state} >= ${gen_store_state.num}", shape = "rectangle"];
t22 [label = "volume_break\nexp:\n${volume_to_be_written} := ${volume_processed.volume}\ncond:\n${volume_processed.wait} == 0L", shape = "rectangle"];
t20 [label = "reuse_store1\nexp:\n${loaded_bunch.wait} := ${loaded_bunch.wait} - 1;\n ${volume_processed.buffer1.free} := false;\n ${assign_xor_reuse_store} := []\ncond:\n(${volume_processed.buffer1.bunch} == ${loaded_bunch.bunch}) & (${volume_processed.buffer1.free})", shape = "rectangle", style="filled", fillcolor="#eeeeee"];
t15 [label = "reuse_store\nexp:\n${empty_store} := ${loaded_bunch.store}\ncond:\n${loaded_bunch.wait} == 0L", shape = "rectangle"];
t21 [label = "volume_step\nexp:\n${volume} := ${volume_processed}\ncond:\n${volume_processed.wait} > 0L", shape = "rectangle"];
t6 [label = "gen_offset_step\nexp:\n${offset_bunch} := ${gen_offset_state.state};\n ${offset_volume} := ${gen_offset_state.state};\n ${gen_offset_state.state} := ${gen_offset_state.state} + 1\ncond:\n${gen_offset_state.state} < ${gen_offset_state.num} & bitset_is_element (${wanted_offset}, ${gen_offset_state.state})", shape = "rectangle"];
t16 [label = "assign0\nexp:\n${loaded_bunch.seen} := bitset_insert (${loaded_bunch.seen}, ${volume.volume.id});\n ${volume.buffer0.assigned} := true;\n ${volume.buffer0.bunch} := ${loaded_bunch.bunch};\n ${volume.buffer0.store} := ${loaded_bunch.store};\n ${assign_xor_reuse_store} := []\ncond:\n(!${volume.buffer0.assigned}) & (${volume.volume.offset} == ${loaded_bunch.bunch.offset}) & (!bitset_is_element (${loaded_bunch.seen}, ${volume.volume.id}))", shape = "rectangle", style="filled", fillcolor="#eeeeee"];
t7 [label = "gen_offset_break\nexp:\n\ncond:\n${gen_offset_state.state} >= ${gen_offset_state.num}", shape = "rectangle"];
t17 [label = "assign1\nexp:\n${loaded_bunch.seen} := bitset_insert (${loaded_bunch.seen}, ${volume.volume.id});\n ${volume.buffer1.assigned} := true;\n ${volume.buffer1.bunch} := ${loaded_bunch.bunch};\n ${volume.buffer1.store} := ${loaded_bunch.store};\n ${assign_xor_reuse_store} := []\ncond:\n(!${volume.buffer1.assigned}) & (${volume.volume.offset} == ${loaded_bunch.bunch.offset}) & (!bitset_is_element (${loaded_bunch.seen}, ${volume.volume.id}))", shape = "rectangle", style="filled", fillcolor="#eeeeee"];
t25 [label = "volume_done\nexp:\n${volume_wait} := ${volume_wait} - 1\ncond:\n${volume_written.offset} + 1 >= ${config.OFFSETS}", shape = "rectangle"];
t13 [label = "gen_volume_break\nexp:\n\ncond:\n${gen_volume_state.state.state} >= ${gen_volume_state.state.num}", shape = "rectangle"];
t24 [label = "volume_next_offset\nexp:\n${wanted_offset} := bitset_insert ( ${wanted_offset} , ${volume_written.offset} + 1 );\n\ncond:\n${volume_written.offset} + 1 < ${config.OFFSETS}", shape = "rectangle"];
t19 [label = "reuse_store0\nexp:\n${loaded_bunch.wait} := ${loaded_bunch.wait} - 1;\n ${volume_processed.buffer0.free} := false;\n ${assign_xor_reuse_store} := []\ncond:\n(${volume_processed.buffer0.bunch} == ${loaded_bunch.bunch}) & (${volume_processed.buffer0.free})", shape = "rectangle", style="filled", fillcolor="#eeeeee"];
t9 [label = "gen_bunch_step\nexp:\n${bunch.id} := ${gen_bunch_state.state.state} ;\n ${bunch.offset} := ${gen_bunch_state.offset};\n ${gen_bunch_state.state.state} := ${gen_bunch_state.state.state} + 1\ncond:\n${gen_bunch_state.state.state} < ${gen_bunch_state.state.num}", shape = "rectangle"];
t11 [label = "gen_volume\nexp:\n${gen_volume_state.state.state} := 0L;\n ${gen_volume_state.state.num} := ${config.SUBVOLUMES_PER_OFFSET};\n ${gen_volume_state.offset} := ${offset_volume}\ncond:\ntrue", shape = "rectangle"];
t10 [label = "gen_bunch_break\nexp:\n\ncond:\n${gen_bunch_state.state.state} >= ${gen_bunch_state.state.num}", shape = "rectangle"];
t12 [label = "gen_volume_step\nexp:\n${volume.volume.id} := ${gen_volume_state.state.state};\n ${volume.volume.offset} := ${gen_volume_state.offset};\n ${volume.wait} := ${config.BUNCHES_PER_OFFSET};\n ${volume.buffer0} := ${buffer_empty};\n ${volume.buffer1} := ${buffer_empty};\n ${gen_volume_state.state.state} := ${gen_volume_state.state.state} + 1\ncond:\n${gen_volume_state.state.state} < ${gen_volume_state.state.num}", shape = "rectangle"];
t5 [label = "gen_offset\nexp:\n${gen_offset_state.num} := ${config.OFFSETS};\n ${gen_offset_state.state} := 0L\ncond:\ntrue", shape = "rectangle"];
t3 [label = "gen_store_step\nexp:\n${empty_store} := ${gen_store_state.state};\n ${gen_store_state.state} := ${gen_store_state.state} + 1\ncond:\n${gen_store_state.state} < ${gen_store_state.num}", shape = "rectangle"];
t18 [label = "process\nexp:\n${volume_processed} := ${volume};\n ${volume_processed.buffer0.assigned} := (${volume.buffer0.assigned} & !${volume.buffer0.filled});\n ${volume_processed.buffer0.filled} := (${volume.buffer0.assigned} & !${volume.buffer0.filled});\n ${volume_processed.buffer0.free} := (${volume.buffer0.assigned} & !${volume.buffer0.filled});\n ${volume_processed.buffer1.assigned} := (${volume.buffer1.assigned} & !${volume.buffer1.filled});\n ${volume_processed.buffer1.filled} := (${volume.buffer1.assigned} & !${volume.buffer1.filled});\n ${volume_processed.buffer1.free} := (${volume.buffer1.assigned} & !${volume.buffer1.filled});\n ${volume_processed.wait} := ${volume.wait} - (if ${volume.buffer0.filled} then 1L else 0L endif) - (if ${volume.buffer1.filled} then 1L else 0L endif)\ncond:\n${volume.buffer0.assigned} | ${volume.buffer1.assigned}", shape = "rectangle", style="filled", fillcolor="yellow"];
t0 [label = "gen_config\nexp:\n${config.OFFSETS} := 3;\n${config.BUNCHES_PER_OFFSET} := 10;\n${config.STORES} := 15;\n${config.SUBVOLUMES_PER_OFFSET} := 5;\n${trigger_loadTT} := [];\n${wanted_offset} := bitset_insert ({}, 0L);\n${volume_wait} := ${config.SUBVOLUMES_PER_OFFSET};\n\ncond:\ntrue", shape = "rectangle", style="filled", fillcolor="yellow"];
t14 [label = "load\nexp:\n${loaded_bunch.bunch} := ${bunch};\n ${loaded_bunch.store} := ${empty_store};\n ${loaded_bunch.seen} := {};\n ${loaded_bunch.wait} := ${config.SUBVOLUMES_PER_OFFSET}\ncond:\ntrue", shape = "rectangle", style="filled", fillcolor="yellow"];
t8 [label = "gen_bunch\nexp:\n${gen_bunch_state.state.num} := ${config.BUNCHES_PER_OFFSET} ;\n ${gen_bunch_state.state.state} := 0L ;\n ${gen_bunch_state.offset} := ${offset_bunch}\ncond:\ntrue", shape = "rectangle"];
t23 [label = "write\nexp:\n${volume_written} := ${volume_to_be_written}\ncond:\ntrue", shape = "rectangle", style="filled", fillcolor="yellow"];
p6 [label = "trigger_gen_offset\ntype: control", shape = "ellipse"];
p20 [label = "buffer_empty\ntype: [store :: long, filled :: bool, bunch :: [offset :: long, id :: long], assigned :: bool, free :: bool]\ntoken: [assigned := false, bunch := [id := -1L, offset := -1L], filled := false, free := false, store := -1L]", shape = "ellipse"];
p18 [label = "volume_written\ntype: [offset :: long, id :: long]", shape = "ellipse"];
p8 [label = "gen_offset_state\ntype: [num :: long, state :: long]", shape = "ellipse"];
p7 [label = "wanted_offset\ntype: bitset", shape = "ellipse"];
p10 [label = "offset_volume\ntype: long", shape = "ellipse"];
p5 [label = "empty_store\ntype: long", shape = "ellipse"];
p14 [label = "gen_volume_state\ntype: [offset :: long, state :: [num :: long, state :: long]]", shape = "ellipse"];
p12 [label = "bunch\ntype: [offset :: long, id :: long]", shape = "ellipse"];
p2 [label = "trigger_gen_store\ntype: control", shape = "ellipse"];
p4 [label = "gen_store_state\ntype: [num :: long, state :: long]", shape = "ellipse"];
p21 [label = "assign_xor_reuse_store\ntype: control\ntoken: []", shape = "ellipse"];
p19 [label = "volume_wait\ntype: long", shape = "ellipse"];
p1 [label = "config\ntype: [STORES :: long, BUNCHES_PER_OFFSET :: long, OFFSETS :: long, SUBVOLUMES_PER_OFFSET :: long]", shape = "ellipse"];
p17 [label = "volume_to_be_written\ntype: [offset :: long, id :: long]", shape = "ellipse"];
p16 [label = "volume_processed\ntype: [buffer1 :: [store :: long, filled :: bool, bunch :: [offset :: long, id :: long], assigned :: bool, free :: bool], buffer0 :: [store :: long, filled :: bool, bunch :: [offset :: long, id :: long], assigned :: bool, free :: bool], volume :: [offset :: long, id :: long], wait :: long]", shape = "ellipse"];
p0 [label = "config_file\ntype: string", shape = "ellipse"];
p3 [label = "trigger_loadTT\ntype: control", shape = "ellipse"];
p9 [label = "offset_bunch\ntype: long", shape = "ellipse"];
p11 [label = "gen_bunch_state\ntype: [offset :: long, state :: [num :: long, state :: long]]", shape = "ellipse"];
p13 [label = "loaded_bunch\ntype: [store :: long, bunch :: [offset :: long, id :: long], seen :: bitset, wait :: long]", shape = "ellipse"];
p15 [label = "volume\ntype: [buffer1 :: [store :: long, filled :: bool, bunch :: [offset :: long, id :: long], assigned :: bool, free :: bool], buffer0 :: [store :: long, filled :: bool, bunch :: [offset :: long, id :: long], assigned :: bool, free :: bool], volume :: [offset :: long, id :: long], wait :: long]", shape = "ellipse"];
p0 -> t0 [];
t0 -> p1 [];
t0 -> p3 [];
t0 -> p7 [];
t0 -> p19 [];
p3 -> t1 [];
t1 -> p2 [];
p1t1 [label = "config", shape="none"];
p1t1 -> t1 [style = "dotted"];
p1t2 [label = "config", shape="none"];
p1t2 -> t2 [style = "dotted"];
p2 -> t2 [];
t2 -> p4 [];
p4 -> t3 [dir="both"];
t3 -> p5 [];
p4 -> t4 [];
t4 -> p6 [];
p1t5 [label = "config", shape="none"];
p1t5 -> t5 [style = "dotted"];
p6 -> t5 [];
t5 -> p8 [];
p7 -> t6 [style = "dotted"];
p8 -> t6 [dir="both"];
t6 -> p9 [];
t6 -> p10 [];
p8 -> t7 [];
p1t8 [label = "config", shape="none"];
p1t8 -> t8 [style = "dotted"];
p9 -> t8 [];
t8 -> p11 [];
p11 -> t9 [dir="both"];
t9 -> p12 [];
p11 -> t10 [];
p1t11 [label = "config", shape="none"];
p1t11 -> t11 [style = "dotted"];
p10 -> t11 [];
t11 -> p14 [];
p1t12 [label = "config", shape="none"];
p1t12 -> t12 [style = "dotted"];
p20 -> t12 [style = "dotted"];
p14 -> t12 [dir="both"];
t12 -> p15 [];
p14 -> t13 [];
p1t14 [label = "config", shape="none"];
p1t14 -> t14 [style = "dotted"];
p5 -> t14 [];
p12 -> t14 [];
t14 -> p13 [];
p13 -> t15 [];
t15 -> p5 [];
p13 -> t16 [dir="both"];
p15 -> t16 [dir="both"];
p21 -> t16 [dir="both"];
p13 -> t17 [dir="both"];
p15 -> t17 [dir="both"];
p21 -> t17 [dir="both"];
p1t18 [label = "config", shape="none"];
p1t18 -> t18 [style = "dotted"];
p15 -> t18 [];
t18 -> p16 [];
p13 -> t19 [dir="both"];
p16 -> t19 [dir="both"];
p21 -> t19 [dir="both"];
p13 -> t20 [dir="both"];
p16 -> t20 [dir="both"];
p21 -> t20 [dir="both"];
p16 -> t21 [];
t21 -> p15 [];
p21 -> t21 [style = "dotted"];
p16 -> t22 [];
t22 -> p17 [];
p21 -> t22 [style = "dotted"];
p1t23 [label = "config", shape="none"];
p1t23 -> t23 [style = "dotted"];
p17 -> t23 [];
t23 -> p18 [];
p1t24 [label = "config", shape="none"];
p1t24 -> t24 [style = "dotted"];
p7 -> t24 [dir="both"];
p18 -> t24 [];
p1t25 [label = "config", shape="none"];
p1t25 -> t25 [style = "dotted"];
p18 -> t25 [];
p19 -> t25 [dir="both"];
p19 -> t26 [];
p1t26 [label = "config", shape="none"];
p1t26 -> t26 [style = "dotted"];
}
