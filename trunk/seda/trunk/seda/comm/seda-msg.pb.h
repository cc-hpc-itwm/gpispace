// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_seda_2dmsg_2eproto__INCLUDED
#define PROTOBUF_seda_2dmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000003
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000003 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace seda {
namespace comm {

// Internal implementation detail -- do not call these.
void  protobuf_BuildDesc_seda_2dmsg_2eproto();
void protobuf_BuildDesc_seda_2dmsg_2eproto_AssignGlobalDescriptors(
    ::google::protobuf::FileDescriptor* file);

class Message;

// ===================================================================

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();
  
  Message(const Message& from);
  
  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();
  void Swap(Message* other);
  
  // implements Message ----------------------------------------------
  
  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;
  int ByteSize() const;
  
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  bool SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string to = 1;
  inline bool has_to() const;
  inline void clear_to();
  inline const ::std::string& to() const;
  inline void set_to(const ::std::string& value);
  inline void set_to(const char* value);
  inline ::std::string* mutable_to();
  
  // required string from = 2;
  inline bool has_from() const;
  inline void clear_from();
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline ::std::string* mutable_from();
  
  // required bytes payload = 3;
  inline bool has_payload() const;
  inline void clear_payload();
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const void* value, size_t size);
  inline ::std::string* mutable_payload();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* to_;
  static const ::std::string _default_to_;
  ::std::string* from_;
  static const ::std::string _default_from_;
  ::std::string* payload_;
  static const ::std::string _default_payload_;
  friend void protobuf_BuildDesc_seda_2dmsg_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// Message

// required string to = 1;
inline bool Message::has_to() const {
  return _has_bit(0);
}
inline void Message::clear_to() {
  if (to_ != &_default_to_) {
    to_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Message::to() const {
  return *to_;
}
inline void Message::set_to(const ::std::string& value) {
  _set_bit(0);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void Message::set_to(const char* value) {
  _set_bit(0);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline ::std::string* Message::mutable_to() {
  _set_bit(0);
  if (to_ == &_default_to_) {
    to_ = new ::std::string;
  }
  return to_;
}

// required string from = 2;
inline bool Message::has_from() const {
  return _has_bit(1);
}
inline void Message::clear_from() {
  if (from_ != &_default_from_) {
    from_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Message::from() const {
  return *from_;
}
inline void Message::set_from(const ::std::string& value) {
  _set_bit(1);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void Message::set_from(const char* value) {
  _set_bit(1);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline ::std::string* Message::mutable_from() {
  _set_bit(1);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  return from_;
}

// required bytes payload = 3;
inline bool Message::has_payload() const {
  return _has_bit(2);
}
inline void Message::clear_payload() {
  if (payload_ != &_default_payload_) {
    payload_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Message::payload() const {
  return *payload_;
}
inline void Message::set_payload(const ::std::string& value) {
  _set_bit(2);
  if (payload_ == &_default_payload_) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void Message::set_payload(const char* value) {
  _set_bit(2);
  if (payload_ == &_default_payload_) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void Message::set_payload(const void* value, size_t size) {
  _set_bit(2);
  if (payload_ == &_default_payload_) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_payload() {
  _set_bit(2);
  if (payload_ == &_default_payload_) {
    payload_ = new ::std::string;
  }
  return payload_;
}


}  // namespace comm
}  // namespace seda
#endif  // PROTOBUF_seda_2dmsg_2eproto__INCLUDED
