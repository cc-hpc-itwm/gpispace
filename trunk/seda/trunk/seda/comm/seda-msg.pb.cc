// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "seda-msg.pb.h"
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace seda {
namespace comm {

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;

}  // namespace


void protobuf_BuildDesc_seda_2dmsg_2eproto_AssignGlobalDescriptors(const ::google::protobuf::FileDescriptor* file) {
  Message_descriptor_ = file->message_type(0);
  Message::default_instance_ = new Message();
  static const int Message_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, payload_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      sizeof(Message));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, Message::default_instance_);
  Message::default_instance_->InitAsDefaultInstance();
}

void protobuf_BuildDesc_seda_2dmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;
  ::google::protobuf::DescriptorPool* pool =
    ::google::protobuf::DescriptorPool::internal_generated_pool();

  pool->InternalBuildGeneratedFile(
    "\n\016seda-msg.proto\022\tseda.comm\"4\n\007Message\022\n"
    "\n\002to\030\001 \002(\t\022\014\n\004from\030\002 \002(\t\022\017\n\007payload\030\003 \002("
    "\014B\002H\001", 85,
  &protobuf_BuildDesc_seda_2dmsg_2eproto_AssignGlobalDescriptors);
}

// Force BuildDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_seda_2dmsg_2eproto {
  StaticDescriptorInitializer_seda_2dmsg_2eproto() {
    protobuf_BuildDesc_seda_2dmsg_2eproto();
  }
} static_descriptor_initializer_seda_2dmsg_2eproto_;


// ===================================================================

const ::std::string Message::_default_to_;
const ::std::string Message::_default_from_;
const ::std::string Message::_default_payload_;
Message::Message()
  : ::google::protobuf::Message(),
    _cached_size_(0),
    to_(const_cast< ::std::string*>(&_default_to_)),
    from_(const_cast< ::std::string*>(&_default_from_)),
    payload_(const_cast< ::std::string*>(&_default_payload_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

void Message::InitAsDefaultInstance() {}

Message::Message(const Message& from)
  : ::google::protobuf::Message(),
    _cached_size_(0),
    to_(const_cast< ::std::string*>(&_default_to_)),
    from_(const_cast< ::std::string*>(&_default_from_)),
    payload_(const_cast< ::std::string*>(&_default_payload_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

Message::~Message() {
  if (to_ != &_default_to_) {
    delete to_;
  }
  if (from_ != &_default_from_) {
    delete from_;
  }
  if (payload_ != &_default_payload_) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Message::descriptor() {
  if (Message_descriptor_ == NULL) protobuf_BuildDesc_seda_2dmsg_2eproto();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_BuildDesc_seda_2dmsg_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (to_ != &_default_to_) {
        to_->clear();
      }
    }
    if (_has_bit(1)) {
      if (from_ != &_default_from_) {
        from_->clear();
      }
    }
    if (_has_bit(2)) {
      if (payload_ != &_default_payload_) {
        payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required string to = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_to()));
        if (input->ExpectTag(18)) goto parse_from;
        break;
      }
      
      // required string from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_from:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_from()));
        if (input->ExpectTag(26)) goto parse_payload;
        break;
      }
      
      // required bytes payload = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_payload:
        DO_(::google::protobuf::internal::WireFormat::ReadBytes(input, mutable_payload()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

bool Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  // required string to = 1;
  if (_has_bit(0)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(1, this->to(), output));
  }
  
  // required string from = 2;
  if (_has_bit(1)) {
    DO_(::google::protobuf::internal::WireFormat::WriteString(2, this->from(), output));
  }
  
  // required bytes payload = 3;
  if (_has_bit(2)) {
    DO_(::google::protobuf::internal::WireFormat::WriteBytes(3, this->payload(), output));
  }
  
  if (!unknown_fields().empty()) {
    DO_(::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output));
  }
  return true;
#undef DO_
}

int Message::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string to = 1;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->to());
    }
    
    // required string from = 2;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->from());
    }
    
    // required bytes payload = 3;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::BytesSize(this->payload());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_to(from.to());
    }
    if (from._has_bit(1)) {
      set_from(from.from());
    }
    if (from._has_bit(2)) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(to_, other->to_);
    std::swap(from_, other->from_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* Message::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Message::GetReflection() const {
  if (Message_reflection_ == NULL) protobuf_BuildDesc_seda_2dmsg_2eproto();
  return Message_reflection_;
}

}  // namespace comm
}  // namespace seda
