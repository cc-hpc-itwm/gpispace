<defun name="init">

  <include-structs href="types.xml"/>

  <in name="description" type="string" place="description"/>
  <in name="file_with_config" type="string" place="file_with_config"/>
  <out name="config" type="config" place="config_written"/>

  <net>
    <place name="description" type="string"/>
    <place name="file_with_config" type="string"/>
    <place name="config" type="config"/>
    <place name="config_written" type="config"/>

    <transition name="init">
      <defun>
        <in name="description" type="string"/>
        <out name="config" type="config"/>
        <module name="ufbmig" function="config init (description)">
          <cinclude href="fhglog/fhglog.hpp"/>
          <cinclude href="util/memory.hpp"/>
          <code><![CDATA[
            LOG (INFO, "init: " << description);

            ::pnetc::type::config::config config;

            config.size.mem.gpi = 0L;
            config.size.mem.shmem = 0L;

            config.size.package = (4L << 10);
            config.size.input = 50L * config.size.package;

            config.num.nodes = fvmGetNodeCount();

            // ************************************************************* //

            // just a guess
            config.num.interval = 4L * config.num.nodes;

            config.num.package = (config.size.input + config.size.package - 1L)
                               / config.size.package
                               ;

            config.size.alloc.fine_any = 0L;
            config.size.alloc.coarse_mask = 0L;
            config.size.alloc.coarse_vel = 0L;
            config.size.alloc.output = 100 * 100 * 200 * sizeof(float);
            config.size.alloc.update = 37L * config.num.interval;
            config.size.alloc.input = 2L * config.num.nodes * config.size.package;

            config.num.store = config.size.alloc.input / config.size.package;

            config.size.interval =
              config.size.alloc.update / config.num.interval;

            // ************************************************************* //

            if (config.size.alloc.update < config.num.interval)
              {
                throw std::runtime_error
                  ("config.size.alloc.update < config.num.interval");
              }

            if (config.num.store < 1)
              {
                throw std::runtime_error
                  ("config.num.store < 1");
              }

            // ************************************************************* //

            namespace vmem = ::ufbmig::util::memory::global;

            config.handle.data.fine_any
              = vmem::alloc (config.size.alloc.fine_any, "data.fine");
            config.handle.data.coarse_mask
              = vmem::alloc (config.size.alloc.coarse_mask, "data.coarse_mask");
            config.handle.data.coarse_vel
              = vmem::alloc (config.size.alloc.coarse_vel, "data.coarse_vel");
            config.handle.data.output
              = vmem::alloc (config.size.alloc.output, "data.output");
            config.handle.data.update
              = vmem::alloc (config.size.alloc.update, "data.update");
            config.handle.data.input
              = vmem::alloc (config.size.alloc.input, "data.input");

            config.handle.scratch.update
              = vmem::alloc (config.size.alloc.update, "scratch.update");
            config.handle.scratch.output
              = vmem::alloc (config.size.alloc.output, "scratch.output");

            config.handle.scratch.fine_any = 0L;
            config.handle.scratch.coarse_mask = 0L;
            config.handle.scratch.coarse_vel = 0L;
            config.handle.scratch.input = 0L;

            // ************************************************************* //

            LOG (INFO, "The config is: " << config);

            return config;
          ]]></code>
        </module>
      </defun>
      <connect-in port="description" place="description"/>
      <connect-out port="config" place="config"/>
    </transition>

    <transition name="write_config" inline="true">
      <include-function href="write/config.xml"/>
      <connect-in port="file_with_config" place="file_with_config"/>
      <connect-in port="config" place="config"/>
      <connect-out port="config" place="config_written"/>
    </transition>
  </net>

</defun>
