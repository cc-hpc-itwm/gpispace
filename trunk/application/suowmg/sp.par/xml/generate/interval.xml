<defun>

  <in name="config" type="config" place="config"/>
  <out name="interval" type="interval" place="interval"/>

  <net>

    <place name="config" type="config"/>
    <place name="interval" type="interval"/>

    <struct name="counter">
      <field name="max" type="long"/>
      <field name="id" type="long"/>
    </struct>

    <struct name="state">
      <field name="counter" type="counter"/>
      <field name="size" type="long"/>
    </struct>

    <transition name="extractN">
      <defun>
        <in name="config" type="config"/>
        <out name="state" type="state"/>
        <expression>
          ${state.counter.max} := ${config.num.slot};
          ${state.counter.id} := 0L;
          ${state.size} := ${config.size.bunch};
        </expression>
      </defun>
      <connect-in port="config" place="config"/>
      <connect-out port="state" place="state"/>
    </transition>

    <place name="state" type="state"/>

    <transition name="done">
      <defun>
        <in name="state" type="state"/>
        <expression/>
      </defun>
      <condition>
        ${state.counter.id} :ge: ${state.counter.max}
      </condition>
      <connect-in port="state" place="state"/>
    </transition>

    <transition name="not_done">
      <defun>
        <in name="state" type="state"/>
        <out name="state" type="state"/>
        <out name="interval" type="interval"/>
        <expression>
          ${interval.offset} := ${state.counter.id} * ${state.size};
          ${interval.size} := ${state.size};
          ${state.counter.id} := ${state.counter.id} + 1
        </expression>
      </defun>
      <condition>
        ${state.counter.id} :lt: ${state.counter.max}
      </condition>
      <connect-in port="state" place="state"/>
      <connect-out port="state" place="state"/>
      <connect-out port="interval" place="interval"/>
    </transition>

  </net>
</defun>
