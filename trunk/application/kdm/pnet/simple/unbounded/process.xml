<defun internal="false" name="process">
  <in name="volume" type="VOLUME"  place="volume_in"/>
  <in name="config" type="CONFIG"  place="config_in"/>
  <out name="volume"  type="VOLUME" place="volume_done"/>

  <net>
    <place name="volume_in" type="VOLUME" />
    <place name="volume" type="VOLUME" />
    <place name="volume_to_write" type="VOLUME" />
    <place name="config_in" type="CONFIG" />
    <place name="config" type="CONFIG" />
    <place name="config_init" type="CONFIG" />
    <place name="config_generate" type="CONFIG" />
    <place name="wait" type="long" />
    <place name="volume_done" type="VOLUME" />

    <place name="credit_load" type="control"/>

    <include-template href="triple.xml"/>
    <specialize name="triple_config" use="triple">
      <type-map replace="T" with="CONFIG"/>
    </specialize>

    <transition name="triple_config" inline="true">
      <use name="triple_config"/>
      <connect-in port="in" place="config_in"/>
      <connect-out port="one" place="config_generate"/>
      <connect-out port="two" place="config_init"/>
      <connect-out port="three" place="config"/>
    </transition>

    <transition name="init" >
      <defun>
        <in name="config" type="CONFIG"/>
        <out name="wait" type="long" />
        <out name="trigger" type="control"/>
        <expression>
          ${wait} := ${config.BUNCHES_PER_OFFSET};
          ${trigger} := []
        </expression>
      </defun>
      <connect-in place="config_init" port="config" />
      <connect-out place="wait" port="wait" />
      <connect-out port="trigger" place="credit_load"/>
    </transition>

    <include-template href="dup.xml"/>

    <specialize name="dup_volume" use="dup">
      <type-map replace="T" with="VOLUME"/>
    </specialize>

    <transition name="dup_volume" inline="true">
       <use name="dup_volume"/>
       <connect-in port="in" place="volume_in"/>
       <connect-out port="one" place="volume_generate_bunch"/>
       <connect-out port="two" place="volume_to_write"/>
    </transition>

    <transition name="generate_bunches" inline="true">
      <include-function href="process/init.xml"/>
      <place-map real="credit_load" virtual="credit_load"/>
      <connect-in port="volume" place="volume_generate_bunch"/>
      <connect-in port="config" place="config_generate"/>
      <connect-out port="bunch" place="bunch"/>
    </transition>

    <place name="volume_generate_bunch" type="VOLUME"/>
    <place name="bunch" type="BUNCH"/>

    <transition name="process_bunch" inline="true">
      <include-function href="process/process.xml"/>
      <connect-read place="config" port="config" />
      <connect-in   place="bunch"  port="bunch" />
      <connect-out  port="bunch"   place="bunch_done" />
    </transition>

    <place name="bunch_done" type="BUNCH"/>

    <transition name="wait" inline="true">
      <include-function href="process/wait.xml"/>
      <place-map virtual="credit" real="credit_load"/>
      <place-map virtual="wait" real="wait"/>
      <connect-in port="bunch" place="bunch_done"/>
      <connect-out port="done" place="trigger_write"/>
    </transition>

    <place name="trigger_write" type="control"/>

    <include-template href="trigger_if.xml"/>
    <specialize name="trigger_if_VOLUME" use="trigger_if">
      <type-map replace="T" with="VOLUME"/>
    </specialize>

    <transition name="trigger_write">
      <use name="trigger_if_VOLUME"/>
      <connect-in place="trigger_write"  port="trigger" />
      <connect-in place="volume_to_write" port="object"/>
      <connect-out place="volume" port="object"/>
    </transition>

    <transition name="write">
      <defun>
        <in  name="config"  type="CONFIG"/>
        <in  name="volume"  type="VOLUME"/>
        <out name="volume"    type="VOLUME" />
        <module name="kdm" function="write"/>
      </defun>
      <connect-in  place="config" port="config" />
      <connect-in  place="volume" port="volume" />
      <connect-out port="volume" place="volume_done" />
    </transition>
  </net>
</defun>
