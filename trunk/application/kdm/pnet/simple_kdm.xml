<?xml version="1.0" encoding="UTF-8"?>
<defun name="kdm_simple"
       internal="false"
       xsi:noNamespaceSchemaLocation="../../xsd/pnet.xsd"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
>
  <include-properties href="prop.pretty.dot.xml"/>
  <include-structs href="typedef.xml"/>

  <in name="config_file" type="string" place="config_file"/>
  <out name="done" type="control" place="done"/>

  <net>
<!--       <value>"/p/herc/itwm/hpc/soft/sdpa/kdm/Kirchhoff_TestKDMDaniel_new_fineTT_fineSL.xml"</value> -->

   <place name="config_file" type="string">
     <token>
       <value>"/p/herc/itwm/hpc/soft/sdpa/kdm/Kirchhoff_Model.xml"</value>
     </token>
   </place>
   <place name="done" type="control"/>

   <transition name="initialize">
     <defun>
       <in name="config_file" type="string"/>
       <out name="config" type="CONFIG" />
       <module name="kdm" function="initialize"/>
     </defun>
     <connect-in place="config_file" port="config_file"/>
     <connect-out port="config" place="config_initialized" />
   </transition>

    <include-template href="trigger_when.xml"/>
    <specialize name="trigger_when_initialized" use="trigger_when">
      <type-map replace="T" with="CONFIG"/>
    </specialize>

    <transition name="trigger_when_initialized">
      <use name="trigger_when_initialized"/>
      <connect-in port="object" place="config_initialized"/>
      <connect-out port="object" place="config"/>
      <connect-out port="trigger" place="initialized"/>
    </transition>

    <place name="config" type="CONFIG"/>
    <place name="config_initialized" type="CONFIG"/>
    <place name="wait" type="long"/>
    <place name="initialized" type="control" />
    <place name="trigger_init_wait" type="control" />

    <transition name="init_wait">
      <defun>
        <in name="trigger" type="control"/>
        <in name="config" type="CONFIG"/>
        <out name="wait" type="long"/>
        <expression>
          ${wait} := ${config.OFFSETS} * ${config.SUBVOLUMES_PER_OFFSET}
        </expression>
      </defun>
      <connect-read port="config" place="config"/>
      <connect-in port="trigger" place="trigger_init_wait"/>
      <connect-out port="wait" place="wait"/>
    </transition>

    <include-template href="triple.xml"/>
    <specialize name="triple_control" use="triple">
      <type-map replace="T" with="control"/>
    </specialize>

    <transition name="triple_init_done" inline="true">
      <use name="triple_control"/>
      <connect-in port="in" place="initialized"/>
      <connect-out port="one" place="trigger_loadTT"/>
      <connect-out port="two" place="trigger_extract_offsets"/>
      <connect-out port="three" place="trigger_init_wait"/>
    </transition>

    <place name="trigger_loadTT" type="control" />

    <transition name="loadTT" inline="true">
      <include-function href="loadTT.xml"/>
      <place-map virtual="config" real="config"/>
      <connect-out port="trigger" place="loadTT_done"/>
      <connect-in port="trigger" place="trigger_loadTT"/>
    </transition>
    <place name="trigger_extract_offsets" type="control" />

    <place name="loadTT_done" type="control"/>

    <transition name="extract_offsets">
      <defun>
        <in name="config" type="CONFIG" />
        <in name="trigger" type="control" />
        <out name="offsets" type="long" />
        <expression>
          ${offsets} := ${config.OFFSETS}
        </expression>
      </defun>
      <connect-read place="config" port="config" />
      <connect-in   place="trigger_extract_offsets" port="trigger" />
      <connect-out  port="offsets" place="number_of_offsets" />
    </transition>
    <place name="number_of_offsets" type="long"/>

    <transition name="extract_number_of_volumes">
      <defun>
        <in name="config" type="CONFIG"/>
        <in name="offset" type="long"/>
        <out name="volumes" type="long"/>
        <out name="offset" type="long"/>
        <expression>
          ${volumes} := ${config.SUBVOLUMES_PER_OFFSET};
        </expression>
      </defun>
      <connect-in place="offset_generated" port="offset"/>
      <connect-out place="offset" port="offset"/>
      <connect-read place="config" port="config"/>
      <connect-out port="volumes" place="number_of_volumes"/>
    </transition>
    <place name="number_of_volumes" type="long" />

    <transition name="generate_offset" inline="true">
      <include-function href="sequence.xml"/>
      <connect-in place="number_of_offsets" port="amount"/>
      <connect-out place="offset_generated" port="out"/>
    </transition>

    <place name="offset_generated" type="long"/>

    <place name="offset" type="long"/>

    <transition name="generate_volume" inline="true">
      <include-function href="generate_volume.xml"/>
      <connect-in place="offset" port="offset" />
      <connect-in place="number_of_volumes" port="amount" />
      <connect-out place="volume" port="out" />
    </transition>

    <!--  check if this type is defined!!!! -->
    <place name="volume" type="VOLUME"/>

    <!-- wrap process volume so that it will be executed on the nre-pcd -->
    <transition name="process_volume">
      <defun internal="false">
        <in name="volume" type="VOLUME"  place="volume"/>
        <in name="config" type="CONFIG"  place="config"/>
        <in name="trigger" type="control" place="trigger"/>
        <out name="volume"  type="VOLUME" place="volume_out"/>
        <net>
          <place name="volume" type="VOLUME" />
          <place name="config" type="CONFIG" />
          <place name="volume_out" type="VOLUME" />
          <place name="trigger" type="control"/>

          <transition name="wrap_process_volume">
            <include-function href="process_volume.xml" />
            <connect-in place="volume" port="volume" />
            <connect-in place="trigger" port="trigger"/>
            <connect-in place="config" port="config" />
            <connect-out place="volume_out"   port="volume" />
          </transition>
        </net>
      </defun>
      <connect-in place="volume" port="volume" />
      <connect-read port="trigger" place="loadTT_done"/>
      <connect-read place="config" port="config" />
      <connect-out place="volume_done" port="volume" />
    </transition>

    <place name="volume_done" type="VOLUME" />

    <transition name="dec">
      <defun>
        <in  name="volume" type="VOLUME" />
        <in name="wait" type="long" />
        <out name="wait" type="long" />
        <expression>
          ${wait} := ${wait} - 1;
        </expression>
        <condition>${wait} :gt: 0</condition>
      </defun>
      <connect-in place="volume_done" port="volume" />
      <connect-in place="wait" port="wait" />
      <connect-out place="wait" port="wait" />
    </transition>

    <transition name="break">
      <defun>
        <out name="trigger" type="control" />
        <in name="wait" type="long" />
        <expression>
          ${trigger} := []
        </expression>
        <condition>${wait} :eq: 0</condition>
      </defun>
      <connect-in place="wait" port="wait" />
      <connect-out place="trigger_finalize" port="trigger" />
    </transition>

    <place name="trigger_finalize" type="control"/>

    <transition name="finalize">
      <defun internal="false">
        <in  name="trigger" type="control" />
        <in  name="config" type="CONFIG" />
        <out name="trigger" type="control" />
        <module name="kdm" function="finalize"/>
      </defun>
      <connect-in place="trigger_finalize" port="trigger" />
      <connect-read place="config" port="config" />
      <connect-out place="finalize_done" port="trigger" />
    </transition>

    <place name="finalize_done" type="control"/>

    <transition name="cleanup">
      <defun>
        <in name="trigger" type="control"/>
        <in name="loadTT_done" type="control"/>
        <in name="config" type="CONFIG"/>
        <out name="clean" type="control"/>
        <expression>${clean} := []</expression>
      </defun>
      <connect-in port="loadTT_done" place="loadTT_done"/>
      <connect-in port="config" place="config"/>
      <connect-in port="trigger" place="finalize_done"/>
      <connect-out port="clean" place="done"/>
    </transition>
  </net>

</defun>
