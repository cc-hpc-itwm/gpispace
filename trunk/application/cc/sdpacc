#!/bin/bash
#
# wrapper around a compiler similar to icecream
#
#
# 1. prepare job description
#
#      take prepared pnet (or compile if not present)
#
# 2. place tokens
#      working directory
#      parameters
#      compiler to use (name)
#      build-environment + md5sum
#
# 3. submit
#
#      wait until finished
#      check exit code token
#      print stdout
#      print stderr

prog_name=$(basename $0)
compiler="$prog_name"
c_compiler="gcc"
cxx_compiler="g++"

if [ -n "$SDPACC_CC" ] ; then
    c_compiler="$SDPACC_CC"
fi
if [ -n "$SDPACC_CXX" ] ; then
    cxx_compiler="$SDPACC_CXX"
fi
if [ -z "$SDPA_HOME" ] ; then
    echo "SDPA must be be loaded and started! (SDPA_HOME is empty)" >&2
    exit 1
fi

# try to avoid cyclic execution of $self
mydir=$(cd $(dirname $(which $0)) && pwd)
self="$mydir/$(basename $0)"

c_compiler=$(which -a "$c_compiler" | grep -v $mydir | head -n 1)
cxx_compiler=$(which -a "$cxx_compiler" | grep -v $mydir | head -n 1)

if [ -z "$c_compiler" ] ; then
    echo "sdpacc: could not locate real c compiler" >&2
    exit 2
fi

if [ -z "$cxx_compiler" ] ; then
    echo "sdpacc: could not locate real cxx compiler" >&2
    exit 2
fi

args="$@"
pnet="$SDPA_HOME/share/sdpa/cc/compile.pnet"

pnet_tmp=$(mktemp)
jobid=

trap 'cancel' EXIT

function isatty()
{
    local f="$1" ; shift
    f=$(readlink -f "$f")
    if [ -e "$f" ] ; then
	tty -s < "$f" >/dev/null 2>&1
	return $?
    else
	return 1
    fi
}

function cancel()
{
    if [ -z "$jobid" ] ; then
	return 0
    fi
    sdpac cancel "$jobid" &>/dev/null
    sdpac wait "$jobid" &>/dev/null
    ec=$?
    sdpac delete "$jobid" &>/dev/null
    test -e "sdpa.${jobid}.out" && rm -f "sdpa.${jobid}.out"
    return $ec
}

function compile ()
{
    prepare
    execute
}

function prepare ()
{
    pnetput --if "${pnet}" --of "${pnet_tmp}" \
              -p compiler=\""$compiler"\" \
              -p params=\""$args"\" \
              -p working_directory=\""$PWD"\" \
              -p build_environment=\"\"
}

function execute ()
{
    jobid=$(sdpac submit ${pnet_tmp} 2>&1)
    ec=$?
    if [ $ec -ne 0 ] ; then
	echo "submission failed: $jobid" >&2
	return $ec
    fi
    test -e "${pnet_tmp}" && rm -f "${pnet_tmp}"
    sdpac wait "$jobid" &>/dev/null
    ec=$?
    if [ $ec -ne 0 ] ; then
	return $ec
    fi
    sdpac results "${jobid}" &>/dev/null
    sdpac delete "${jobid}" &>/dev/null

    std_out=$(pnetget < "sdpa.${jobid}.out" --type=output std_out | sed -e 's/^"//g' -e 's/"$//g')
    std_err=$(pnetget < "sdpa.${jobid}.out" --type=output std_err | sed -e 's/^"//g' -e 's/"$//g')
    ec=$(pnetget < "sdpa.${jobid}.out" --type=output exit_code | tr -d L)

    if [ -n "$std_out" ] ; then
	echo -e "$std_out"
    fi
    if [ -n "$std_err" ] ; then
        co=
        nc=
        if isatty /dev/stderr ; then
            co="\033[35;40m"
            nc="\033[0m"
        fi
	echo -e "${co}$std_err${nc}" >&2
    fi

    test -e "sdpa.${jobid}.out" && rm -f "sdpa.${jobid}.out"
    unset jobid
    return $ec
}

case "$prog_name" in
    *cc)
	compiler="$c_compiler"
	;;
    *++)
	compiler="$cxx_compiler"
	;;
    *)
	echo "E: dunno how to behave as $prog_name" >&2
	exit 1
	;;
esac

compile $@
