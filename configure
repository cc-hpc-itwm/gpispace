#!/bin/bash

src=$(cd $( dirname "$0" ) && pwd)

build_dir=$(pwd)

if [ -e ./CMakeLists.txt ] ; then
  build_dir="$(pwd)/build"
  if [ ! -d "${build_dir}" ] ; then
    echo >&2 "W: This script is intended to be executed in a build directory!"
    echo >&2 "I: using '${build_dir}' instead"
    mkdir -p "${build_dir}"
  fi
fi

cd "${build_dir}"

build_type=Release
build_tests=false
build_static=false

build_apps=true
build_gpi=true
build_gpi_fuse=false
build_gui=true
build_pnete=true
fhg_assert_mode=0

strip_log=
build_rev=
build_vsn=
build_prefix=

function get_cmake_cache_entry ()
{
    cache_entry="$1"
    variable="$2"

    result=$( grep "$cache_entry": CMakeCache.txt 2>/dev/null | cut -d= -f 2 )
    if [ $? -eq 0 -a -n "$result" ] ; then
        case "$result" in
            ON)
                result="true"
                ;;
            OFF)
                result="false"
                ;;
            *)
                ;;
        esac
        eval "$variable=$result"
        return 0
    else
        return 1
    fi
}

# initialize from CMakeCache.txt
if [ -r "CMakeCache.txt" ] ; then

    get_cmake_cache_entry CMAKE_HOME_DIRECTORY src
    get_cmake_cache_entry CMAKE_BUILD_TYPE build_type
    get_cmake_cache_entry BUILD_TESTING build_tests

    get_cmake_cache_entry ENABLE_STATIC_BINARIES build_static
    get_cmake_cache_entry ENABLE_APPLICATION build_apps
    get_cmake_cache_entry ENABLE_GPI_SPACE build_gpi
    get_cmake_cache_entry ENABLE_GPI_FUSE build_gpi_fuse
    get_cmake_cache_entry ENABLE_SDPA_GUI build_gui
    get_cmake_cache_entry ENABLE_PNET_EDITOR build_pnete

    get_cmake_cache_entry CMAKE_INSTALL_PREFIX build_prefix
    get_cmake_cache_entry FHGLOG_STRIP_LEVEL strip_log

    get_cmake_cache_entry FHG_ASSERT_MODE fhg_assert_mode
fi

build_rev=$( cd "$src" && git rev-parse HEAD 2>/dev/null )
if [ $? != 0 ]; then
    echo "W: could not get version information from git, trying svn..." >&2
    build_rev="$( cd "$src" && svn info | grep '^Revision:' | cut -d' ' -f 2 )"
    if [ -z "$build_rev" ] ; then
        get_cmake_cache_entry PROJECT_REVISION build_rev
        if [ -n "$build_rev" ] ; then
            echo "W: using old revision ($build_rev), this might not be what you want..." >&2
        fi
    fi
fi
build_vsn=$(cd "${src}" && git describe | sed -e 's/^v//')

function print_settings ()
{
cat >&2 <<EOF
#  Current settings:
#  =================
#
#     revision: $build_rev
#      version: $build_vsn
#       prefix: $build_prefix
#       source: $src
#        build: $build_dir
#         type: $build_type
#
#        tests: $build_tests
#         apps: $build_apps
#       static: $build_static
#        gpifs: $build_gpi_fuse
#          gui: $build_gui
#     real-gpi: $build_gpi
#    strip-log: $strip_log
#      asserts: $fhg_assert_mode
EOF
}

function usage ()
{
    cat >&2 <<EOF
$0 [-h] [options] [--] [cmake options]

general options:
----------------

      -h|--help : print help
        --query : query the current settings
    --type type : set the build type
  --prefix=PATH : install prefix

modify behavior:
----------------

    --strip-log=N : strip log level up to and including N
  --assert-mode=M : set the assert mode to one of:

                       off, on, assert, throw, log

control features:
-----------------

    --with-apps[=yes|no] : build applications
   --with-tests[=yes|no] : build tests
     --with-gui[=yes|no] : build the monitoring gui
  --with-editor[=yes|no] : build the PNET Editor
     --with-gpi[=yes|no] : build GPI virtual memory manager
   --with-gpifs[=yes|no] : build GPI filesystem
EOF
}

function read_bool ()
{
    local b="$1"; shift
    local t="$1"; shift # counts as true as well
    case "$(echo ${b} | tr [A-Z] [a-z])" in
        yes|true|1|on|${t})
            echo true
            ;;
        no|false|0|off)
            echo false
            ;;
        *)
            echo >&2 "invalid boolean value: $b"
            exit 66
            ;;
    esac
}

while [ $# -gt 0 ]
do
    case "${1}" in
        -h|--help)
            shift
            usage
            exit 0
            ;;
        -q|--query)
            print_settings
            shift
            exit 0
            ;;
        --prefix=*)
            build_prefix="${1#*=}"
            shift
            ;;
        --type=*)
            build_type="${1#*=}"
            shift
            ;;
        --strip-log=*)
            strip_log="${1#*=}"
            shift
            ;;
        --revision=*)
            build_rev="${1#*=}"
            shift
            ;;
        --assert-mode=*)
            fhg_assert_mode="${1#*=}"
            case "${fhg_assert_mode}" in
                [0-4])
                    ;;
                off)
                    fhg_assert_mode=0
                    ;;
                on)
                    fhg_assert_mode=1
                    ;;
                assert)
                    fhg_assert_mode=2
                    ;;
                throw)
                    fhg_assert_mode=3
                    ;;
                log)
                    fhg_assert_mode=4
                    ;;
                *)
                    echo >&2 "configure: invalid assert-mode: $fhg_assert_mode"
                    exit 1
            esac
            shift
            ;;
        --with-apps|--with-apps=*)
            build_apps=$(read_bool "${1#*=}" --with-apps)
            shift
            ;;
        --with-tests|--with-tests=*)
            build_tests=$(read_bool "${1#*=}" --with-tests)
            shift
            ;;
        --with-gui|--with-gui=*)
            build_gui=$(read_bool "${1#*=}" --with-gui)
            shift
            ;;
        --with-editor|--with-editor=*)
            build_pnete=$(read_bool "${1#*=}" --with-editor)
            shift
            ;;
        --with-gpi|--with-gpi=*)
            build_gpi=$(read_bool "${1#*=}" --with-gpi)
            shift
            ;;
        --with-gpifs|--with-gpifs=*)
            build_gpi_fuse=$(read_bool "${1#*=}" --with-gpifs)
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            break
            ;;
    esac
done

cmake_flags=()

cmake_flags+=(--no-warn-unused-cli)

if [ -n "$build_rev" ] ; then
    build_rev=$( echo $build_rev | sed -e 's/^v//' )
    cmake_flags+=("-DPROJECT_REVISION=$build_rev")
else
    echo "E: no revision specified!" >&2
    exit 2
fi
cmake_flags+=("-DPROJECT_VERSION=$build_vsn")

if [ -n "$strip_log" ] ; then
    cmake_flags+=("-DFHGLOG_STRIP_LEVEL=$strip_log")
fi

if [ -n "$build_type" ] ; then
    cmake_flags+=("-DCMAKE_BUILD_TYPE=$build_type")
fi

if [ "$build_tests" == "true" ] ; then
    cmake_flags+=("-DBUILD_TESTING=ON")
else
    cmake_flags+=("-DBUILD_TESTING=OFF")
fi

if [ "$build_static" == "true" ] ; then
    cmake_flags+=("-DENABLE_STATIC_BINARIES=ON")
else
    cmake_flags+=("-DENABLE_STATIC_BINARIES=OFF")
fi

if [ "$build_apps" == "true" ] ; then
    cmake_flags+=("-DENABLE_APPLICATION=ON")
else
    cmake_flags+=("-DENABLE_APPLICATION=OFF")
fi

if [ "$build_gpi" == "true" ] ; then
    cmake_flags+=("-DENABLE_REAL_GPI=ON" "-DENABLE_GPI_SPACE=ON")
else
    cmake_flags+=("-DENABLE_REAL_GPI=OFF")
fi

if [ "$build_gpi_fuse" == "true" ] ; then
    cmake_flags+=("-DENABLE_GPI_FUSE=ON")
else
    cmake_flags+=("-DENABLE_GPI_FUSE=OFF")
fi

if [ "$build_gui" == "true" ] ; then
    cmake_flags+=("-DENABLE_SDPA_GUI=ON")
else
    cmake_flags+=("-DENABLE_SDPA_GUI=OFF")
fi

if [ "$build_pnete" == "true" ] ; then
    cmake_flags+=("-DENABLE_PNET_EDITOR=ON")
else
    cmake_flags+=("-DENABLE_PNET_EDITOR=OFF")
fi

if [ -z "$build_prefix" ] ; then
    build_prefix=$( grep CMAKE_INSTALL_PREFIX ./CMakeCache.txt 2>/dev/null | cut -d= -f 2 | tr -d \" 2>&1 )
fi
if [ -n "$build_prefix" ] ; then
    cmake_flags+=("-DCMAKE_INSTALL_PREFIX=$build_prefix")
fi
cmake_flags+=("-DFHG_ASSERT_MODE=${fhg_assert_mode}")

cmake_flags+=("$@")

cmd=(cmake "${cmake_flags[@]}" "$src")
print_settings
echo "#"
echo "# ${cmd[@]}"
read -t 10 -n 1 -p "press any key to continue (Ctrl+C to abort)..."
echo

"${cmd[@]}"
