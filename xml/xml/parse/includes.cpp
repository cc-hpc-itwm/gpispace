// mirko.rahn@itwm.fraunhofer.de

#include <xml/parse/includes.hpp>

#include <boost/filesystem/fstream.hpp>

#include <iostream>
#include <iomanip>
#include <fstream>
#include <iterator>
#include <algorithm>
#include <sstream>

using namespace pnetc::includes;

static void dump_quoted (std::ostream & os, const std::string & string)
{
  for ( std::string::const_iterator pos (string.begin())
      ; pos != string.end()
      ; ++pos
      )
    {
      switch (*pos)
        {
        case '"': os << "\\\""; break;
        case '\\': os << "\\\\"; break;
        case '\n': os << "\\n"; break;
        default: os << *pos; break;
        }
    }
}

int
main ()
{
  std::cout << "// GPI-Space generated: DO NOT EDIT THIS FILE!"    << std::endl;
  std::cout                                                        << std::endl;
  std::cout << "#ifndef _XML_PARSE_HEADER_LIST_HPP"                << std::endl;
  std::cout << "#define _XML_PARSE_HEADER_LIST_HPP 1"              << std::endl;
  std::cout                                                        << std::endl;
  std::cout << "#include <xml/parse/headergen.hpp>"                << std::endl;
  std::cout                                                        << std::endl;

  std::cout << "// force dependencies"                             << std::endl;

  for ( names_type::const_iterator name (includes().begin())
      ; name != includes().end()
      ; ++name
      )
    {
      std::cout << "#include <" << name->string() << ">"           << std::endl;
    }

  std::cout                                                        << std::endl;

  std::cout << "namespace xml"                                     << std::endl;
  std::cout << "{"                                                 << std::endl;
  std::cout << "  namespace parse"                                 << std::endl;
  std::cout << "  {"                                               << std::endl;
  std::cout << "    namespace includes"                            << std::endl;
  std::cout << "    {"                                             << std::endl;
  std::cout                                                        << std::endl;

  std::cout << "      inline void mks (descrs_type & descrs)"      << std::endl;
  std::cout << "      {"                                           << std::endl;

  for ( names_type::const_iterator name (includes().begin())
      ; name != includes().end()
      ; ++name
      )
    {
      std::cout                                                    << std::endl;
      std::cout << "        {"                                     << std::endl;
      std::cout << "          descr d (\"" << name->string() << "\");"
                                                                   << std::endl;

      boost::filesystem::ifstream file (root() / *name);

      file >> std::noskipws;

      std::istream_iterator<char> begin(file), end;

      std::ostringstream sstr;

      copy (begin, end, std::ostream_iterator<char>(sstr));

      std::cout << "          d.content = \"";

      dump_quoted (std::cout, sstr.str());

      std::cout << "\";"                                           << std::endl;
      std::cout                                                    << std::endl;
      std::cout << "          descrs.push_back (d);"               << std::endl;
      std::cout << "        }"                                     << std::endl;
    }

  std::cout << "      } // mks"                                << std::endl;
  std::cout << "    } // namespace includes"                       << std::endl;
  std::cout << "  } // namespace parse"                            << std::endl;
  std::cout << "} // namespace xml"                                << std::endl;
  std::cout                                                        << std::endl;
  std::cout << "#endif"                                            << std::endl;
}
