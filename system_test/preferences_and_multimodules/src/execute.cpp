// This file is part of GPI-Space.
// Copyright (C) 2022 Fraunhofer ITWM
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

#include <preferences_and_multimodules/parse_parameters_from_commandline.hpp>
#include <preferences_and_multimodules/parameters.hpp>
#include <preferences_and_multimodules/workflow.hpp>

#include <drts/client.hpp>
#include <drts/drts.hpp>
#include <drts/scoped_rifd.hpp>

#include <util-generic/executable_path.hpp>

#include <boost/filesystem/path.hpp>
#include <boost/format.hpp>

#include <string>

namespace preferences_and_multimodules
{
  namespace execution
  {
    ParametersDescription options()
    {
      namespace po = boost::program_options;

      ParametersDescription driver_opts;
      driver_opts.add (gspc::options::installation());
      driver_opts.add (gspc::options::drts());
      driver_opts.add (gspc::options::logging());
      driver_opts.add (gspc::options::scoped_rifd());

      return driver_opts;
    }
  }

  WorkflowResult execute (Workflow workflow, Parameters parameters)
  {
    auto const preferences (workflow.get_preferences());
    auto const num_workers_per_target (workflow.get_num_workers_per_target());

    auto const preferences_and_multimodules_installation_path
      (fhg::util::executable_path().parent_path().parent_path());

    // Create an object containing information about the GPI-Space installation used.
    gspc::installation installation (parameters);

    // Start remote interface daemons on the provided hosts, used for starting
    // the GPI-Space components of the runtime system.
    gspc::scoped_rifds rifds
      ( gspc::rifd::strategy {parameters}
      , gspc::rifd::hostnames {parameters}
      , gspc::rifd::port {parameters}
      , installation
      );

    workflow.set_num_nodes (rifds.hosts().size());

    // Set the application search path to point to the location where
    // the shared libraries containing task implementation are installed
    gspc::set_application_search_path
      (parameters, preferences_and_multimodules_installation_path / "lib");

    // Create an workflow object from a binary representation generated by the
    // petri net compiler from the XML workflow description provided by the user.
    gspc::workflow const workflow_obj
      ( preferences_and_multimodules_installation_path
      / "pnet"
      / "preferences_and_multimodules.pnet"
      );

    // Create a worker topology to be respected on each node when starting workers.
    // Typically, for each target in the list of preferences, a number of workers
    // (specified by the user) having that capability should be spawned by the
    // bootstrapping mechanism. In the simplest form, this can be specified as
    // an array of concatenated strings of type "<target>:<number_of_workers>",
    // separated by a space.
    std::string const topology
      ( ( ::boost::format ("%1%:%2% %3%:%4% %5%:%6%")
        % preferences[0]
        % num_workers_per_target[0]
        % preferences[1]
        % num_workers_per_target[1]
        % preferences[2]
        % num_workers_per_target[2]
        ).str()
      );

    // Start the runtime system's components with the given topology and parameters
    // on the set of specified entry points corresponding to the started rif daemons.
    gspc::scoped_runtime_system drts
      ( parameters
      , installation
      , topology
      , rifds.entry_points()
      );

    // Submit an workflow to the runtime system and wait for the result.
    return gspc::client {drts}.put_and_run
      (workflow_obj, {{"num_tasks", workflow.get_num_tasks()}});
  }
}
