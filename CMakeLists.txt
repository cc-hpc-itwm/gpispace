project (sdpa_main)

set(V_MAJOR 13)
set(V_MINOR 09)
set(V_PATCH 1)
set(V_EXTRA )

set (PROJECT_VERSION      CACHE STRING "Project version")
set (PROJECT_REVISION     CACHE STRING "Source code revision")
set (PROJECT_BUILD    "0" CACHE STRING "Build number")
set (PROJECT_DESCRIPTION "GPI-Space - productive parallel programming and efficient execution" CACHE STRING "Project description")
set (PROJECT_DESCRIPTION_SUMMARY "GPI-Space - productive parallel programming and efficient execution" CACHE STRING "Project description summary")
set (PROJECT_VENDOR      "Fraunhofer Institute for Industrial Mathematics ITWM" CACHE STRING "Project vendor")
set (PROJECT_COPYRIGHT   "Copyright 2009-2014 Fraunhofer ITWM" CACHE STRING "Copyright")
set (PROJECT_CONTACT     "Developer Team <sdpa-dev@itwm.fraunhofer.de>" CACHE STRING "Contact information")

OPTION (WITH_MANPAGES "Build manpages" YES)
OPTION (ENABLE_SDPA_GUI "Build the monitor gui" YES)
OPTION (ENABLE_GPI_FUSE "Build the gpi fuse module" OFF)
OPTION (ENABLE_PNET_EDITOR "Build the pnet editor" YES)
OPTION (INSTALL_AS_BUNDLE "Install as a bundle" NO)
OPTION (ENABLE_LICENSE_CHECK "enable license check" OFF)
set (FHGLOG_STRIP_LEVEL "-1" CACHE STRING "Strip log messages with a level >= N")
set (FHG_ASSERT_MODE CACHE INTEGER "fhg assert mode: 0 ignore, 1 enable, 2 use assert, 3 throw, 4 just log, 5 log and abort")
option (FHG_ASSERT_REPLACE_LEGACY "Replace legacy assert with fhg_assert" ON)
option (ENABLE_BACKTRACE_ON_PARSE_ERROR "Show a backtrace on (pnet) parser errors" OFF)

function (get_revision_info REV_INFO)
  execute_process (
    COMMAND git rev-parse HEAD
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    OUTPUT_VARIABLE _out_git
    ERROR_VARIABLE _err_git
    RESULT_VARIABLE _res_git
    )
  if (${_res_git} EQUAL 0)
    string (STRIP "${_out_git}" _out_git)
    set (${REV_INFO} ${_out_git} PARENT_SCOPE)
  endif()
endfunction()

function (get_version_info VSN_INFO)
  execute_process (
    COMMAND git describe
    COMMAND sed -e "s/^v//"
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    OUTPUT_VARIABLE _out
    ERROR_VARIABLE _err
    RESULT_VARIABLE _res
  )
  if (${_res} EQUAL 0)
    string (STRIP "${_out}" _out)
    set (${VSN_INFO} ${_out} PARENT_SCOPE)
  else()
    set(__new_vsn "${V_MAJOR}.${V_MINOR}")
    if (NOT ${V_PATCH} STREQUAL "")
      set(__new_vsn "${__new_vsn}-${V_PATCH}")
    endif()
    if (NOT ${V_EXTRA} STREQUAL "")
      set(__new_vsn "${__new_vsn}-${V_EXTRA}")
    endif()
    set (${VSN_INFO} ${__new_vsn} PARENT_SCOPE)
  endif ()
endfunction()

get_revision_info (PROJECT_REVISION)
if (NOT PROJECT_REVISION)
  message (FATAL_ERROR "could not discover revision info, please define -DPROJECT_REVISION by hand!")
endif (NOT PROJECT_REVISION)
set (PROJECT_REVISION "${PROJECT_REVISION}" CACHE STRING "Source code revision" FORCE)

get_version_info (PROJECT_VERSION)
if (NOT PROJECT_VERSION)
  message (FATAL_ERROR "could not discover version info, please define -DPROJECT_VERSION by hand!")
endif()
set (PROJECT_VERSION "${PROJECT_VERSION}" CACHE STRING "Project version" FORCE)

configure_file (${CMAKE_CURRENT_SOURCE_DIR}/cpack-rel.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/cpack-rel.cmake @ONLY)

cmake_minimum_required (VERSION "2.8.4" FATAL_ERROR)
# Where are the additional libraries installed? Note: provide includes
# path here, subsequent checks will resolve everything else
set (CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${CMAKE_SOURCE_DIR}/modules" "$ENV{CMAKE_MODULE_PATH}")

include (fhg_test_macros)

include (CompilerFlags)

if (NOT FHG_ASSERT_MODE)
  if (${CMAKE_BUILD_TYPE} MATCHES "Release")
    set (FHG_ASSERT_MODE "0")
  else()
    set (FHG_ASSERT_MODE "1")
  endif()
endif()

add_definitions ("-DFHG_ASSERT_MODE=${FHG_ASSERT_MODE}")
if (FHG_ASSERT_REPLACE_LEGACY)
  add_definitions ("-DFHG_ASSERT_REPLACE_LEGACY")
endif()

add_definitions ("-DBOOST_FILESYSTEM_VERSION=3")
add_definitions ("-DBOOST_FILESYSTEM_NO_DEPRECATED")

add_definitions ("-DFHGLOG_STRIP_LEVEL=${FHGLOG_STRIP_LEVEL}")

find_package (Threads REQUIRED QUIET)
if (CMAKE_USE_PTHREADS_INIT)
  link_libraries (${CMAKE_THREAD_LIBS_INIT} rt)
endif()

# Boost
if (NOT BOOST_ROOT)
  set (BOOST_ROOT $ENV{BOOST_ROOT})
endif()

if (BOOST_ROOT)
  set (Boost_NO_SYSTEM_PATHS ON)
endif()

find_package (Boost 1.47 REQUIRED QUIET COMPONENTS
  thread system filesystem serialization program_options
  regex signals date_time test_exec_monitor unit_test_framework random)

if (Boost_MAJOR_VERSION EQUAL 1)
  if (Boost_MINOR_VERSION EQUAL 48)
    message (FATAL_ERROR "Incompatible Boost 1.48 detected")
  endif()
endif()

if (Boost_MAJOR_VERSION EQUAL 1)
  if (Boost_MINOR_VERSION GREATER 51)
    # Boost.Thread now throws when preconditions are not met.
    # This is the case when calling join() in some tests, while
    # joinable() == false.  This define is only a hacky workaround and
    # the precondition shall be checked everywhere, where needed.
    add_definitions (-DBOOST_THREAD_THROW_IF_PRECONDITION_NOT_SATISFIED)
  endif()
endif()

get_filename_component (BOOST_ROOT "${Boost_INCLUDE_DIR}" PATH CACHE)

include_directories (SYSTEM ${Boost_INCLUDE_DIRS})
# TODO : Remove again?
link_directories (${Boost_LIBRARY_DIRS})

# sdpa needs boost::mpl::vector with more than $default elements for state machine
add_definitions ("-DBOOST_MPL_CFG_NO_PREPROCESSED_HEADERS")
add_definitions ("-DBOOST_MPL_LIMIT_VECTOR_SIZE=40")

set (FHG_QT_MOC_BOOST_HACK_OPTIONS "-DBOOST_TT_HAS_OPERATOR_HPP_INCLUDED;-DBOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION")

find_package(HWLOC REQUIRED QUIET)

# RPATH configuration
set(CMAKE_SKIP_BUILD_RPATH FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE)
set(CMAKE_INSTALL_RPATH "\$ORIGIN/:\$ORIGIN/../lib/:\$ORIGIN/../../../lib/")

# replacement for find_package (<one of our subprojects>)
set (UTIL_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/util ${CMAKE_BINARY_DIR}/util)
set (UTIL_LIBRARIES fhg-revision fhg-util)

set (FhgLog_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/fhglog ${CMAKE_BINARY_DIR}/fhglog)
set (FhgLog_LIBRARY fhglog)
set (FhgLog_LIBRARY_SHARED fhglog-shared)

set (MMGR_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/src)
set (MMGR_LIBRARY mmgr)
set (MMGR_LIBRARY_SHARED mmgr.shared)

set (FhgKernel_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/fhgkernel ${CMAKE_BINARY_DIR}/fhgkernel)

set (SDPA_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/sdpa ${CMAKE_BINARY_DIR}/sdpa)

set (FhgCom_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/fhgcom ${CMAKE_BINARY_DIR}/fhgcom)
set (FhgCom_LIBRARY fhgcom)

set (FVM_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/fvm-pc ${CMAKE_BINARY_DIR}/fvm-pc)

set (GPI_SPACE_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/gpi-space ${CMAKE_BINARY_DIR}/gpi-space)
set (GPI_SPACE_LIBRARY gpi-space-pc-client-static gpi-space-pc-segment)

set (GSPC_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/gspc ${CMAKE_BINARY_DIR}/gspc)
set (GSPC_LIBRARY_SHARED libgspc.shared)

set (PNETC_LIB_DIR "share/sdpa/xml/lib")
set (PNETC_EXAMPLES_DIR "share/sdpa/xml/examples")
set (SDPA_APPS_DIR "libexec/sdpa/apps")

include (CTest)
add_subdirectory (fhglog)
  add_subdirectory (fvm-pc)
add_subdirectory (util)
add_subdirectory (fhgkernel)
add_subdirectory (gspc)
add_subdirectory (fhgcom)
  add_subdirectory (gpi-space)
if (ENABLE_GPI_FUSE)
  add_subdirectory (gpi-fuse)
endif (ENABLE_GPI_FUSE)
add_subdirectory (application)
add_subdirectory (src)
add_subdirectory (sdpa)
add_subdirectory(bundle)

add_subdirectory (test)

INCLUDE (InstallRequiredSystemLibraries)
#set (CPACK_GENERATOR "RPM;STGZ;TGZ;TBZ2")
set (CPACK_GENERATOR "TBZ2")
set (CPACK_SOURCE_GENERATOR "TBZ2")
set (CPACK_PACKAGE_VENDOR "${PROJECT_VENDOR}")
set (CPACK_PACKAGE_VERSION "${PROJECT_VERSION}")
set (CPACK_PACKAGE_VERSION_MAJOR "${V_MAJOR}")
set (CPACK_PACKAGE_VERSION_MINOR "${V_MINOR}")
set (CPACK_PACKAGE_VERSION_PATCH "${V_PATCH}")
INCLUDE (CPack)

add_subdirectory (playground/ap/licensing)
add_subdirectory (playground/bl)
add_subdirectory (doc)
add_subdirectory (share)
