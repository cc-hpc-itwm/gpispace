# -*- mode: cmake; -*-

if (NOT PROCESS_FIND_QUIETLY)
  message(STATUS "FindPROCESS check")
endif (NOT PROCESS_FIND_QUIETLY)

if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})
  find_path (PROCESS_INCLUDE_DIR
	NAMES "process/process.hpp"
	HINTS ${PROCESS_HOME} ENV PROCESS_HOME
	PATH_SUFFIXES include
  )

  find_library (PROCESS_LIBRARY
	NAMES libprocess.a
	HINTS ${PROCESS_HOME} ENV PROCESS_HOME
	PATH_SUFFIXES lib
  )
  find_library (PROCESS_LIBRARY_SHARED
	NAMES libprocess.so
	HINTS ${PROCESS_HOME} ENV PROCESS_HOME
	PATH_SUFFIXES lib
  )

  if (PROCESS_INCLUDE_DIR AND PROCESS_LIBRARY)
	set (PROCESS_FOUND TRUE)
	if (NOT PROCESS_FIND_QUIETLY)
	  message (STATUS "Found PROCESS headers in ${PROCESS_INCLUDE_DIR} and libraries ${PROCESS_LIBRARY} ${PROCESS_LIBRARY_SHARED}")
	endif (NOT PROCESS_FIND_QUIETLY)
  else (PROCESS_INCLUDE_DIR AND PROCESS_LIBRARY)
	if (PROCESS_FIND_REQUIRED)
	  message (FATAL_ERROR "PROCESS could not be found!")
	endif (PROCESS_FIND_REQUIRED)
  endif (PROCESS_INCLUDE_DIR AND PROCESS_LIBRARY)

else(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})
  set(PROCESS_FOUND true)
  set(PROCESS_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/application/example")
  set(PROCESS_LIBRARY_DIR "${CMAKE_BINARY_DIR}/application/example/process")
  set(PROCESS_LIBRARY process)
  set(PROCESS_LIBRARY_SHARED process.shared)
endif(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})
