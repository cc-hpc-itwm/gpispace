%{
  // Finite state machine of the SDPA protocol
  //
#if __GNUC__ >4 || ( __GNUC__==4 && __GNUC_MINOR__ > 1)
#  pragma GCC diagnostic ignored "-Wall"
#  pragma GCC diagnostic ignored "-Wunused"
#  pragma GCC diagnostic ignored "-Weffc++"
#  pragma GCC diagnostic ignored "-Wunused-parameter"
#endif
%}

%include <string.h>
%include <sdpa/events/CancelJobAckEvent.hpp>
%include <sdpa/events/CancelJobEvent.hpp>
//%include <sdpa/events/ConfigNokEvent.hpp>
//%include <sdpa/events/ConfigOkEvent.hpp>
//%include <sdpa/events/ConfigReplyEvent.hpp>
//%include <sdpa/events/ConfigRequestEvent.hpp>
%include <sdpa/events/DeleteJobAckEvent.hpp>
%include <sdpa/events/DeleteJobEvent.hpp>
%include <sdpa/events/ErrorEvent.hpp>
//%include <sdpa/events/InterruptEvent.hpp>
%include <sdpa/events/JobEvent.hpp>
%include <sdpa/events/JobFailedAckEvent.hpp>
%include <sdpa/events/JobFailedEvent.hpp>
%include <sdpa/events/JobFinishedAckEvent.hpp>
%include <sdpa/events/JobFinishedEvent.hpp>
%include <sdpa/events/JobResultsReplyEvent.hpp>
%include <sdpa/events/JobStatusReplyEvent.hpp>
//%include <sdpa/events/LifeSignEvent.hpp>
%include <sdpa/events/MgmtEvent.hpp>
%include <sdpa/events/QueryJobStatusEvent.hpp>
//%include <sdpa/events/RequestJobEvent.hpp>
%include <sdpa/events/RetrieveJobResultsEvent.hpp>
//%include <sdpa/events/RunJobEvent.hpp>
//%include <sdpa/events/SDPAEvent.hpp>
//%include <sdpa/events/StartUpEvent.hpp>
//%include <sdpa/events/SubmitJobAckEvent.hpp>
//%include <sdpa/events/SubmitJobEvent.hpp>
//%include <sdpa/events/WorkerRegistrationAckEvent.hpp>
//%include <sdpa/events/WorkerRegistrationEvent.hpp>

%package sdpa::fsm::smc
%class JobFSM
%header JobFSM.hpp

%start SDPA::Pending
%map SDPA

%%
Pending
{
    Dispatch()
        Running
        {
        	action_run_job();
        }

    CancelJob(pEvent: const sdpa::events::CancelJobEvent*)
        Cancelled
        {
           action_cancel_job_from_pending(*pEvent);
        }

    QueryJobStatus(pEvent: const sdpa::events::QueryJobStatusEvent*)
        nil
        {
            //action_query_job_status(*pEvent);
        }
}

Running
{
    JobFinished(pEvent: const sdpa::events::JobFinishedEvent*)
      	Finished
        {
        	action_job_finished(*pEvent);
        }

  	JobFailed(pEvent: const sdpa::events::JobFailedEvent*)
    	Failed
        {
            action_job_failed(*pEvent);
        }

    CancelJob(pEvent: const sdpa::events::CancelJobEvent*)
        Cancelling
        {
			action_cancel_job(*pEvent);
        }

	CancelJobAck(pEvent: const sdpa::events::CancelJobAckEvent*)
    	Cancelled
    	{
    		//action_cancel_job_ack(*pEvent);
    	}

    QueryJobStatus(pEvent: const sdpa::events::QueryJobStatusEvent*)
        nil
        {
            //action_query_job_status(*pEvent);
        }
        
     Reschedule()
     	Pending
     	{
     	}
}

Cancelling
{
    CancelJobAck(pEvent: const sdpa::events::CancelJobAckEvent*)
    	Cancelled
    	{
    		action_cancel_job_ack(*pEvent);
    	}

    JobFinished(pEvent: const sdpa::events::JobFinishedEvent*)
      	Finished
        {
        	action_job_finished(*pEvent);
        }

  	JobFailed(pEvent: const sdpa::events::JobFailedEvent*)
    	Failed
        {
            action_job_failed(*pEvent);
        }


	QueryJobStatus(pEvent: const sdpa::events::QueryJobStatusEvent*)
        nil
        {
        	//action_query_job_status(*pEvent);
        }
}

Finished
{
    QueryJobStatus(pEvent: const sdpa::events::QueryJobStatusEvent*)
        nil
        {
        	//action_query_job_status(*pEvent);
        }


    DeleteJob(pEvent: const sdpa::events::DeleteJobEvent*)
        nil
        {
        	action_delete_job(*pEvent);
        }

    JobFinished(pEvent: const sdpa::events::JobFinishedEvent*)
      	nil
        {
        }


	RetrieveJobResults(pEvent: const sdpa::events::RetrieveJobResultsEvent*)
        nil
        {
        	action_retrieve_job_results(*pEvent);
        }
}

Failed
{
    QueryJobStatus(pEvent: const sdpa::events::QueryJobStatusEvent*)
        nil
        {
        	//action_query_job_status(*pEvent);
        }

	DeleteJob(pEvent: const sdpa::events::DeleteJobEvent*)
        nil
        {
        	action_delete_job(*pEvent);
        }

  	JobFailed(pEvent: const sdpa::events::JobFailedEvent*)
	nil
        {
        }

    RetrieveJobResults(pEvent: const sdpa::events::RetrieveJobResultsEvent*)
        nil
        {
        	action_retrieve_job_results(*pEvent);
        }
}

Cancelled
{
	Default()
    	nil
    	{
    		//action_cancel_job_ack(*pEvent);
    	}

	DeleteJob(pEvent: const sdpa::events::DeleteJobEvent*)
        nil
        {
        	action_delete_job(*pEvent);
        }

    CancelJob(pEvent: const sdpa::events::CancelJobEvent*)
        nil
        {
        }

    QueryJobStatus(pEvent: const sdpa::events::QueryJobStatusEvent*)
        nil
        {
        	//action_query_job_status(*pEvent);
        }

    RetrieveJobResults(pEvent: const sdpa::events::RetrieveJobResultsEvent*)
		nil
		{
			action_retrieve_job_results(*pEvent);
		}
}

%%
