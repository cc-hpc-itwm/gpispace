# bernd.loerwald@itwm.fraunhofer.de

source "@CMAKE_BINARY_DIR@/test/env.sh"

DIR_TEST="@CMAKE_CURRENT_SOURCE_DIR@"

DUMMY_NET="$(mktemp --tmpdir="${DIR_TEST}" empty_dummy_network.XXXXX.pnet)" || die $EX_ERR_ENV

KVS_PID_FILE="$(mktemp --tmpdir="${DIR_TEST}" kvs.XXXXX.pid)" || die $EX_ERR_ENV
ORCHESTRATOR_1_PID_FILE="$(mktemp --tmpdir="${DIR_TEST}" orch1.XXXXX.pid)" || die $EX_ERR_ENV
AGENT_PID_FILE="$(mktemp --tmpdir="${DIR_TEST}" agent.XXXXX.pid)" || die $EX_ERR_ENV
ORCHESTRATOR_2_PID_FILE="$(mktemp --tmpdir="${DIR_TEST}" orch2.XXXXX.pid)" || die $EX_ERR_ENV

# TODO: needs some policy or fixes to work without
TIMEOUT_UNTIL_A_REGISTRATION_SHOULD_BE_LOST=2
TIMEOUT_UNTIL_A_REREGISTRATION_SHOULD_BE_DONE=5
TIMEOUT_UNTIL_A_STARTED_ORCHESTRATOR_SHOULD_LISTEN=1

cleanup()
{
  [[ -s "$ORCHESTRATOR_2_PID_FILE" ]] && kill $(cat "$ORCHESTRATOR_2_PID_FILE")
  [[ -s "$AGENT_PID_FILE" ]] && kill $(cat "$AGENT_PID_FILE")
  [[ -s "$ORCHESTRATOR_1_PID_FILE" ]] && kill $(cat "$ORCHESTRATOR_1_PID_FILE")
  [[ -s "$KVS_PID_FILE" ]] && kill $(cat "$KVS_PID_FILE")
  rm -f "${DUMMY_NET}"
  rm -f "${KVS_PID_FILE}" "${ORCHESTRATOR_1_PID_FILE}" "${AGENT_PID_FILE}" "${ORCHESTRATOR_2_PID_FILE}"
}

trap 'cleanup' EXIT

echo "<defun/>" | pnetc > "${DUMMY_NET}"                        || die $EX_ERR_RUN

KVS_PORT=4102 # todo: random port until free port is found?
KVS_URL="$(hostname):${KVS_PORT}"

fhgkvsd --port ${KVS_PORT} \
        --pidfile "${KVS_PID_FILE}" --daemonize                 || die $EX_ERR_BOOT

orchestrator --kvs_url "${KVS_URL}" --name "orchestrator" \
             --pidfile "${ORCHESTRATOR_1_PID_FILE}" --daemonize || die $EX_ERR_BOOT

agent --kvs_url "${KVS_URL}" --master "orchestrator" --name "agent" \
      --pidfile "${AGENT_PID_FILE}" --daemonize                 || die $EX_ERR_BOOT

kill $(cat "$ORCHESTRATOR_1_PID_FILE")                          || die $EX_ERR_RUN
rm "${ORCHESTRATOR_1_PID_FILE}"

sleep ${TIMEOUT_UNTIL_A_REGISTRATION_SHOULD_BE_LOST}

orchestrator --kvs_url "${KVS_URL}" --name "orchestrator" \
             --pidfile "${ORCHESTRATOR_2_PID_FILE}" --daemonize || die $EX_ERR_RUN

sleep ${TIMEOUT_UNTIL_A_STARTED_ORCHESTRATOR_SHOULD_LISTEN}

JOB_ID=$(sdpac --kvs "${KVS_URL}" submit "${DUMMY_NET}")        || die $EX_ERR_RUN
timeout ${TIMEOUT_UNTIL_A_REREGISTRATION_SHOULD_BE_DONE} \
  sdpac --kvs "${KVS_URL}" wait "${JOB_ID}"                     || die $EX_ERR_RUN
JOB_STATUS=$(sdpac --kvs "${KVS_URL}" status "${JOB_ID}")       || die $EX_ERR_RUN

[[ "x${JOB_STATUS}" == "xSDPA::Finished" ]]                     || die $EX_ERR_RUN
