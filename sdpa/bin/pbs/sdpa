#!/bin/bash
#
# usage: sdpa {boot|stop|submit file}
#

orchestrator_host=
orchestrator_port=

function log ()
{
    echo "$@" >&2
}

if [ -z "$HOME" ]
then
    export HOME=$(echo ~)
fi

export SDPA_HOME=$(dirname $(dirname $(which "$0")))

state_dir=

##############################################
#                                            #
#  F U N C T I O N    D E F I N I T I O N S  #
#                                            #
##############################################

function rexec ()
{
    local node="$1"; shift
    local err
    local rc
    local ssh_opts="-q -x -T -n -C -4 -o CheckHostIP=no -o StrictHostKeyChecking=no"
    local cmd="ssh $ssh_opts $node $@"
    err=$($cmd 2>&1)
    rc=$?
    if [ $rc -eq 0 ] ; then
        return 0
    elif [ $rc -eq 255 ] ; then
        echo "ssh could not connect to $node: $err: $rc" >&2
        return $rc
    else
        echo "$err"
        return $rc
    fi
}

function help ()
{
    cat >&2 <<EOF
usage: `basename $0` command [parameters...]

   available commands:
        selftest - perform a self-test
            boot - boot the runtime system
            stop - stop components
                     optional arguments: component [host...]
                     terminates the component on the given hosts or all
                     components: drts agent orchestrator vmem
             gui - start the GUI

   submit <file> - submit a job

EOF
                      return 0
}

function terminate_processes_on_host()
{
    local type="${1}"; shift
    local host="${1}"; shift
    local pids="${@}"; shift

    if [ -n "${pids}" ]
    then
        log "terminating ${type} on ${host}: ${pids}"
        rexec "${host}" kill -TERM "${pids}"
    fi
}

function terminate_all_processes_of_a_kind()
{
    local kind="${1}"; shift
    local hosts=(${@})
    if [ ${#hosts[@]} -eq 0 ]
    then
        hosts=($(find "${state_dir}/processes" -maxdepth 1 -mindepth 1 | xargs -r -n 1 basename))
    fi
    processes_dir="${state_dir}/processes"
    local background_jobs=()
    for host in ${hosts[@]}
    do
        local pids=($(find "${state_dir}/processes/${host}" -name "${kind}*.pid" | xargs -r sed -e '$s/$/\n/'))
        terminate_processes_on_host "${kind}" "${host}" ${pids[@]} &
        # this shouldn't be neccesary when pidfile_writer deletes pid files
        find "${state_dir}/processes/${host}" -name "${kind}*.pid" -delete
        background_jobs+=($!)
        if [ ${#background_jobs[@]} -ge 16 ]
        then
            wait ${background_jobs[@]}
            background_jobs=()
        fi
    done
    if [ ${#background_jobs[@]} -gt 0 ]
    then
        wait ${background_jobs[@]}
        background_jobs=()
    fi
    find "${state_dir}/processes" -mindepth 1 -type d -empty -delete
}

function stop_agent ()
{
    terminate_all_processes_of_a_kind "agent" "$@"
}

function stop_orchestrator ()
{
    rm -f "${state_dir}/orchestrator.host"
    rm -f "${state_dir}/orchestrator.port"
    rm -f "${state_dir}/orchestrator.rpc.host"
    rm -f "${state_dir}/orchestrator.rpc.port"

    terminate_all_processes_of_a_kind "orchestrator" "$@"
}

function stop_drts ()
{
    terminate_all_processes_of_a_kind "drts-kernel" "$@"
}

function start_gui ()
{
    local gui_port="${1}" ; shift
    if [ -z "${gui_port}" ]
    then
        log "usage: gui: gui-port log-port!"
        return 1
    fi
    local log_port="${1}" ; shift
    if [ -z "$log_port" ] ; then
        log "usage: gui: gui-port log-port!"
        return 1
    fi

    "$SDPA_HOME/bin/sdpa-gui" $gui_port $log_port &
}

function stop_vmem ()
{
    terminate_all_processes_of_a_kind "vmem" "$@"
}

function stop ()
{
    local parts=()
    if [ -n "${1}" ]
    then
        parts=("$1"); shift
    else
        parts=(drts agent orchestrator vmem)
    fi

    local p
    local rc=0
    for p in ${parts[@]} ; do
        if ! stop_$p $@ ; then
            rc=$(( rc + 1 ))
        fi
    done
    return $rc
}

function submit ()
{
    local net="$1" ; shift
    if [ ! -r "$net" ] ; then
        log "E: submit: cannot read file: $net"
        return 42
    fi
    if [ x"$net" = x"-" ] ; then
        net="/dev/stdin"
    fi
    local output="$1"; shift
    if [ -z "$output" ] ; then
        output=/dev/null
    fi

    log "I: submitting file: $net"
    jobid=$( sdpac --orchestrator-host ${orchestrator_host} --orchestrator-port ${orchestrator_port} submit "$net" 2>&1 )
    if [ $? -ne 0 ] ; then
        log "E: submission failed: $jobid"
        return 4
    else
        log "  + job ($jobid)"
        echo "$jobid" > "$state_dir/current_job"
        sdpac --orchestrator-host ${orchestrator_host} --orchestrator-port ${orchestrator_port} wait "$jobid"
        s=$(sdpac --orchestrator-host ${orchestrator_host} --orchestrator-port ${orchestrator_port} status "${jobid}")
        log "    $jobid -> $s"
        s=$(echo "$s" | tr 'A-Z' 'a-z')
        case "$s" in
            *finish*)
                log "I: job finished"
                ;;
            *fail*)
                log "E: job failed"
                ;;
            *cancel*)
                log "E: job canceled"
                ;;
            *)
                log "W: unknown state: $s"
                ;;
        esac
        sdpac --orchestrator-host ${orchestrator_host} --orchestrator-port ${orchestrator_port} -o "$output" --force results "$jobid"
        sdpac --orchestrator-host ${orchestrator_host} --orchestrator-port ${orchestrator_port} delete "${jobid}"
        if [ $? -eq 0 ] ; then
            echo "  - job ($jobid)"
        fi
    fi
}

##########################################################
#                                                        #
#          S C R I P T     B E H A V I O R               #
#                                                        #
##########################################################

if [ "$1" = "help" ] ; then
    shift
    help $@
    exit $?
fi

if [ "$1" = "version" ] ; then
    shift
    sdpac --version
    exit $?
fi

if [ "$1" = "gui" ] ; then
    shift
    start_gui $@
    exit $?
fi

if [ "$1" = "-s" ] ; then
    shift
    state_dir="$1"; shift
fi

if [ -z "$state_dir" ] ; then
  log "E: empty state dir: specify -s"
  exit 1
fi

if [ -f "${state_dir}/orchestrator.host" ]
then
  orchestrator_host=$(cat "${state_dir}/orchestrator.host")
fi
if [ -f "${state_dir}/orchestrator.port" ]
then
  orchestrator_port=$(cat "${state_dir}/orchestrator.port")
fi

case "$1" in
    stop)
        shift
        stop $@
        ;;
    submit)
        shift
        submit $@
        ;;
    boot)
        shift
        "${SDPA_HOME}/libexec/sdpa/scripts/start-sdpa" -S "$state_dir" -H "${SDPA_HOME}" "$@"
        ;;
    selftest)
        shift
        "${SDPA_HOME}/libexec/sdpa/scripts/sdpa-selftest" -s "${state_dir}" -H "${SDPA_HOME}" "${@}"
        ;;
    '')
        help
        ;;
    *)
        echo "E: unknown command: $1, try '$0 help'" >&2
        exit 1
        ;;
esac
