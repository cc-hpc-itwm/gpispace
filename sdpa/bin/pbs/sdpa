#!/bin/bash
#
# usage: sdpa {stop|status|submit file}
#

kvs_host=
kvs_port=

function log ()
{
    echo "$@" >&2
}

function debug ()
{
    if [ x"$debug_enabled" = x"true" ] ; then
        log $@
    fi
}

function prepend_to_path ()
{
    local var="$1"; shift
    local val=$(eval echo \$${var})
    for v ; do
        if [ -z "$v" ] ; then
            continue
        fi
        val=$(echo "$val" | sed "s,:$v:,:,g")
        val=$(echo "$val" | sed -e "s,^$v:,,g")
        val=$(echo "$val" | sed -e "s,:$v\$,,g")
        if [ -z "$val" ] ; then
            val="$v"
        else
            val="$v:$val"
        fi
    done
    eval "export $var=$val"
}

if [ -z "$HOME" ]
then
    export HOME=$(echo ~)
fi

export SDPA_HOME=$(dirname $(dirname $(which "$0")))
SDPA_SCRIPT_DIR="${SDPA_HOME}/libexec/sdpa/scripts"
prepend_to_path PATH "$SDPA_HOME/bin"

state_dir=${SDPA_STATE_DIR:="$HOME/.sdpa/state"}
debug_enabled=false

##############################################
#                                            #
#  F U N C T I O N    D E F I N I T I O N S  #
#                                            #
##############################################

function require()
{
    local tool="$1"; shift
    if [ -z "$tool" ] ; then
        return 2
    fi

    tool_bin=$(which "$tool" 2>/dev/null)
    if [ -z "$tool_bin" ] ; then
        tool_bin="$SDPA_HOME/bin/$tool"
    fi

    if [ ! -x "$tool_bin" ] ; then
        echo "Could not locate required tool $tool" >&2
        return 1
    fi
    eval "$tool=$tool_bin"
    return 0
}

if ! require fhglogc ; then
    exit 1
fi

function rexec ()
{
    local node="$1"; shift
    local err
    local rc
    local ssh_opts="-q -x -T -n -C -4 -o CheckHostIP=no -o StrictHostKeyChecking=no"
    local cmd="ssh $ssh_opts $node $@"
    debug $cmd
    err=$($cmd 2>&1)
    rc=$?
    if [ $rc -eq 0 ] ; then
        return 0
    elif [ $rc -eq 255 ] ; then
        echo "ssh could not connect to $node: $err: $rc" >&2
        return $rc
    else
        echo "$err"
        return $rc
    fi
}

function help ()
{
    cat >&2 <<EOF
usage: `basename $0` command [parameters...]

   available commands:
     selftest       - perform a self-test

   stop [component] - stop all components or "component"
 status [component] - get the current status of component
                gui - start the GUI
             bundle - bundle an application and its libraries

      submit <file> - submit a job
 cancel [job-id...] - cancel the given job or the current job
     unload-modules - unload modules in the process containers

EOF
                      return 0
}

function is_proc_alive ()
{
    local name="$1" ; shift
    local pid="$1" ; shift

    if [ -z "$name" ] ; then
        echo "E: usage: is_proc_alive <binary> <pid>" >&2
        exit 42
    fi

    if [ -z "$pid" ] ; then
        return 1
    fi

    if ps --pid "${pid}" -o comm= | grep -q "$name" ; then
        if kill -0 "$pid" >/dev/null 2>&1 ; then
            return 0
        else
            echo "E: $name: there seems to be an alien around!" >&2
            echo "E:       cannot send signal to $pid" >&2
            return 2 # not allowed to send signals!
        fi
    else
        return 1 # not there
    fi
}

function stop_proc ()
{
    local name="$1" ; shift
    local binary="$1" ; shift

    local pid_file="${state_dir}/${name}.pid"
    if [ -s ${pid_file} ]
    then
      local pid=$(cat "${pid_file}")
      if [ -n "${pid}" ] ; then
        echo -n "    sending SIGTERM to $name ($pid)" >&2
        for (( i=0; i<3; ++i )); do
            if is_proc_alive "$binary" "$pid" ; then
                echo -n "." >&2
                kill -TERM "$pid" >/dev/null 2>&1
                sleep 1
            else
                echo "ok" >&2
                break
            fi
        done
      fi

      if is_proc_alive "$binary" "$pid" ; then
        kill -KILL "$pid" >/dev/null 2>&1
        echo "killed" >&2
      fi

      rm "${pid_file}"
    else
      echo >2 " not started"
    fi
}

function stop_agent_on_node ()
{
    local node="${1}" ; shift
    local rc=0
    local err=""

    err=$(rexec "$node" "$SDPA_SCRIPT_DIR/stop-agent" 2>&1)
    rc=$?

    if [ $rc -ne 0 -a $rc -ne 2 ] ; then
        echo >&2 "stop-agent on node '$node' failed: $rc: $err"
    fi

    return $rc
}

function stop_agent ()
{
    echo "agent (all nodes)" >&2
    node_loop stop_agent_on_node $@
    ec=$?
    if [ $ec -ne 0 ] ; then
        return $ec
    fi
}

function status_agent ()
{
    local name="$1" ; shift

    local node=$(get_master_node)
    local cmd="rexec $node $SDPA_SCRIPT_DIR/status-agent -n $name-$node"
    debug $cmd
    $cmd </dev/null >/dev/null 2>&1
}

function stop_kvs ()
{
    echo "fhgkvsd"

    rm -f "${state_dir}/kvs.host"
    rm -f "${state_dir}/kvs.port"

    if ! stop_proc "fhgkvsd" "fhgkvsd" ; then
        echo "E: could not stop kvs!" >&2
        return 1
    fi
}

function stop_orch ()
{
    echo "orchestrator"

    rm -f "${state_dir}/orchestrator.host"
    rm -f "${state_dir}/orchestrator.port"

    if ! stop_proc "orchestrator" "orchestrator" ; then
        echo "E: could not stop orchestrator" >&2
        return 1
    fi
}

function stop_agg ()
{
    if ! stop_agent ; then
        echo "E: could not stop agent" >&2
        return 1
    fi
}

function node_loop ()
{
    if [ ! -r "${state_dir}/nodefile" ] ; then
        echo "Cannot read nodefile: ${state_dir}/nodefile" >&2
        return 1
    fi

    local body="$1" ; shift

    nodes=$(uniq "${state_dir}/nodefile")

    local rc=0
    local bunch_size=16
    local count=0
    local procs=
    local node=
    local p
    echo -n "   " >&2
    for node in $nodes; do
        count=$(( count + 1 ))

        debug " ++++ executing $body $@ on $node" >&2

        echo -n " $node" >&2

        $body $node $@ &

        procs="$procs $!"
        if [ $count -ge $bunch_size ] ; then
            for p in $procs ; do
                wait $p
                rc=$(( rc + $? ))
            done
            procs=
            count=0
            echo
            echo -n "   " >&2
        fi
    done
    for p in $procs ; do
        wait $p
        rc=$(( rc + $? ))
    done
    echo >&2
    return $rc
}

function stop_drts ()
{
    local node=
    local ident=

    argv="$@"
    OPTIND=1
    while getopts ":hN:i:" opt $argv; do
        case $opt in
            h)
                echo "usage: drts: [-h] [-N node [-i identity]" >&2
                return 0
                ;;
            N)
                node=$OPTARG
                shift 2
                ;;
            i)
                ident=$OPTARG
                shift 2
                ;;
            \?)
                ;;
        esac
    done

    if [ -z "$node" ] ; then
        echo "process container (all nodes)" >&2
        node_loop stop_drts_on_node $@
        ec=$?
        if [ $ec -ne 0 ] ; then
            return $ec
        fi
    else
        if [ -z "$ident" ] ; then
            echo "process container $node" >&2
            stop_drts_on_node "$node" $@
            ec=$?
            return $ec
        else
            echo "process container $node-$ident" >&2
            stop_drts_on_node "$node" -i "$ident" $@
            ec=$?
            return $ec
        fi
    fi
}

function status_drts ()
{
    local node=
    local ident=

    argv="$@"
    OPTIND=1
    while getopts ":hN:i:" opt $argv; do
        case $opt in
            h)
                echo "usage: drts: [-h] [-N node [-i identity]" >&2
                return 0
                ;;
            N)
                node=$OPTARG
                shift 2
                ;;
            i)
                ident=$OPTARG
                shift 2
                ;;
            \?)
                ;;
        esac
    done

    if [ -z "$node" ] ; then
        echo "process container (all nodes)" >&2
        node_loop status_drts_on_node $@
        ec=$?
        if [ $ec -ne 0 ] ; then
            echo "$err"
            return $ec
        fi
    else
        if [ -z "$ident" ] ; then
            echo -n "process container $node" >&2
            status_drts_on_node "$node" $@
            ec=$?
            if [ $ec -eq 0 ] ; then
                echo " ok" >&2
            else
                echo " dead" >&2
            fi
            return $ec
        else
            echo "process container $node-$ident" >&2
            status_drts_on_node "$node" -i "$ident" $@
            ec=$?
            if [ $ec -eq 0 ] ; then
                echo " ok" >&2
            else
                echo " dead" >&2
            fi
            return $ec
        fi
    fi
}

function stop_drts_on_node ()
{
    local node=$1 ; shift
    local err
    local ec
    err=$(rexec "$node" "$SDPA_SCRIPT_DIR/stop-drts" $@)
    ec=$?
    if [ $ec -ne 0 ] ; then
        log "W: stop-drts on node $node failed: $ec: $err"
    fi
    return $ec
}

function status_drts_on_node ()
{
    local node=$1 ; shift
    local err
    local ec
    err=$(rexec "$node" "$SDPA_SCRIPT_DIR/status-drts" -s "$@" 2>&1)
    ec=$?
    if [ $ec -ne 0 ] ; then
        if [ -n "$err" ] ; then
            log "W: status-drts on node $node failed: $ec: $err"
        fi
    fi
    return $ec
}

function start_gui ()
{
    local gui_port="${1}" ; shift
    if [ -z "${gui_port}" ]
    then
        log "usage: gui: gui-port log-port!"
        return 1
    fi
    local log_port="${1}" ; shift
    if [ -z "$log_port" ] ; then
        log "usage: gui: gui-port log-port!"
        return 1
    fi

    "$SDPA_HOME/bin/sdpa-gui" $gui_port $log_port &
}

function stop_vmem ()
{
    log "vmem"
    if ! stop_proc "vmem" "vmem" ; then
        log "E: could not stop vmem"
        return 1
    else
        return 0
    fi
}

function stop ()
{
    local parts="drts agg orch vmem kvs"

    local p
    local rc=0
    for p in $parts ; do
        if ! stop_$p $@ ; then
            rc=$(( rc + 1 ))
        fi
    done
    return $rc
}

function status_orch ()
{
    is_proc_alive "orchestrator" $(cat "$state_dir/orchestrator.pid" 2>/dev/null)
}

function status_agg ()
{
    status_agent "agent-$(get_master_node)-0"
}

function status_kvs ()
{
    is_proc_alive "fhgkvsd" $(cat "$state_dir/fhgkvsd.pid" 2>/dev/null)
}

function status_vmem ()
{
    is_proc_alive "vmem" $(cat "$state_dir/vmem.pid" 2>/dev/null)
}

function status ()
{
    local parts=$1
    if [ -z "$parts" ] ; then
        parts="kvs orch agg vmem drts"
    else
        shift
    fi

    # check system status
    local rc=0
    local p
    local err
    for p in $parts ; do
        local cmd
        cmd="status_$p"
        if type "$cmd" >/dev/null 2>&1 ; then
            err=$(status_$p $@)
            ec=$?
            if [ $ec -eq 0 ] ; then
                :
#               log "$p is alive"
            elif [ $ec -eq 23 ] ; then
                log "$p is deactivated"
            else
                if [ -z "$err" ] ; then
                    log "$p is dead"
                else
                    log "$p is dead: $err"
                fi
                rc=$(( rc + 1 ))
            fi
        else
            sdpac --kvs-host "${kvs_host}" --kvs-port ${kvs_port} status $p
        fi
    done
    return $rc
}

function submit ()
{
    local net="$1" ; shift
    if [ ! -r "$net" ] ; then
        log "E: submit: cannot read file: $net"
        return 42
    fi
    if [ x"$net" = x"-" ] ; then
        net="/dev/stdin"
    fi
    local output="$1"; shift
    if [ -z "$output" ] ; then
        output=/dev/null
    fi

    log "I: submitting file: $net"
    jobid=$( sdpac --kvs-host "${kvs_host}" --kvs-port ${kvs_port} submit "$net" 2>&1 )
    if [ $? -ne 0 ] ; then
        log "E: submission failed: $jobid"
        return 4
    else
        log "  + job ($jobid)"
        echo "$jobid" > "$state_dir/current_job"
        sdpac --kvs-host "${kvs_host}" --kvs-port ${kvs_port} wait "$jobid"
        s=$(sdpac --kvs-host "${kvs_host}" --kvs-port ${kvs_port} status "${jobid}")
        log "    $jobid -> $s"
        s=$(echo "$s" | tr 'A-Z' 'a-z')
        case "$s" in
            *finish*)
                log "I: job finished"
                ;;
            *fail*)
                log "E: job failed"
                ;;
            *cancel*)
                log "E: job canceled"
                ;;
            *)
                log "W: unknown state: $s"
                ;;
        esac
        sdpac --kvs-host "${kvs_host}" --kvs-port ${kvs_port} -o "$output" --force results "$jobid"
        sdpac --kvs-host "${kvs_host}" --kvs-port ${kvs_port} delete "${jobid}"
        if [ $? -eq 0 ] ; then
            echo "  - job ($jobid)"
        fi
    fi
}

function get_master_node()
{
    if test -r "$state_dir/nodefile" ; then
        head -n 1 "$state_dir/nodefile"
    else
        return 1
    fi
}

##########################################################
#                                                        #
#          S C R I P T     B E H A V I O R               #
#                                                        #
##########################################################

if [ "$1" = "help" ] ; then
    shift
    help $@
    exit $?
fi

if [ "$1" = "version" ] ; then
    shift
    sdpac --version
    exit $?
fi

if [ "$1" = "-s" ] ; then
    shift
    state_dir="$1"; shift
    if [ -z "$state_dir" ] ; then
        log "E: empty state dir"
        exit 1
    fi
    export SDPA_STATE_DIR="$state_dir"
fi

if [ -f "${state_dir}/kvs.host" ]
then
  kvs_host=$(cat "${state_dir}/kvs.host")
fi
if [ -f "${state_dir}/kvs.port" ]
then
  kvs_port=$(cat "${state_dir}/kvs.port")
fi

function sigterm()
{
    trap sigterm TERM
}
trap sigterm TERM

case "$1" in
    stop)
        shift
        stop $@
        ;;
    status)
        shift
        status $@
        ;;
    submit)
        shift
        submit $@
        ;;
    help)
        help
        ;;
    gui)
        shift
        start_gui $@
        ;;
    bundle)
        shift
        "${SDPA_SCRIPT_DIR}/bundle.sh" "$@"
        ;;
    boot)
        shift
        "${SDPA_SCRIPT_DIR}/start-sdpa" -S "$state_dir" -H "${SDPA_HOME}" "$@"
        ;;
    selftest)
        shift
        "${SDPA_SCRIPT_DIR}/sdpa-selftest" -s "${state_dir}" -H "${SDPA_HOME}" "${@}"
        ;;
    '')
        help
        ;;
    *)
        echo "E: unknown command: $1, try '$0 help'" >&2
        exit 1
        ;;
esac
