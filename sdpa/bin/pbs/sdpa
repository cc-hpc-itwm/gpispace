#!/bin/bash
#
# usage: sdpa {boot|stop|submit file}
#

kvs_host=
kvs_port=

function log ()
{
    echo "$@" >&2
}

function debug ()
{
    if [ x"$debug_enabled" = x"true" ] ; then
        log $@
    fi
}

function prepend_to_path ()
{
    local var="$1"; shift
    local val=$(eval echo \$${var})
    for v ; do
        if [ -z "$v" ] ; then
            continue
        fi
        val=$(echo "$val" | sed "s,:$v:,:,g")
        val=$(echo "$val" | sed -e "s,^$v:,,g")
        val=$(echo "$val" | sed -e "s,:$v\$,,g")
        if [ -z "$val" ] ; then
            val="$v"
        else
            val="$v:$val"
        fi
    done
    eval "export $var=$val"
}

if [ -z "$HOME" ]
then
    export HOME=$(echo ~)
fi

export SDPA_HOME=$(dirname $(dirname $(which "$0")))
SDPA_SCRIPT_DIR="${SDPA_HOME}/libexec/sdpa/scripts"
prepend_to_path PATH "$SDPA_HOME/bin"

state_dir=${SDPA_STATE_DIR:="$HOME/.sdpa/state"}
debug_enabled=false

##############################################
#                                            #
#  F U N C T I O N    D E F I N I T I O N S  #
#                                            #
##############################################

function require()
{
    local tool="$1"; shift
    if [ -z "$tool" ] ; then
        return 2
    fi

    tool_bin=$(which "$tool" 2>/dev/null)
    if [ -z "$tool_bin" ] ; then
        tool_bin="$SDPA_HOME/bin/$tool"
    fi

    if [ ! -x "$tool_bin" ] ; then
        echo "Could not locate required tool $tool" >&2
        return 1
    fi
    eval "$tool=$tool_bin"
    return 0
}

if ! require fhglogc ; then
    exit 1
fi

function rexec ()
{
    local node="$1"; shift
    local err
    local rc
    local ssh_opts="-q -x -T -n -C -4 -o CheckHostIP=no -o StrictHostKeyChecking=no"
    local cmd="ssh $ssh_opts $node $@"
    debug $cmd
    err=$($cmd 2>&1)
    rc=$?
    if [ $rc -eq 0 ] ; then
        return 0
    elif [ $rc -eq 255 ] ; then
        echo "ssh could not connect to $node: $err: $rc" >&2
        return $rc
    else
        echo "$err"
        return $rc
    fi
}

function help ()
{
    cat >&2 <<EOF
usage: `basename $0` command [parameters...]

   available commands:
        selftest - perform a self-test
            boot - boot the runtime system
           stop  - stop all components
             gui - start the GUI

   submit <file> - submit a job

EOF
                      return 0
}

function terminate_processes_on_host()
{
    local type="${1}"; shift
    local host="${1}"; shift
    local pids="${@}"; shift

    if [ -n "${pids}" ]
    then
        log "terminating ${type} on ${host}: ${pids}"
        rexec "${host}" kill -TERM "${pids}"
    fi
}

function stop_agent ()
{
    processes_dir="${state_dir}/processes"
    local background_jobs=()
    local host_to_terminate_on=
    local pids_to_terminate=()
    for pidfile in $(find "${state_dir}/processes" -name "agent-*.pid" | sort)
    do
        local host=$(dirname "${pidfile}" | xargs -n 1 basename)
        if [ -n "${host_to_terminate_on}" -a "${host_to_terminate_on}" != "${host}" ]
        then
            terminate_processes_on_host "agent" ${host_to_terminate_on} ${pids_to_terminate[@]} &
            background_jobs+=($!)
            if [ ${#background_jobs} -gt 16 ]
            then
                wait ${background_jobs[@]}
                background_jobs=()
            fi
            rm -f "${processes_dir}/${host_to_terminate_on}"/agent-*.pid
            pids_to_terminate=()
        fi
        host_to_terminate_on="${host}"
        pids_to_terminate+=( $(cat "$pidfile") )
    done
    if [ ${#pids_to_terminate[@]} -gt 0 ]
    then
        terminate_processes_on_host "agent" ${host_to_terminate_on} ${pids_to_terminate[@]} &
        background_jobs+=($!)
        rm -f "${processes_dir}/${host_to_terminate_on}"/agent-*.pid
        pids_to_terminate=()
    fi
    if [ ${#background_jobs} -gt 0 ]
    then
        wait ${background_jobs[@]}
        background_jobs=()
    fi
}

function stop_kvs ()
{
    rm -f "${state_dir}/kvs.host"
    rm -f "${state_dir}/kvs.port"

    local processes_dir="${state_dir}/processes"
    for pidfile in $(find "${state_dir}/processes" -name "fhgkvsd.pid")
    do
        local host=$(dirname "${pidfile}" | xargs -n 1 basename)
        terminate_processes_on_host "kvs" ${host} $(cat "${pidfile}")
        rm -f "${pidfile}"
    done
}

function stop_orchestrator ()
{
    local processes_dir="${state_dir}/processes"
    for pidfile in $(find "${state_dir}/processes" -name "orchestrator.pid")
    do
        local host=$(dirname "${pidfile}" | xargs -n 1 basename)
        terminate_processes_on_host "orchestrator" ${host} $(cat "${pidfile}")
        rm -f "${pidfile}"
    done
}

function stop_drts ()
{
    processes_dir="${state_dir}/processes"
    local background_jobs=()
    local host_to_terminate_on=
    local pids_to_terminate=()
    for pidfile in $(find "${state_dir}/processes" -name "drts-kernel-*.pid" | sort)
    do
        local host=$(dirname "${pidfile}" | xargs -n 1 basename)
        if [ -n "${host_to_terminate_on}" -a "${host_to_terminate_on}" != "${host}" ]
        then
            terminate_processes_on_host "kernel" ${host_to_terminate_on} ${pids_to_terminate[@]} &
            background_jobs+=($!)
            if [ ${#background_jobs} -gt 16 ]
            then
                wait ${background_jobs[@]}
                background_jobs=()
            fi
            rm -f "${processes_dir}/${host_to_terminate_on}"/drts-kernel-*.pid
            pids_to_terminate=()
        fi
        host_to_terminate_on="${host}"
        pids_to_terminate+=( $(cat "$pidfile") )
    done
    if [ ${#pids_to_terminate[@]} -gt 0 ]
    then
        terminate_processes_on_host "kernel" ${host_to_terminate_on} ${pids_to_terminate[@]} &
        background_jobs+=($!)
        rm -f "${processes_dir}/${host_to_terminate_on}"/drts-kernel-*.pid
        pids_to_terminate=()
    fi
    if [ ${#background_jobs} -gt 0 ]
    then
        wait ${background_jobs[@]}
        background_jobs=()
    fi
}

function start_gui ()
{
    local gui_port="${1}" ; shift
    if [ -z "${gui_port}" ]
    then
        log "usage: gui: gui-port log-port!"
        return 1
    fi
    local log_port="${1}" ; shift
    if [ -z "$log_port" ] ; then
        log "usage: gui: gui-port log-port!"
        return 1
    fi

    "$SDPA_HOME/bin/sdpa-gui" $gui_port $log_port &
}

function stop_vmem ()
{
    local processes_dir="${state_dir}/processes"
    for pidfile in $(find "${state_dir}/processes" -name "vmem.pid")
    do
        local host=$(dirname "${pidfile}" | xargs -n 1 basename)
        terminate_processes_on_host "vmem" ${host} $(cat "${pidfile}")
        rm -f "${pidfile}"
    done
}

function stop ()
{
    local parts="drts agent orchestrator vmem kvs"

    local p
    local rc=0
    for p in $parts ; do
        if ! stop_$p $@ ; then
            rc=$(( rc + 1 ))
        fi
    done
    return $rc
}

function submit ()
{
    local net="$1" ; shift
    if [ ! -r "$net" ] ; then
        log "E: submit: cannot read file: $net"
        return 42
    fi
    if [ x"$net" = x"-" ] ; then
        net="/dev/stdin"
    fi
    local output="$1"; shift
    if [ -z "$output" ] ; then
        output=/dev/null
    fi

    log "I: submitting file: $net"
    jobid=$( sdpac --kvs-host "${kvs_host}" --kvs-port ${kvs_port} submit "$net" 2>&1 )
    if [ $? -ne 0 ] ; then
        log "E: submission failed: $jobid"
        return 4
    else
        log "  + job ($jobid)"
        echo "$jobid" > "$state_dir/current_job"
        sdpac --kvs-host "${kvs_host}" --kvs-port ${kvs_port} wait "$jobid"
        s=$(sdpac --kvs-host "${kvs_host}" --kvs-port ${kvs_port} status "${jobid}")
        log "    $jobid -> $s"
        s=$(echo "$s" | tr 'A-Z' 'a-z')
        case "$s" in
            *finish*)
                log "I: job finished"
                ;;
            *fail*)
                log "E: job failed"
                ;;
            *cancel*)
                log "E: job canceled"
                ;;
            *)
                log "W: unknown state: $s"
                ;;
        esac
        sdpac --kvs-host "${kvs_host}" --kvs-port ${kvs_port} -o "$output" --force results "$jobid"
        sdpac --kvs-host "${kvs_host}" --kvs-port ${kvs_port} delete "${jobid}"
        if [ $? -eq 0 ] ; then
            echo "  - job ($jobid)"
        fi
    fi
}

##########################################################
#                                                        #
#          S C R I P T     B E H A V I O R               #
#                                                        #
##########################################################

if [ "$1" = "help" ] ; then
    shift
    help $@
    exit $?
fi

if [ "$1" = "version" ] ; then
    shift
    sdpac --version
    exit $?
fi

if [ "$1" = "-s" ] ; then
    shift
    state_dir="$1"; shift
    if [ -z "$state_dir" ] ; then
        log "E: empty state dir"
        exit 1
    fi
    export SDPA_STATE_DIR="$state_dir"
fi

if [ -f "${state_dir}/kvs.host" ]
then
  kvs_host=$(cat "${state_dir}/kvs.host")
fi
if [ -f "${state_dir}/kvs.port" ]
then
  kvs_port=$(cat "${state_dir}/kvs.port")
fi

if [ "$1" = "gui" ] ; then
    shift
    start_gui $@
    exit $?
fi

function sigterm()
{
    trap sigterm TERM
}
trap sigterm TERM

case "$1" in
    start)
        shift
        start $@
        ;;
    stop)
        shift
        stop $@
        ;;
    submit)
        shift
        submit $@
        ;;
    help)
        help
        ;;
    gui)
        shift
        start_gui $@
        ;;
    boot)
        shift
        "${SDPA_SCRIPT_DIR}/start-sdpa" -S "$state_dir" -H "${SDPA_HOME}" "$@"
        ;;
    selftest)
        shift
        "${SDPA_SCRIPT_DIR}/sdpa-selftest" -s "${state_dir}" -H "${SDPA_HOME}" "${@}"
        ;;
    '')
        help
        ;;
    *)
        echo "E: unknown command: $1, try '$0 help'" >&2
        exit 1
        ;;
esac
