#!/bin/bash
#
# usage: sdpa {start|stop|status|submit file}
#

# increment this value if anything config related changes!
CONFIG_VERSION=11

function log ()
{
    echo "$@" >&2
}

function debug ()
{
    if [ x"$debug_enabled" = x"true" ] ; then
        log $@
    fi
}

function prepend_to_path ()
{
    local var="$1"; shift
    local val=$(eval echo \$${var})
    for v ; do
        if [ -z "$v" ] ; then
            continue
        fi
        val=$(echo "$val" | sed "s,:$v:,:,g")
        val=$(echo "$val" | sed -e "s,^$v:,,g")
        val=$(echo "$val" | sed -e "s,:$v\$,,g")
        if [ -z "$val" ] ; then
            val="$v"
        else
            val="$v:$val"
        fi
    done
    eval "export $var=$val"
}

if [ -z "$HOME" ]
then
    export HOME=$(echo ~)
fi

export SDPA_HOME=$(dirname $(dirname $(which "$0")))
export SDPA_LIBEXEC="${SDPA_HOME}/libexec/sdpa"
export SDPA_SCRIPT_DIR="$SDPA_LIBEXEC/scripts"
prepend_to_path PATH "$SDPA_HOME/bin"

config_file=${SDPA_CONFIG:="$HOME/.sdpa/configs/sdpa.rc"}
state_dir=${SDPA_STATE_DIR:="$HOME/.sdpa/state"}
debug_enabled=false

##############################################
#                                            #
#      Default configuration section         #
#                                            #
##############################################

#
# cluster related
#
DEFAULT_CLUSTER_HEAD="" # if needed

#
# SDPA
#
DEFAULT_LOG_PORT="$(( (65535 - 30000 + $(id -u) * 2) % 65535 + 1024 + 0))"
DEFAULT_GUI_PORT="$(( (65535 - 30000 + $(id -u) * 2) % 65535 + 1024 + 1))"
DEFAULT_LOG_URL=""
DEFAULT_GUI_URL=""

#
# GPI
#
DEFAULT_GPI_PRIV_DIR=""
DEFAULT_GPI_ENABLED="false"
DEFAULT_GPI_MEMSIZE="5G"
DEFAULT_GPI_SHMSIZE="1G"
DEFAULT_GPI_API="gpi.api.real"

#
# override defaults by:
#
#     1. /etc/sdpa/defaults
#     2. /usr/etc/sdpa/defaults
#     3. /usr/local/etc/sdpa/defaults
#     4. $SDPA_HOME/etc/sdpa/defaults
#     5. $HOME/.sdpa.defaults
#

for system_default in "/etc/sdpa/defaults"               \
                      "/usr/etc/sdpa/defaults"           \
                      "/usr/local/etc/sdpa/defaults"     \
                      "${SDPA_HOME}/etc/sdpa/defaults"   \
                      "${SDPA_SYSTEM_DEFAULTS}"          \
                      ~/.sdpa.defaults                   ; do
    if [ -r "$system_default" ] ; then
        debug "reading system default from: '$system_default'" >&2
        source "$system_default"
    fi
done

##############################################
#                                            #
#  F U N C T I O N    D E F I N I T I O N S  #
#                                            #
##############################################

function require()
{
    local tool="$1"; shift
    if [ -z "$tool" ] ; then
        return 2
    fi

    tool_bin=$(which "$tool" 2>/dev/null)
    if [ -z "$tool_bin" ] ; then
        tool_bin="$SDPA_HOME/bin/$tool"
    fi

    if [ ! -x "$tool_bin" ] ; then
        echo "Could not locate required tool $tool" >&2
        return 1
    fi
    eval "$tool=$tool_bin"
    return 0
}

if ! require fhgcfg ; then
    exit 1
fi

if ! require fhglogc ; then
    exit 1
fi

function log_helper ()
{
    local fn="$1"; shift
    local ln="$1"; shift
    local file="$0"

    echo "$file:$ln - $@" >&2
    if [ -n "$fhglogc" ] ; then
        ${fhglogc} -L "$ln" -F "$file" -p 2 -m "$@"
    fi
}

do_log="eval log_helper \"\$FUNCNAME\" \"\$LINENO\""

function get ()
{
    local key="$1"; shift
    local def="$1"; shift

    ${fhgcfg} -f "$config_file" -g "$key" -v "$def"
}

function put ()
{
    local key="$1"; shift
    local val="$1"; shift

    ${fhgcfg} -f "$config_file" -a "$key" -v "$val"
    log "-: set $key to '$val'"
}

function rexec ()
{
    local node="$1"; shift
    local err
    local rc
    local ssh_opts="-q -x -T -n -C -4 -c arcfour,blowfish-cbc -o CheckHostIP=no -o StrictHostKeyChecking=no"
    local cmd="ssh $ssh_opts $node $@"
    debug $cmd
    err=$($cmd 2>&1)
    rc=$?
    if [ $rc -eq 0 ] ; then
        return 0
    elif [ $rc -eq 255 ] ; then
        echo "ssh could not connect to $node: $err: $rc" >&2
        return $rc
    else
        echo "$err"
        return $rc
    fi
}

function guess_head_node ()
{
    if [ -n "${DEFAULT_CLUSTER_HEAD}" ] ; then
        echo "${DEFAULT_CLUSTER_HEAD}"
    elif [ -n "$PBS_O_HOST" ] ; then
        echo "$PBS_O_HOST"
    else
        echo "$(hostname -f)"
    fi
}

function isatty()
{
    local f="$1" ; shift
    f=$(readlink -f "$f")
    if [ -e "$f" ] ; then
        tty -s < "$f" >/dev/null 2>&1
        return $?
    else
        return 1
    fi
}

function is_unattended ()
{
    if [ -n "$SDPA_PERFORM_UNATTENDED_SETUP" ] ; then
        return 0
    fi

    if ! isatty /dev/stdin ; then
        return 0
    fi

    return 1
}

#
# check, if we have to start the setup routine
#
function setup_required ()
{
    test ! -e "${config_file}"
}

function setup_kvs ()
{
    log "I: kvs setup"

    return 0
}

function y_n_p ()
{
    local prompt="$1" ; shift

    if is_unattended ; then
        return 2
    fi

    read -n 1 -p "$prompt" yes_or_no
    case "$yes_or_no" in
        y|Y)
            echo
            return 0
            ;;
        n|N)
            echo
            return 1
            ;;
        ?)
            echo
            return 2
            ;;
        *)
            return 2
            ;;
    esac
}

function append_to_path ()
{
    local var="$1"; shift
    local val=$(eval echo \$${var})
    for v ; do
        if ! echo "$val" | grep -q -- "$v" ; then
            val="$val:$v"
        fi
    done
    eval "$var=$val"
}

function get_user_input ()
{
    local prompt="$1"; shift
    local var="$1"; shift

    if is_unattended ; then
        return
    fi

    read -e -p "  $prompt " new_val
    if [ -n "$new_val" ] ; then
        new_val=$(eval echo "$new_val")
        eval "$var=$new_val"
    fi
}

function setup_logging ()
{
    def_log_server_url="${DEFAULT_LOG_URL}"
    if [ -z "${DEFAULT_LOG_URL}" ] ; then
        def_log_server_url="$(guess_head_node):${DEFAULT_LOG_PORT:?}"
    fi

    local url=$(get "log.server.url" "${def_log_server_url}")
    local prompt="remote logging to (host:port) [$url]:"
    get_user_input "$prompt" url

    local lvl=$(get "log.server.level" "INFO")
    local prompt="log level [$lvl]:"
    get_user_input "log level to use [$lvl]:" lvl ""
    lvl=$( echo "$lvl" | tr 'a-z' 'A-Z' )

    put "log.server.url" "$url"
    put "log.server.level" "$lvl"
}

function setup_gui ()
{
    if [ -z "${DEFAULT_GUI_URL}" ] ; then
        def_gui_server_url="$(guess_head_node):${DEFAULT_GUI_PORT:?}"
    fi

    local key="sdpa.gui"
    local val=$(get "$key" "${def_gui_server_url}")
    local prompt="location of the monitor gui (host:port) [$val]:"
    get_user_input "$prompt" val
    put "$key" "$val"
}

function parse_human_readable_size ()
{
    local size_value="$1"; shift
    local var="$1"; shift
    size_value=$( echo "$size_value" | tr 'a-z' 'A-Z' )
    size_value=$( echo "$size_value" | sed -e 's/E$/*1024T/' )
    size_value=$( echo "$size_value" | sed -e 's/T$/*1024G/' )
    size_value=$( echo "$size_value" | sed -e 's/G$/*1024M/' )
    size_value=$( echo "$size_value" | sed -e 's/M$/*1024K/' )
    size_value=$( echo "$size_value" | sed -e 's/K$/*1024B/'  )
    size_value=$( echo "$size_value" | sed -e 's/B$/*1/'  )

    # compute the total and round to an integer
    size_value=$( echo "$size_value" | bc | xargs printf "%1.0f" )
    if [ -n "$var" ] ; then
        eval "$var=$size_value"
    else
        echo "$size_value"
    fi
}

function to_human_readable_size ()
{
    local size_value="$1"; shift
    local var="$1"; shift

    local new_val="1"
    local tmp=$( echo "$size_value > 1024" | bc )
    while test "$tmp" = "1" ; do
        new_val="$new_val*1024"
        size_value=$( echo "scale=2; $size_value/1024.0" | bc )
        tmp=$( echo "$size_value > 1024" | bc )
    done

    new_val=$( echo "$new_val" | sed -e 's/*1024$/K/' )
    new_val=$( echo "$new_val" | sed -e 's/*1024K$/M/' )
    new_val=$( echo "$new_val" | sed -e 's/*1024M$/G/' )
    new_val=$( echo "$new_val" | sed -e 's/*1024G$/T/' )
    new_val=$( echo "$new_val" | sed -e 's/^1//')

    new_val="${size_value}${new_val}"
    if [ -n "$var" ] ; then
        eval "$var=$new_val"
    else
        echo "$new_val"
    fi
}

function setup_gpi ()
{
    local gpid_pid=""
    local gpid_dir="$DEFAULT_GPI_PRIV_DIR"

    if [ -z "$DEFAULT_GPI_PRIV_DIR" ] ; then
        for gpi_prog in "gpid.exe" "gpid.bin" ; do
            gpid_pid=$(ps -C $gpi_prog -o pid= | tr -d ' ')
            if [ -z "$gpid_pid" ] ; then
                continue
            fi
            gpid_dir=$(cat /proc/$gpid_pid/cmdline 2>/dev/null | tr '\0' ' ' | grep -o -- '-p [^ ]*' | cut -d' ' -f 2)
            if [ -d "$gpid_dir" ] ; then
                break
            fi
        done
    fi

    if [ -z "$gpid_dir" ] ; then
        log "W: could not discover GPI priviledged directory, using /"
        gpid_dir="/"
    fi

    gpid_dir=$(get "gpi.priv_dir" "$gpid_dir")
    get_user_input "GPI privileged directory to use [$gpid_dir]:" gpid_dir

    put "gpi.priv_dir" "$gpid_dir"
}

function setup ()
{
    cat <<EOF
$(sdpac --version)

Initiating the  setup routine of  SDPA.
EOF

    if is_unattended ; then
        log "I: performing automatic setup"
    fi

    if ! test -e "$config_file" ; then
        mkdir -p $(dirname "$config_file") 2>/dev/null
        touch "$config_file"
    fi

    local real_config_file="$config_file"
    local temp_config_file="${config_file}~"

    local old_trap=$(trap -p EXIT)
    trap -- "rm -f $temp_config_file" EXIT

    local parts=$1
    if [ -z "$parts" ] ; then
        parts="kvs logging gui gpi"
    else
        shift
    fi

    if test -f "$real_config_file" ; then
        cp "$real_config_file" "$temp_config_file"
    fi
    config_file="$temp_config_file"

    local p
    for p in $parts ; do
        setup_$p $@ || { log "E: setup_$p failed!" ; return 1 ; }
    done

    cp "$real_config_file" "${real_config_file}.bak"
    mv "$temp_config_file" "$real_config_file"

    # putting config in place
    config_file="$real_config_file"
    eval $old_trap

    echo
    log "I: setup complete."
}

function generate_environment ()
{
    if ! on_master_node ; then
        log "E: cannot generate environment on slave node!"
        return 1
    fi

    # read variables from config and write them to an environment file
    #     replacing init-screen.env in principle
    ${fhgcfg} -f "$config_file" -l | while read key dummy val ; do
        case "$key" in
            log.server.level)
                echo export FHGLOG_level="$val"
                ;;
            log.server.url)
                echo export FHGLOG_to_server="$val"
                ;;
            gpi.priv_dir)
                echo export GPI_PRIV_DIR="$val"
                ;;
            sdpa.gui)
                echo export SDPA_GUI="$val"
                ;;
            sdpa.home)
                ;;
            *)
                ;;
        esac
    done

    if [ -z "$SDPA_HOME" ] ; then
        mydir="$(cd $(dirname $( which $0 )) && pwd)"
        export SDPA_HOME=$(dirname "$mydir")
    else
        # sanitize HOME
        export SDPA_HOME="$(echo $SDPA_HOME | sed -e 's,/\+$,,')"
    fi

    export SDPA_LIBEXEC="$SDPA_HOME/libexec/sdpa"
    export SDPA_PLUGINS="$SDPA_HOME/libexec/fhg/plugins"

    echo export SDPA_HOME="$SDPA_HOME"
    echo export SDPA_LIBEXEC="$SDPA_LIBEXEC"
    echo export SDPA_PLUGINS="$SDPA_PLUGINS"

    prepend_to_path PATH "$SDPA_HOME/bin"
    prepend_to_path LD_LIBRARY_PATH "$SDPA_HOME/lib"
    prepend_to_path LD_LIBRARY_PATH "$SDPA_LIBEXEC"

    prepend_to_path PC_LIBRARY_PATH "$SDPA_LIBEXEC/apps"
    if [ -n "$SDPA_APP_PATH" ] ; then
        prepend_to_path PC_LIBRARY_PATH "$SDPA_APP_PATH"
        prepend_to_path LD_LIBRARY_PATH "$SDPA_APP_PATH"
    fi

    echo export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:\$LD_LIBRARY_PATH"
    echo export PC_LIBRARY_PATH="$PC_LIBRARY_PATH:\$PC_LIBRARY_PATH"
    echo export PATH="$PATH:\$PATH"

    debug "I: PATH := ${PATH}"
    debug "I: LD_LIBRARY_PATH := ${LD_LIBRARY_PATH}"
    debug "I: PC_LIBRARY_PATH := ${PC_LIBRARY_PATH}"
}

function dump_config ()
{
    ${fhgcfg} -f "$config_file" -p
}

function initialize ()
{
    local hostfile=""
    local node_file=

    app_path="${SDPA_APP_PATH}"
    argv="$@"
    OPTIND=1
    while getopts "hF:n:s:A:" opt $argv ; do
        case $opt in
            h)
                echo >&2 "usage: init: [-h] [-F hostfile] [-s state-dir] [-A module-dir]"
                return 0
                ;;
            F)
                hostfile="$OPTARG"
                shift 2
                ;;
            s)
                state_dir="$OPTARG"
                shift 2
                ;;
            A)
                app_path="${OPTARG}:${app_path}"
                shift 2
                ;;
            \?)
                shift
                ;;
        esac
    done

    export SDPA_APP_PATH="${app_path}"

    if [ -n "$1" ] ; then
        hostfile="$1"; shift
    fi

    if [ -z "$hostfile" ] ; then
        log "E: hostfile not set"
        log "usage: init: [-h] [-F hostfile] [-s state-dir]"
        return 1
    fi

    if [ ! -r "$hostfile" ] ; then
        log "E: cannot read hostfile: $hostfile"
        return 1
    fi

    if ! grep -q -e "^$(hostname -f)$" "${hostfile}" ; then
        if ! grep -q -e "^$(hostname -s)$" "${hostfile}" ; then
            log "E: could not find current host '$(hostname)' in hostfile: $hostfile"
            return 1
        fi
    fi

    if [ ! -d "$state_dir" ] ; then
        local msg=$( mkdir -p "$state_dir" 2>&1 )
        if [ $? -ne 0 ] ; then
            echo "E: failed to create state-dir: $state_dir: $msg" >&2
            return 1
        fi
    fi

    mkdir -p "$state_dir/log" || {
        echo >&2 "E: could not create log directory!"
        return 1
    }

    node_file="${state_dir}/nodefile"

    if ! cp "$hostfile" "$node_file" ; then
        log "E: could not copy nodefile from '$hostfile' to '$node_file'"
        return 1
    fi

    local tmp_file="$state_dir/sdpa.env~"
    :> "$tmp_file"
    echo test -e "$state_dir/sdpa.pre.env" \&\& source "$state_dir/sdpa.pre.env" >> "$tmp_file"
    if ! generate_environment >> "$tmp_file" ; then
        log "E: could not generate environment"
        return 1
    fi
    cat >>"$tmp_file" <<EOF
function log()
{
  echo "\$@" >&2
  test -x "\$SDPA_HOME/bin/fhglogc" && "\$SDPA_HOME/bin/fhglogc" -t "\$0" -m "\$*"
}
EOF
    echo test -e "$state_dir/sdpa.post.env" \&\& source "$state_dir/sdpa.post.env" >> "$tmp_file"
    echo ":" >> "$tmp_file"

    local sdpa_home="$SDPA_HOME"
    if [ -z "$sdpa_home" ] ; then
        log "E: SDPA_HOME is not defined!"
    fi
    mv "$tmp_file" "$state_dir/sdpa.env"
}

function cleanup ()
{
    test -r "$state_dir/sdpa.env" && source "$state_dir/sdpa.env"

    echo "cleaning up" >&2

    echo "  * logs" >&2
    clear-logs -f -a -x

    return 0
}

function help ()
{
    cat >&2 <<EOF
usage: `basename $0` command [parameters...]

   available commands:
        setup       - setup SDPA
        init        - initialize environment file
                      execute this in a a fresh allocation
        load        - print instructions to load
                      the environment file: eval \$(sdpa load)
     selftest       - perform a self-test
       config       - dump the current config

  start [component] - start all components or "component"
   stop [component] - stop all components or "component"
restart [component] - restart all components or "component"
 status [component] - get the current status of component
                gui - start the GUI

      submit <file> - submit a job
 cancel [job-id...] - cancel the given job or the current job
     unload-modules - unload modules in the process containers

EOF
                      return 0
}

function is_proc_alive ()
{
    local name="$1" ; shift
    local pid="$1" ; shift

    if [ -z "$name" ] ; then
        echo "E: usage: is_proc_alive <binary> <pid>" >&2
        exit 42
    fi

    if [ -z "$pid" ] ; then
        return 1
    fi

    if grep -q "$name" /proc/$pid/cmdline >/dev/null 2>&1 ; then
        if kill -0 "$pid" >/dev/null 2>&1 ; then
            return 0
        else
            echo "E: $name: there seems to be an alien around!" >&2
            echo "E:       cannot send signal to $pid" >&2
            return 2 # not allowed to send signals!
        fi
    else
        return 1 # not there
    fi
}

function start_proc ()
{
    local name="$1" ; shift
    local binary="$1" ; shift

    # check for old one
    local pid_file="$state_dir/$name.pid"
    local log_file="$state_dir/log/$name.log"
    local pid=$( cat "$pid_file" 2>/dev/null )
    if ! is_proc_alive "$name" "$pid" ; then
        :> "$pid_file"
        debug $binary "$@"
        $binary "$@" </dev/null >"$log_file" 2>&1
        for (( i = 0 ; i < 6 ; ++i )) ; do
            sleep 0.5
            pid=$( cat "$pid_file" 2>/dev/null )
            if [ -n "$pid" ] ; then
                if is_proc_alive "$name" "$pid" ; then
                    echo "+ $name ($pid)" >&2
                    return 0
                fi
            fi
        done
        echo "- $name (dead), check '$log_file' for more - here are the last 3 lines:"
        tail -n 3 "$log_file" >&2
        return 1
    fi
    return 0
}

function stop_proc ()
{
    local name="$1" ; shift
    local binary="$1" ; shift

    local pid_file="$state_dir/$name.pid"
    local pid=$( cat "$pid_file" 2>/dev/null )
    if [ -n "$pid" ] ; then
        echo -n "    sending SIGTERM to $name ($pid)..." >&2
        for (( i=0; i<3; ++i )); do
            if is_proc_alive "$name" "$pid" ; then
                echo -n "."
                kill -TERM "$pid" >/dev/null 2>&1
                sleep 1
            else
                :> "$pid_file"
                echo "ok" >&2
                break
            fi
        done
    fi

    if is_proc_alive "$name" "$pid" ; then
        kill -KILL "$pid" >/dev/null 2>&1
        echo "killed" >&2
    else
        pkill "$name" >/dev/null 2>&1
        return 0
    fi
}

function stop_agent_on_node ()
{
    local node="${1}" ; shift
    local rc=0
    local err=""

    err=$(rexec "$node" "$SDPA_SCRIPT_DIR/stop-agent" 2>&1)
    rc=$?

    if [ $rc -ne 0 -a $rc -ne 2 ] ; then
        echo >&2 "stop-agent on node '$node' failed: $rc: $err"
    fi

    return $rc
}

function stop_agent ()
{
    echo "agent (all nodes)" >&2
    node_loop stop_agent_on_node $@
    ec=$?
    if [ $ec -ne 0 ] ; then
        return $ec
    fi
}

function status_agent ()
{
    local name="$1" ; shift

    local node=$(get_master_node)
    local cmd="rexec $node $SDPA_SCRIPT_DIR/status-agent -n $name-$node"
    debug $cmd
    $cmd </dev/null >/dev/null 2>&1
}

function start_kvs ()
{
    if ! on_master_node ; then
        log "E: kvs must be started on the master node"
        exit 1
    fi
    kvs_port="${1}" ; shift
    if [ -z "$kvs_port" ] ; then
        log "E: kvs port is missing!"
        return 1
    fi

    if ! start_proc "fhgkvsd" "$SDPA_HOME/bin/fhgkvsd" -s "" "-C" "-b" "0" "-p" "${kvs_port}" "--pidfile" "$state_dir/fhgkvsd.pid" "--daemonize"; then
        log "E: could not start kvs, giving up!"
        return 1
    else
        sleep 1
        return 0
    fi
}

function stop_kvs ()
{
    echo "fhgkvsd"
    if ! stop_proc "fhgkvsd" "fhgkvsd" ; then
        echo "E: could not stop kvs!" >&2
        return 1
    fi
}

function stop_orch ()
{
    echo "orchestrator"
    if ! stop_proc "orchestrator" "$SDPA_SCRIPT_DIR/start-orch" ; then
        echo "E: could not stop orchestrator" >&2
        return 1
    fi
}

function stop_agg ()
{
    if ! stop_agent ; then
        echo "E: could not stop agent" >&2
        return 1
    fi
}

function node_loop ()
{
    if [ ! -r "${state_dir}/nodefile" ] ; then
        echo "Cannot read nodefile: ${state_dir}/nodefile" >&2
        return 1
    fi

    local body="$1" ; shift

    nodes=$(uniq "${state_dir}/nodefile")

    local rc=0
    local bunch_size=16
    local count=0
    local procs=
    local node=
    local p
    echo -n "   " >&2
    for node in $nodes; do
        count=$(( count + 1 ))

        debug " ++++ executing $body $@ on $node" >&2

        echo -n " $node" >&2

        $body $node $@ &

        procs="$procs $!"
        if [ $count -ge $bunch_size ] ; then
            for p in $procs ; do
                wait $p
                rc=$(( rc + $? ))
            done
            procs=
            count=0
            echo
            echo -n "   " >&2
        fi
    done
    for p in $procs ; do
        wait $p
        rc=$(( rc + $? ))
    done
    echo >&2
    return $rc
}

function stop_drts ()
{
    local node=
    local ident=

    argv="$@"
    OPTIND=1
    while getopts ":hN:i:" opt $argv; do
        case $opt in
            h)
                echo "usage: drts: [-h] [-N node [-i identity]" >&2
                return 0
                ;;
            N)
                node=$OPTARG
                shift 2
                ;;
            i)
                ident=$OPTARG
                shift 2
                ;;
            \?)
                ;;
        esac
    done

    if [ -z "$node" ] ; then
        echo "process container (all nodes)" >&2
        node_loop stop_drts_on_node $@
        ec=$?
        if [ $ec -ne 0 ] ; then
            return $ec
        fi
    else
        if [ -z "$ident" ] ; then
            echo "process container $node" >&2
            stop_drts_on_node "$node" $@
            ec=$?
            return $ec
        else
            echo "process container $node-$ident" >&2
            stop_drts_on_node "$node" -i "$ident" $@
            ec=$?
            return $ec
        fi
    fi
}

function status_drts ()
{
    local node=
    local ident=

    argv="$@"
    OPTIND=1
    while getopts ":hN:i:" opt $argv; do
        case $opt in
            h)
                echo "usage: drts: [-h] [-N node [-i identity]" >&2
                return 0
                ;;
            N)
                node=$OPTARG
                shift 2
                ;;
            i)
                ident=$OPTARG
                shift 2
                ;;
            \?)
                ;;
        esac
    done

    if [ -z "$node" ] ; then
        echo "process container (all nodes)" >&2
        node_loop status_drts_on_node $@
        ec=$?
        if [ $ec -ne 0 ] ; then
            echo "$err"
            return $ec
        fi
    else
        if [ -z "$ident" ] ; then
            echo -n "process container $node" >&2
            status_drts_on_node "$node" $@
            ec=$?
            if [ $ec -eq 0 ] ; then
                echo " ok" >&2
            else
                echo " dead" >&2
            fi
            return $ec
        else
            echo "process container $node-$ident" >&2
            status_drts_on_node "$node" -i "$ident" $@
            ec=$?
            if [ $ec -eq 0 ] ; then
                echo " ok" >&2
            else
                echo " dead" >&2
            fi
            return $ec
        fi
    fi
}

function stop_drts_on_node ()
{
    local node=$1 ; shift
    local err
    local ec
    err=$(rexec "$node" "$SDPA_SCRIPT_DIR/stop-drts" $@)
    ec=$?
    if [ $ec -ne 0 ] ; then
        log "W: stop-drts on node $node failed: $ec: $err"
    fi
    return $ec
}

function status_drts_on_node ()
{
    local node=$1 ; shift
    local err
    local ec
    err=$(rexec "$node" "$SDPA_SCRIPT_DIR/status-drts" -s "$@" 2>&1)
    ec=$?
    if [ $ec -ne 0 ] ; then
        if [ -n "$err" ] ; then
            log "W: status-drts on node $node failed: $ec: $err"
        fi
    fi
    return $ec
}

function start_gui ()
{
    local log_url=$(get "log.server.url")
    local log_port=$(echo "$log_url" | grep -o -- ':[[:digit:]]\+' | tr -d ':')
    if [ -z "$log_port" ] ; then
        log "E: log url ($log_url) does not contain a port!"
        return 1
    fi
    local log_host=$(echo "$log_url" | cut -d ':' -f 1)

    local gui_url=$(get "sdpa.gui")
    local gui_port=$(echo "$gui_url" | grep -o -- ':[[:digit:]]\+' | tr -d ':')
    if [ -z "$gui_port" ] ; then
        log "E: gui url ($gui_url) does not contain a port!"
        return 1
    fi
    local gui_host=$(echo "$gui_url" | cut -d ':' -f 1)

    local cmd="ssh -X $gui_host /usr/bin/env LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH\" $SDPA_SCRIPT_DIR/start-gui -s $state_dir -G $gui_port -L $log_port -r $SDPA_HOME"
    log "I: starting gui with $cmd ..."
    $cmd &
}

function stop_gpi ()
{
    log "gpi"
    if ! stop_proc "gpi-space" "gpi-space" ; then
        log "E: could not stop gpi"
        return 1
    else
        return 0
    fi
}

function start ()
{
    local part=$1; shift
    if [ -z "$part" ] ; then
        echo >&2 "start: requires a component to start: kvs"
        return 1
    fi

    start_${part} $@
    rc=$?

    if [ $rc -ne 0 ] ; then
        log "Start of $part failed!"
    fi

    return $rc
}

function stop ()
{
    local parts=$1
    if [ -z "$parts" ] ; then
        parts="drts agg orch gpi kvs"
    else
        shift
    fi

    local p
    local rc=0
    for p in $parts ; do
        if ! stop_$p $@ ; then
            rc=$(( rc + 1 ))
        fi
    done
    return $rc
}

function restart ()
{
    if stop $@ ; then
        sleep 3
        start $@
    else
        log "E: stop failed, not starting!"
        return 1
    fi
}

function program_status ()
{
    local p=$1 ; shift
    local rc=0
    local pid
    pid=$("${SDPA_SCRIPT_DIR}/pidof" "$p")

    if is_proc_alive "$p" "$pid" ; then
        return 0
    else
        return 1
    fi
}

function status_orch ()
{
    is_proc_alive "orchestrator" $(cat "$state_dir/orchestrator.pid" 2>/dev/null)
}

function status_agg ()
{
    status_agent "agent-$(get_master_node)-0"
}

function status_kvs ()
{
    is_proc_alive "fhgkvsd" $(cat "$state_dir/fhgkvsd.pid" 2>/dev/null)
}

function status_gpi ()
{
    program_status "gpi-space"
}

function status ()
{
    local parts=$1
    if [ -z "$parts" ] ; then
        parts="kvs orch agg gpi drts"
    else
        shift
    fi

    # check system status
    local rc=0
    local p
    local err
    for p in $parts ; do
        local cmd
        cmd="status_$p"
        if type "$cmd" >/dev/null 2>&1 ; then
            err=$(status_$p $@)
            ec=$?
            if [ $ec -eq 0 ] ; then
                :
#               log "$p is alive"
            elif [ $ec -eq 23 ] ; then
                log "$p is deactivated"
            else
                if [ -z "$err" ] ; then
                    log "$p is dead"
                else
                    log "$p is dead: $err"
                fi
                rc=$(( rc + 1 ))
            fi
        else
            sdpac status $p
        fi
    done
    return $rc
}

function cancel ()
{
    local jobs="$@"
    if [ -z "$jobs" ] ; then
        if test -e "$state_dir/current_job" ; then
            jobs=$(cat "$state_dir/current_job")
        fi
    fi

    if [ -z "$jobs" ] ; then
        log "E: nothing to cancel"
        return 1
    fi

    local err
    for job in $jobs ; do
        log "I: canceling job $job"
        err=$(sdpac cancel "$job" 2>&1)
        local ec=$?
        if [ $ec -ne 0 ] ; then
            log "E: failed: $ec: $err"
        fi
    done
}

function submit ()
{
    # check system health
    #    if not running:
    #       abort/ask
    #    else
    #       submit
    local net="$1" ; shift
    if [ ! -r "$net" ] ; then
        log "E: submit: cannot read file: $net"
        return 42
    fi
    if [ x"$net" = x"-" ] ; then
        net="/dev/stdin"
    fi
    local output="$1"; shift
    if [ -z "$output" ] ; then
        output=/dev/null
    fi

    log "I: checking system status..."
    if ! status kvs >/dev/null 2>&1 || ! status orch >/dev/null 2>&1 ; then
        log "W: system not completely up and running"
        read -t 15 -n 1 -p "Do you want me to start it? [Y/n] " do_start
        case "$do_start" in
            n|N)
                ;;
            *)
                echo
                if ! start ; then
                    log "E: could not start, please check the logs"
                    return 3
                else
                    sleep 5
                fi
                ;;
        esac
    fi

    log "I: submitting file: $net"
    jobid=$( sdpac submit "$net" 2>&1 )
    if [ $? -ne 0 ] ; then
        log "E: submission failed: $jobid"
        return 4
    else
        log "  + job ($jobid)"
        echo "$jobid" > "$state_dir/current_job"
        sdpac wait "$jobid"
        s=$(sdpac status "${jobid}")
        log "    $jobid -> $s"
        s=$(echo "$s" | tr 'A-Z' 'a-z')
        case "$s" in
            *finish*)
                log "I: job finished"
                ;;
            *fail*)
                log "E: job failed"
                ;;
            *cancel*)
                log "E: job canceled"
                ;;
            *)
                log "W: unknown state: $s"
                ;;
        esac
        sdpac -o "$output" --force results "$jobid"
        sdpac delete "${jobid}"
        if [ $? -eq 0 ] ; then
            echo "  - job ($jobid)"
        fi
    fi
}

function configure()
{
    test -e "$state_dir/sdpa.env" && source "$state_dir/sdpa.env"
}

function on_valid_host ()
{
    local host="$(hostname -s)"
    if test -r "$state_dir/nodefile" ; then
        if grep -q -e "^$host" "$state_dir/nodefile" ; then
            return 0
        else
            #log "W: your hostname ($host) does not match any in $state_dir/nodefile"
            return 1
        fi
    else
        log "E: no nodefile present"
        return 2
    fi
    return 1
}

function get_master_node()
{
    if test -r "$state_dir/nodefile" ; then
        head -n 1 "$state_dir/nodefile"
    else
        return 1
    fi
}

function on_master_node ()
{
    if test -r "$state_dir/nodefile" ; then
        local master=$( head -n 1 "$state_dir/nodefile" )
        if [ "$master" = "$(hostname -s)" ] ; then
            return 0
        fi
        if [ "$master" = "$(hostname -f)" ] ; then
            return 0
        fi
    else
        log "E: no nodefile present"
    fi
    return 1
}

##########################################################
#                                                        #
#          S C R I P T     B E H A V I O R               #
#                                                        #
##########################################################

if [ "$1" = "help" ] ; then
    shift
    help $@
    exit $?
fi

if [ "$1" = "version" ] ; then
    shift
    sdpac --version
    exit $?
fi

if [ "$1" = "-s" ] ; then
    shift
    state_dir="$1"; shift
    if [ -z "$state_dir" ] ; then
        log "E: empty state dir"
        exit 1
    fi
    export SDPA_STATE_DIR="$state_dir"
fi

if [ "$1" = "-c" ] ; then
    shift
    config_file="$1"; shift
    if [ -z "$config_file" ] ; then
        log "E: empty config file"
        exit 1
    fi
    export SDPA_CONFIG="config_file"
fi

if [ "$1" = "setup" ] ; then
    shift
    setup $@
    exit $?
fi

if setup_required ; then
    if setup ; then
        log "I: setup complete"
    else
        rc=$?
        log E: setup was unsuccessful: $rc
        exit $rc
    fi
fi

if [ "$1" = "init" ] ; then
    shift
    if ! initialize $@; then
        log "E: could not initialize!"
        exit 1
    else
        exit 0
    fi
fi

if [ "$1" = "gui" ] ; then
    start_gui
    exit $?
fi

function sigterm()
{
    trap sigterm TERM
}
trap sigterm TERM

function require_state ()
{
    if ! on_valid_host ; then
#    log "W: you are executing 'sdpa' on an invalid host!"
#    log "W: this might not be what you want"
#    log "I: please run 'sdpa init' on the master node first!"
        :
    fi

    if ! configure ; then
        log "E: configure() failed"
        exit $?
    fi
}

case "$1" in
    start)
        require_state
        shift
        start $@
        ;;
    stop)
        require_state
        if ! on_master_node ; then
            log "E: not on master node"
            exit 1
        fi
        shift
        stop $@
        ;;
    restart)
        require_state
        if ! on_master_node ; then
            log "E: not on master node"
            exit 1
        fi
        shift
        restart $@
        ;;
    status)
        require_state
        if ! on_master_node ; then
            log "E: not on master node"
            exit 1
        fi
        shift
        status $@
        ;;
    cleanup)
        if status >/dev/null 2>&1 ; then
            echo "E: still running!" >&2
            exit 1
        else
            cleanup
        fi
        ;;
    cancel)
        require_state
        shift
        cancel $@
        ;;
    submit)
        require_state
        shift
        submit $@
        ;;
    help)
        help
        ;;
    gui)
        start_gui
        ;;
    config)
        dump_config
        ;;
    load)
        if test -f "$state_dir/sdpa.env" ; then
            echo source "$state_dir/sdpa.env"\;
        fi
        ;;
    unload-modules)
        require_state
        if ! on_master_node ; then
            log "E: not on master node"
            exit 1
        fi
        shift
        restart drts
        ;;
    boot)
        shift
        "${SDPA_SCRIPT_DIR}/start-sdpa" -S "$state_dir" -F "$config_file" "$@"
        ;;
    selftest)
        shift
        "${SDPA_SCRIPT_DIR}/sdpa-selftest" "${@}"
        ;;
    '')
        help
        ;;
    *)
        echo "E: unknown command: $1, try '$0 help'" >&2
        exit 1
        ;;
esac
