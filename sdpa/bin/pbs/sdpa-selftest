#!/bin/bash

sdpa_home=
verbose=false
state_dir=

while getopts ":hvH:s:" opt; do
    case $opt in
        h)
            usage
            exit 0
            ;;
        v)
            verbose=true
            ;;
        H)
            sdpa_home="$OPTARG"
            ;;
        s)
            state_dir="${OPTARG}"
            ;;
        \?)
            echo "invalid option: -$OPTARG" >&2
            echo "try: $0 -h" >&2
            exit 1
            ;;
    esac
done

if [ -z "$sdpa_home" ] ; then
    echo >&2 "sdpa home is empty, please specify -H"
    exit 4
fi

if [ -z "${state_dir}" ]
then
  echo >&2 "state directory is not set, please specify -s"
  exit 4
fi

. "${sdpa_home}/etc/sdpa/sdpa.env"

function log_info ()
{
    echo -e >&2 "[I] (selftest): $@"
}

function log_error ()
{
    echo -e >&2 "[E] (selftest): $@"
}

function require_executable ()
{
    local name="${1}" ; shift
    local bin=$(which "$name")

    if ! test -x "$bin" ; then
        log_error "executable '$name' not found"
        exit 2
    fi
}

function require_readable ()
{
    local name="${1}" ; shift

    if ! test -r "$name" ; then
        log_error "file '$name' not readable"
        exit 2
    fi
}

runtime_started=false
function cleanup ()
{
    if $runtime_started
    then
        sdpa stop -s "${state_dir}"
    fi
    rm -rf "${builddir}"
}
builddir=$(mktemp -d)
mkdir -p "${builddir}"
trap cleanup EXIT

require_readable "${SDPA_HOME}/share/sdpa/make/common.mk"
require_readable "${SDPA_HOME}/libexec/sdpa/apps/selftest/selftest.xml"
require_executable pnetc
require_executable pnetput
require_executable pnetget

challenge=$$

make+=( make -f "${SDPA_HOME}/share/sdpa/make/common.mk" )
make+=( MAIN=selftest )
make+=( XML=selftest.xml )
make+=( PUT_PORT=\'challenge=\"$challenge\"\' )
make+=( BUILDDIR="${builddir}" )
make+=( LIB_DESTDIR="${builddir}" )
make+=( -C "${SDPA_HOME}/libexec/sdpa/apps/selftest" )

log_info "+ compiling selftest..."

"${make[@]}" lib install put >> "${builddir}/compile.log"
ec=$?
if [ $ec -ne 0 ]
then
    log_error "+ compilation failed"
    cat "${builddir}/compile.log"
    exit $ec
fi

log_info "+ booting runtime system on: $(hostname -s)"

echo "$(hostname -s)" > "${builddir}/hostfile"

err=$(sdpa stop -s "${state_dir}" 2>&1)

runtime_started=true
sdpa boot -s "${state_dir}" -M -f "${builddir}/hostfile" -A "${builddir}" work:1 > "${builddir}/boot.log" 2>&1
ec=$?
if [ $ec -ne 0 ] ; then
    log_error "++ boot failed: $err"
    cat "${builddir}/boot.log"
    exit $ec
fi

expected_response="sdpa.response.$challenge"

log_info "++ submitting job..."
sdpa submit -s "${state_dir}" \
  "${builddir}/selftest.pnet.put" "${builddir}/result.pnet"
if [ $? -ne 0 ] ; then
  log_error "++ selftest could not be submitted/executed"
  exit 8
fi

response=$(pnetget < "${builddir}/result.pnet" --type=output response | sed -e 's/^"//g' -e 's/"$//g')
if [ x"$response" != x"$expected_response" ] ; then
    log_error "++ response: '$response' does not match expected response: '$expected_response'"
else
    log_info "++ got correct response"
fi

if [ -z "$USER" ] ; then
    greeting="You-Know-Who"
else
    greeting="user $USER"
fi

sdpa stop -s "${state_dir}" >/dev/null 2>&1
runtime_started=false

log_info "+ Congratulations $greeting, your installation is working!"
