#!/bin/bash

if [ -z "$SDPA_HOME" ] ; then
    echo >&2 "SDPA_HOME is not set"
fi

. "${SDPA_HOME}/etc/sdpa/sdpa.env"

function log_info ()
{
    echo -e >&2 "[I] (selftest): $@"
}

function log_error ()
{
    echo -e >&2 "[E] (selftest): $@"
}

function require_executable ()
{
    local name="${1}" ; shift
    local bin=$(which "$name")

    if ! test -x "$bin" ; then
        log_error "executable '$name' not found"
        exit 2
    fi
}

function require_readable ()
{
    local name="${1}" ; shift

    if ! test -r "$name" ; then
        log_error "file '$name' not readable"
        exit 2
    fi
}

log_info "performing self-test"

xml="$SDPA_HOME/libexec/sdpa/apps/selftest/selftest.xml"
require_readable "$xml"

require_executable pnetc
require_executable sdpac
require_executable pnetput
require_executable pnetget

job_desc=$(mktemp)
old_trap=$(trap -p EXIT)
trap "rm -f $job_desc" EXIT

function sigterm()
{
    trap sigterm TERM
}
trap sigterm TERM

log_info "building job description..."
challenge=$(date +%s | md5sum | awk '{print $1}')
if [ $? -ne 0 ] ; then
    challenge="dummy"
fi

expected_response="sdpa.response.$challenge"

if ! cat "$xml" | pnetc | pnetput -p challenge=\"$challenge\" > "$job_desc" ; then
    log_error "could not generate job description and place tokens"
    exit 5
fi

tmpnodes=$(mktemp)
echo "$(hostname -s)" > "${tmpnodes}"

runtime_started=false
cleanup()
{
    if $runtime_started
    then
        sdpa stop >/dev/null 2>&1
        runtime_started=false
    fi
    if [ -n "$tmpnodes" ]
    then
        rm -f "${tmpnodes}"
    fi
}
trap cleanup EXIT TERM INT

log_info "(re-)starting SDPA..."

err=$(sdpa stop 2>&1)

runtime_started=true
err=$(sdpa boot -M -f "${tmpnodes}" -A "${SDPA_HOME}/libexec/sdpa/apps/selftest/modules" work:1 2>&1)
ec=$?
if [ $ec -ne 0 ] ; then
    sdpa stop >/dev/null 2>&1
    runtime_started=false
    log_error "restart failed: $err"
    exit $ec
fi

err=$(sdpa status 2>&1)
ec=$?
if [ $ec -ne 0 ] ; then
    sdpa stop >/dev/null 2>&1
    runtime_started=false
    log_error "status failed (may indicate license problems): $err"
    exit $ec
fi

log_info "computing response for challenge: $challenge"

log_info "submitting job..."
job_id=$(sdpac submit "$job_desc")
log_info "JOB-ID: $job_id"

walltime=120
log_info "waiting at most $walltime seconds for job to return..."
job_state=42
for ((i=0 ; i < $walltime ; ++i)) ; do
    sleep 1
    job_status=$(sdpac status "$job_id")
    if echo "$job_status" | grep -q -i -e 'finished' ; then
        log_info "job has finished"
        job_state=0
        break
    elif echo "$job_status" | grep -q -i -e 'failed' ; then
        log_error "job has failed"
        job_state=1
        break
    elif echo "$job_status" | grep -q -i -e 'canceled' ; then
        log_error "job has been canceled"
        job_state=2
        break
    fi
done

if [ "$job_state" -ne 0 ] ; then
    log_error "self test job could not be executed!"
    sdpa stop
    exit 8
fi

log_info "I: retrieving results"
if ! sdpac --force -o "$job_desc" results "$job_id" 2>/dev/null ; then
    log_error "could not retrieve results"
    rm "$job_desc"
    sdpa stop
    exit 6
fi

if ! sdpac delete "$job_id" ; then
    log_error "could not delete job"
    rm "$job_desc"
    sdpa stop
    exit 7
fi

response=$(pnetget < "$job_desc" --type=output response | sed -e 's/^"//g' -e 's/"$//g')
if [ x"$response" != x"$expected_response" ] ; then
    log_error "response: '$response' does not match expected response: '$expected_response'"
else
    log_info "got correct response"
fi

if [ -z "$USER" ] ; then
    greeting="You-Know-Who"
else
    greeting="user $USER"
fi

rm "$job_desc"

sdpa stop >/dev/null 2>&1
runtime_started=false

log_info "Congratulations $greeting, your SDPA installation is working!"
