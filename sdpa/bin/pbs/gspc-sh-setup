#!/bin/bash
#
#  this file is supposed to be sourced:
#
#    . $(gspc --exec-path)/gspc-sh-setup
#

################################################################################
#                                                                              #
#                      Common Variables                                        #
#                                                                              #
################################################################################

GSPC_COLOR_BLACK='\e[0;30m'
GSPC_COLOR_RED='\e[0;31m'
GSPC_COLOR_GREEN='\e[0;32m'
GSPC_COLOR_YELLOW='\e[0;33m'
GSPC_COLOR_BLUE='\e[0;34m'
GSPC_COLOR_PURPLE='\e[0;35m'
GSPC_COLOR_CYAN='\e[0;36m'
GSPC_COLOR_WHITE='\e[0;37m'
GSPC_COLOR_OFF='\e[0m'

################################################################################
#                                                                              #
#                        Log functions                                         #
#                                                                              #
################################################################################

function gspc_is_verbose_enabled ()
{
    local level=1
    if [ -n "$1" ] ; then
        level="$1"
    fi

    if [ -n "$GSPC_VERBOSE" ]
    then
        if [ $GSPC_VERBOSE -ge $level ]
        then
            return 0
        fi
    fi
    return 1
}

function gspc_isatty()
{
    local fd="$1" ; shift
    if readlink -f "/proc/$$/fd/$fd" | grep -q pts ; then
        return 0
    else
        return 1
    fi
}

function gspc_is_color_enabled ()
{
    local which="${1:?}" ; shift
    local fd="${1:?}" ; shift

    # see gspc-config why this guard has been placed here
    if [ -n "$GSPC_LOG_FROM_CONFIG" ] ; then
        mode=auto
    else
        mode=$(gspc config --get color."${which}")
    fi

    case "$mode" in
        on)
            return 0
            ;;
        off)
            return 1
            ;;
        ''|auto)
            if gspc_isatty $fd ; then
                return 0
            else
                return 1
            fi
            ;;
        *)
            echo >&2 "gspc: invalid config color mode: '$mode'"
            return 0
            ;;
    esac
}

function gspc_log_impl ()
{
    local level="$1"; shift
    local component="$1" ; shift

    level_id='T'
    s_color=""
    e_color=""

    if gspc_is_color_enabled log 2 ; then
        color_trace=""
        color_debug=""
        color_info="$GSPC_COLOR_CYAN"
        color_warn="$GSPC_COLOR_YELLOW"
        color_error="$GSPC_COLOR_RED"
        e_color="$GSPC_COLOR_OFF"
    fi

    case "$level" in
        trace)
            s_color="$color_trace"
            level_id=T
            ;;
        debug)
            s_color="$color_debug"
            level_id=D
            ;;
        info)
            s_color="$color_info"
            level_id=I
            ;;
        warn)
            s_color="$color_warn"
            level_id=W
            ;;
        error)
            s_color="$color_error"
            level_id=E
            ;;
        *)
            s_color=""
            ;;
    esac
    echo -e >&2 "${s_color}[${level_id}] ($component): $@${e_color}"
}

function gspc_log_trace ()
{
    if gspc_is_verbose_enabled 3 ; then
        gspc_log_impl trace "$@"
    fi
}

function gspc_log_debug ()
{
    if gspc_is_verbose_enabled 2 ; then
        gspc_log_impl debug "$@"
    fi
}

function gspc_log_info ()
{
    if gspc_is_verbose_enabled 1 ; then
        gspc_log_impl info "$@"
    fi
}

function gspc_log_warn ()
{
    gspc_log_impl warn "$@"
}

function gspc_log_error ()
{
    gspc_log_impl error "$@"
}

################################################################################
#                                                                              #
#                        Utility functions                                     #
#                                                                              #
################################################################################

function gspc_abspath ()
{
    case "${1:0:1}" in
        /)
            echo "$1"
            ;;
        *)
            echo $(readlink -m "$PWD/$1")
            ;;
    esac
}

function gspc_call_editor ()
{
    local editor=()
    editor=( $(gspc config --get core.editor) )
    if [ $? -ne 0 -o -z "${editor}" ] ; then
        editor=("${EDITOR:=/usr/bin/vi}")
    fi
    "${editor[@]}" "$@"
}

function gspc_prepend_path ()
{
    local var="$1"; shift
    local val=$(eval echo \$${var})
    for v ; do
        val=$(echo "$val" | sed "s,:$v:,:,g")
        val=$(echo "$val" | sed -e "s,^$v:,,g")
        val=$(echo "$val" | sed -e "s,:$v\$,,g")
        val="$v:$val"
    done
    eval "$var=$val"
}

function gspc_require_gspc_dir ()
{
    if [ -z "$GSPC_DIR" ]
    then
        gspc_log_error core "GSPC_DIR is not set"
        exit 1
    fi

    if [ ! -d "$GSPC_DIR" ]
    then
        gspc_log_error core "GSPC_DIR ('$GSPC_DIR') is not accessible"
        exit 1
    fi

    return 0
}

function gspc_atomic ()
{
    local prev_int=
    local prev_term=

    prev_int=$(trap -p INT)
    prev_term=$(trap -p TERM)

    trap '' INT TERM
    "$@"
    ec=$?

    $prev_int
    $prev_term
    return $ec
}
