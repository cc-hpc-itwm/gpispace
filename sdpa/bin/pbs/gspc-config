#!/bin/bash

GSPC_DOC_SHORT_DESCRIPTION="get/set config values"
GSPC_IMPORTANT_API_COMMAND=true

. $(gspc --exec-path)/gspc-sh-setup

function usage()
{
    cat <<EOF
usage: config [-h|--help] [options]

Which config file to use:

   --global              use the users global settings
   --system              use the system settings
   --local               use the local settings
   -f --file <file>      use the given file

What to do:

   --get key             retrieves a given key
   --set key value       sets the key to the given value
   --del key             removes the given key
   -e --edit             edit the given file
EOF
}

system_config_file="/etc/gspc.rc"
global_config_file="$HOME/.gspc.rc"
if [ -n "$GSPC_DIR" ] ; then
    local_config_file="$GSPC_DIR/gspc.rc"
else
    local_config_file=""
fi
config_file="${local_config_file}"

files_to_get_from=(config_file local_config_file global_config_file system_config_file)

function get_config_value ()
{
    local key="${1:?}"; shift

    for var in ${files_to_get_from[@]} ; do
        file=$(eval echo \$${var})
        if [ -z "$file" ] ; then continue ; fi
        if [ -r "$file" ] ; then
            val=$(fhgcfg -f "$file" -g "$key" 2>/dev/null)
            if [ -n "$val" ] ; then
                echo "$val"
                return 0
            fi
        fi
    done

    return 1
}

if [ $# -eq 0 ] ; then usage ; exit 1 ; fi

action=""

TEMP=`getopt -o hef: --long help,global,system,local,file:,get,set,del,list,edit -n 'gspc' -- "$@"`

if [ $? != 0 ] ; then echo >&2 "try '-h' or '--help'. Terminating..." ; exit 1 ; fi

eval set -- "$TEMP"

while true ; do
    case "$1" in
        -h|--help) usage; exit 0 ;;
        -f|--file)
            config_file="$2"
            files_to_get_from=(config_file)
            shift 2
            ;;
        --system)
            config_file="$system_config_file"
            files_to_get_from=(config_file)
            shift
            ;;
        --global)
            config_file="$global_config_file"
            files_to_get_from=(config_file)
            shift
            ;;
        --local)
            if [ -n "$local_config_file" ] ; then
                config_file="${local_config_file}"
            else
                gspc_log_error config "GSPC_DIR not set"
                exit 1
            fi
            files_to_get_from=(config_file)
            shift
            ;;
        --get)
            [ -z "$action" ] || {
                gspc_log_error config "only one action allowed!"
                exit 1
            }
            action="get"
            shift
            ;;
        --set)
            [ -z "$action" ] || {
                gspc_log_error config "only one action allowed!"
                exit 1
            }
            action="set"
            shift
            ;;
        --del)
            [ -z "$action" ] || {
                gspc_log_error config "only one action allowed!"
                exit 1
            }
            action="del"
            shift
            ;;
        -e|--edit)
            [ -z "$action" ] || {
                gspc_log_error config "only one action allowed!"
                exit 1
            }
            action="edit"
            shift
            ;;
        --list)
            [ -z "$action" ] || {
                gspc_log_error config "only one action allowed!"
                exit 1
            }
            action="list"
            shift
            ;;
        --) shift; break ;;
        *) gspc_log_error config "Internal error on argument: '$1'"; exit 1 ;;
    esac
done

if [ -z "$action" ] ; then
    usage
    exit 1
fi

case "$action" in
    get)
        if [ $# -lt 1 ] ; then
            gspc_log_error config "get: invalid number of arguments"
            exit 1
        fi
        get_config_value "$1" "$2"
        exit $?
        ;;
    set)
        if [ $# -lt 2 ] ; then
            gspc_log_error config "set: invalid number of arguments"
            exit 1
        fi
        if [ -z "$config_file" ] ; then
            config_file="$global_config_file"
        fi

        path_to_file=$(dirname "$config_file")
        if [ ! -d "${path_to_file}" ]
        then
            gspc_log_trace config mkdir -p "${path_to_file}"
            mkdir -p "${path_to_file}"
        fi

        gspc_log_trace config fhgcfg -f "$config_file" -a "$1" -v "$2"
        fhgcfg -f "$config_file" -a "$1" -v "$2"
        ;;
    del)
        if [ $# -lt 1 ] ; then
            gspc_log_error config "del: invalid number of arguments"
            exit 1
        fi
        if [ -z "$config_file" ] ; then
            config_file="$global_config_file"
        fi
        gspc_log_trace config fhgcfg -f "$config_file" -d "$1"
        fhgcfg -f "$config_file" -d "$1"
        ;;
    list)
        for ((i=((${#files_to_get_from[@]}-1)); i >= 0 ; i--)) ; do
            var=${files_to_get_from[$i]}
            file=$(eval echo \$${var})
            if [ -z "$file" ] ; then continue ; fi
            if [ -r "$file" ] ; then
                cat "$file"
            fi
        done | fhgcfg -f- -l 2>/dev/null
        ;;
    edit)
        if [ -z "$config_file" ] ; then
            config_file="$global_config_file"
        fi
        gspc_call_editor "$config_file"
        ;;
    *)
        gspc_log_error config "invalid action: '$action'"
        exit 1
        ;;
esac
