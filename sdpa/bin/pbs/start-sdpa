#!/bin/bash

DEFAULT_LOG_PORT="$(( (65535 - 30000 + $(id -u) * 2) % 65535 + 1024 + 0))"
DEFAULT_GUI_PORT="$(( (65535 - 30000 + $(id -u) * 2) % 65535 + 1024 + 1))"
log_url="$(hostname -s):${DEFAULT_LOG_PORT}"
gui_url="$(hostname -s):${DEFAULT_GUI_PORT}"

function usage ()
{
    cat >&2 <<EOF
usage: $(basename $0) [options]

  -h: this help
  -v: be verbose
  -A path: add a path to the list of application search paths
  -f: node file to use
  -S: state directory to use
  -m: amount of gpi memory to use
  -M: disable use of the memory layer
  -s: default amount of shared memory to use (=0)
  -d: do not delete logfiles
  -C: capability specification
  -G: number of segments
  -y: Socket file to communicate with the virtual memory manager
  -T: timeout in seconds for virtual memory manager to start
  -P: use this port for the virtual memory manager

  -l: log url (=${log_url})
  -g: gui url (=${gui_url})

        format:
           <CAP>[+CAP1...][#socket][:N[xM][,shm]]

        examples:
           INIT:1x1,0
              exactly *one* INIT worker

           LOAD:2,16*2**20
              2 LOAD worker/node

           WRITE:2x4,16*2**20
              2 WRITE workers/node but on at most 4 nodes

           WRITE+LOAD:2
              2 workers/node with capabilities WRITE *and* LOAD
EOF
}

# catch CTRL-C and qdel the job
on_ctrlC()
{
        echo >&2 "Canceled..."
        "${sdpa}" -s "${state_dir}" stop
        exit 0
}

log()
{
    echo >&2 "$*"
}

info()
{
    log "I: $*"
}

warn()
{
    log "W: $*"
}

error()
{
    ec=$1; shift
    log "E: $*"
    exit $ec
}

assert_not_empty()
{
    local var="$1"; shift
    local val=$(eval echo "\${$var}")

    if [ -z "$val" ]
    then
        error 2 "'${var}' must not be empty"
    fi
}

rexec_ssh_opts="-q -x -T -n -C -4 -o CheckHostIP=no -o StrictHostKeyChecking=no"

# helper function to execute something remotely
function rexec ()
{
    local node="$1"; shift
    local err
    local rc
    local cmd="ssh ${rexec_ssh_opts} $node /usr/bin/env LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH\" $@"
    err=$($cmd </dev/null 2>&1)
    rc=$?
    if [ $rc -ne 0 ] ; then
        echo "$err" >&2
        return $rc
    else
        if [ -n "$err" ] ; then
            echo "$err"
        fi
        return 0
    fi
}

function rexec_with_startup_messages()
{
  local node="${1}"; shift
  local target_var="${1}"; shift
  # todo: use local filesystem on remote host, not shared
  mkdir -p "${state_dir}/fifos"
  local command="ssh ${rexec_ssh_opts} ${node} \
    /usr/bin/env LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH\" \
      ${sdpa_home}/bin/start-and-fork \
       --fifo-directory \"${state_dir}/fifos\" \
       --end-sentinel-value OKAY \
       --startup-messages-fifo-option --startup-messages-fifo \
       \
       ${@}"

  local startup_messages_raw=$(${command})
  local ec=${?}

  local old_IFS=${IFS}
  IFS=$'\n'
  eval "${target_var}=(${startup_messages_raw})"
  IFS=${old_IFS}

  return ${ec}
}

parse_capability()
{
    cap_spec="$1"; shift

    cap_spec_regex='^[^:#]+(#[0-9]+)?(:[0-9]+(x[0-9]+)?(,[^,]+)?)?$'

    if ! echo "$cap_spec" | grep -q -E "$cap_spec_regex" ; then
        error 1 "Invalid capability specification: $cap_spec"
    fi

    num_per_node=${def_num_proc}
    max_nodes=0
    shm_size="$def_shm_mem"

    capability_with_socket=$(echo "$cap_spec" | cut -d: -f1)
    capability=$(echo "$capability_with_socket" | cut -d# -f1)
    socket=$(echo "$capability_with_socket" | cut -s -d# -f 2)
    rest=$(echo "$cap_spec" | cut -s -d: -f 2)
    if [ -n "$rest" ] ; then
        amount_spec=$(echo "$rest" | cut -d, -f 1)
        rest=$(echo "$rest" | cut -s -d, -f 2-)
        num_per_node=$(echo "$amount_spec" | cut -dx -f 1)

        max_nodes=$(echo "$amount_spec" | cut -s -dx -f 2)
        if [ $num_per_node -eq 0 ] ; then
            warn "Invalid number of workers per node in capability specification!"
            warn "          input: $cap_spec"
            warn "   num_per_node: $num_per_node"
            error 1 "positive integer expected"
        fi
        if [ -z $max_nodes ] ; then
            max_nodes=0
        fi

        if [ -n "$rest" ] ; then
            shm_size=$(echo "$rest" | cut -d, -f 1)
        fi
    fi

    if [ -z $socket ] ; then
        socket=-1
    fi

    shm_size=$(( $shm_size ))

    if [ -z "${socket}" ]
    then
        socket=-1
    fi

    echo "$capability $num_per_node $max_nodes $shm_size $socket"
    return 0
}

# wait_for_port_on_host retries host port
function wait_for_port_on_host ()
{
    local retries="${1}"; shift
    local host="${1}"; shift
    local port="${1}"; shift

    until [ ${retries} -eq 0 ]
    do
        if ${check_port} -z "${host}" "${port}" </dev/null
        then
            return 0
        else
            sleep 1
            retries=$((retries - 1))
        fi
    done

    return 1
}

function wait_for_process ()
{
    local retries="${1}"; shift
    local name="${1}"; shift
    local kvs_host="${1}"; shift
    local kvs_port="${1}"; shift

    local host_port=()

    until [ $retries -eq 0 ]
    do
        host_port=( $("${sdpa_home}/bin/fhgkvsc" --host "${kvs_host}" --port "${kvs_port}" -g p2p.peer | grep -B 2 "$name" | head -n 2 | awk '{print $3}') )
        if [ ${#host_port[@]} -eq 2 ]
        then
            if wait_for_port_on_host ${retries} "${host_port[0]}" "${host_port[1]}"
            then
                return 0
            else
                return 2
            fi
        else
            sleep 1
            retries=$((retries - 1))
        fi
    done

    return 1
}

# Execute function on_ctrlC() receiving SIGINT signal
#
trap 'on_ctrlC' SIGINT

nodefile=
verbose=false
state_dir="$HOME/.sdpa/state"
gpi_enabled=true
delete_logfiles=true
app_path=
number_of_groups=1
network_retries=15
time_to_wait_per_vmem_socket_in_seconds=60

# guess memory sizes
tot_mem=$(( $(grep ^MemTotal: /proc/meminfo | awk '{print $2}') * 1024 ))
avl_mem=$(( ($tot_mem * 80) / 100 ))
gpi_mem=0
gpi_socket=
def_shm_mem=0
def_num_proc=1
vmem_startup_timeout=
vmem_port=

if [ ${#@} -eq 0 ] ; then
    usage
    exit 0
fi

shiftcount=0
while getopts ":hvnf:S:m:s:C:p:MA:dG:l:g:H:y:T:P:" opt; do
    case $opt in
        h)
            usage
            exit 0
            ;;
        v)
            verbose=true
            shiftcount=$((shiftcount + 1))
            ;;
        f)
            nodefile="$OPTARG"
            assert_not_empty nodefile
            shiftcount=$(( shiftcount + 2 ))
            ;;
        S)
            state_dir="$OPTARG"
            assert_not_empty state_dir
            shiftcount=$(( shiftcount + 2 ))
            ;;
        m)
            gpi_mem=$(( $OPTARG ))
            shiftcount=$(( shiftcount + 2 ))
            ;;
        s)
            def_shm_mem=$(( $OPTARG ))
            shiftcount=$(( shiftcount + 2 ))
            ;;
        C)
            new_cap=$(parse_capability "$OPTARG")
            capabilities=( "${capabilities[@]}" $new_cap )
            shiftcount=$(( shiftcount + 2 ))
            ;;
        p)
            def_num_proc=$(( $OPTARG ))
            shiftcount=$(( shiftcount + 2 ))
            ;;
        M)
            gpi_enabled=false
            shiftcount=$(( shiftcount + 1 ))
            ;;
        A)
            if [ -n "${app_path}" ] ; then
                app_path="${app_path}:$OPTARG"
            else
                app_path="$OPTARG"
            fi
            shiftcount=$(( shiftcount + 2 ))
            ;;
        d)
            delete_logfiles=false
            shiftcount=$((shiftcount + 1))
            ;;
        G)
            number_of_groups=$OPTARG
            shiftcount=$((shiftcount + 2))
            ;;
        y)
            gpi_socket="${OPTARG}"
            assert_not_empty gpi_socket
            shiftcount=$((shiftcount + 2))
            ;;
        T)
            vmem_startup_timeout=$(( $OPTARG ))
            shiftcount=$((shiftcount + 2))
            ;;
        P)
            vmem_port=$(( $OPTARG ))
            shiftcount=$((shiftcount + 2))
            ;;
        l)
            log_url="$OPTARG"
            assert_not_empty log_url
            shiftcount=$((shiftcount + 2))
            ;;
        g)
            gui_url="$OPTARG"
            assert_not_empty gui_url
            shiftcount=$((shiftcount + 2))
            ;;
        H)
            sdpa_home="$OPTARG"
            assert_not_empty sdpa_home
            shiftcount=$((shiftcount + 2))
            ;;
        \?)
            echo >&2 "invalid option: $OPTARG"
            exit 1
            ;;
    esac
done

shift $shiftcount

for arg ; do
    new_cap=$(parse_capability "$arg")
    capabilities=( "${capabilities[@]}" $new_cap )
done

# sanity checks

if [ -z "$nodefile" ] ; then
    error 1 "nodefile is missing (-f)"
fi

if [ -z "$sdpa_home" ] ; then
    error 2 "sdpa home is not set, please specify -H"
fi

if $gpi_enabled
then
    if [ -z "${vmem_startup_timeout}" ]
    then
        error 2 "vmem timeout is required (-T)"
    fi
    if [ -z "${vmem_port}" ]
    then
        error 2 "vmem port is required (-P)"
    fi
    if [ -z "${gpi_socket}" ]
    then
        error 2 "vmem socket is required (-y)"
    fi
fi

if [ $number_of_groups -le 0 ] ; then
    error 2 "number of groups must be positive: found: $number_of_groups"
fi

if [ "${nodefile:0:1}" != "/" ]; then
    nodefile="$PWD/$nodefile"
fi

if [ ! -r "$nodefile" ] ; then
    error 2 "Could not read nodefile: $nodefile"
fi

log_host=${log_url%:*}
log_port=${log_url#*:}

gui_host=${gui_url%:*}
gui_port=${gui_url#*:}

hosts=( $(cat "$nodefile" | uniq) )

if [ ${#hosts[@]} -eq 0 ] ; then
    error 1 "hostfile empty"
fi

master=${hosts[0]}
num_hosts=${#hosts[@]}

if [ $number_of_groups -gt $num_hosts ] ; then
    error 2 "number of groups must not be larger than number of hosts: $number_of_groups > $num_hosts"
fi


sdpa="${sdpa_home}/bin/sdpa"
if [ $? -ne 0 ] ; then
    error 2 "could not locate 'sdpa' executable!"
fi

script_start_drts="${sdpa_home}/libexec/sdpa/scripts/start-drts"
if [ ! -x "${script_start_drts}" ] ; then
    error 2 "utility script '${script_start_drts}' is not executable"
fi

check_port=$(which nc 2>/dev/null)
if [ $? -ne 0 ]
then
    check_port=$(which netcat 2>/dev/null)
    if [ $? -ne 0 ]
    then
        error 2 "utility tool 'nc' or 'netcat' could not be found"
    fi
fi

info "using nodefile: $nodefile"

mkdir -p "${state_dir}" || {
    error 2 "could not 'mkdir -p \"${state_dir}\"'"
}
mkdir -p "${state_dir}/log" || {
    error 2 "could not 'mkdir -p \"${state_dir}/log\"'"
}
cp "${nodefile}" "${state_dir}/nodefile" || {
    error 2 "could not 'cp ${nodefile} ${state_dir}/nodefile'"
}

if $delete_logfiles ; then
    find "${state_dir}/log" -type f -delete
fi

log "starting base sdpa components on $master..."
info "sending log events to: ${log_url}"
info "sending execution events to: ${gui_url}"

if $verbose
then
    opt_verbose_flag="-v"
else
    opt_verbose_flag=""
fi

kvs_pid_file="${state_dir}/fhgkvsd.pid"
if [ -s "${kvs_pid_file}" ]
then
  kvs_pid=$(cat ${kvs_pid_file})
  if ! ssh "${master}" "/usr/bin/env bash -c \"\
           if ps --pid ${kvs_pid} -o comm= | grep -q fhgkvsd; then \
             kill -0 ${kvs_pid} 2>/dev/null; \
           fi; \
           \""
  then
    "${sdpa}" -s "${state_dir}" stop
    error 3 "could not start kvs: old process running with pid ${pid}"
  fi
fi

rexec_with_startup_messages ${master} kvs_startup_messages \
  --command "${sdpa_home}/bin/fhgkvsd" \
  --arguments --bind "0" \
  --arguments --port 0
if [ ${?} -ne 0 ] ; then
    "${sdpa}" -s "${state_dir}" stop
    error 3 "could not start kvs"
fi
if [ ${#kvs_startup_messages[@]} != 2 ]; then
  "${sdpa}" -s "${state_dir}" stop
  error 3 "could not start kvs: expected 2 lines of startup messages"
fi
echo ${kvs_startup_messages[0]} > "${kvs_pid_file}"
kvs_host=$(ssh ${master} hostname -f)
kvs_port=${kvs_startup_messages[1]}
echo -n "${kvs_host}" > "${state_dir}/kvs.host"
echo -n "${kvs_port}" > "${state_dir}/kvs.port"
log "I: kvs started at ${kvs_host}:${kvs_port}"

if ! wait_for_port_on_host ${network_retries} "${kvs_host}" "${kvs_port}"
then
    "${sdpa}" -s "${state_dir}" stop
    error 3 "could not start kvs: failed to appear at ${kvs_host}:${kvs_port} after ${network_retries} seconds"
fi

rexec_with_startup_messages ${master} orchestrator_startup_messages \
  --command "${sdpa_home}/bin/orchestrator" \
  --arguments --kvs-host "${kvs_host}" \
  --arguments --kvs-port "${kvs_port}" \
  --arguments -u '0' \
  --arguments -n "orchestrator" \
  --environment LD_LIBRARY_PATH="${LD_LIBRARY_PATH}" \
  --environment FHGLOG_to_server="${log_host}:${log_port}" \
  --environment FHGLOG_level=$($verbose && echo TRACE || echo INFO) \
  --environment FHGLOG_to_file="${state_dir}/log/orchestrator.log"
if [ ${?} -ne 0 ] ; then
    "${sdpa}" -s "${state_dir}" stop
    error 3 "could not start orchestrator"
fi
if [ ${#orchestrator_startup_messages[@]} != 3 ]; then
  "${sdpa}" -s "${state_dir}" stop
  error 3 "could not start orchestrator: expected 3 lines of startup messages"
fi
echo ${orchestrator_startup_messages[0]} > "${state_dir}/orchestrator.pid"
echo ${orchestrator_startup_messages[1]} > "${state_dir}/orchestrator.host"
echo ${orchestrator_startup_messages[2]} > "${state_dir}/orchestrator.port"

wait_for_process ${network_retries} "orchestrator" "${kvs_host}" "${kvs_port}"
ec=$?
if [ $ec -ne 0 ]
then
    "${sdpa}" -s "${state_dir}" stop
    if [ $ec -eq 1 ]
    then
        error 3 "could not start orchestrator, failed to appear after ${network_retries} seconds"
    else
        error 3 "could not start orchestrator, could not connect after ${network_retries} seconds"
    fi
fi

if $gpi_enabled ; then
    # compute memory sizes
    if [ ${gpi_mem} -eq 0 ] ; then
        gpi_mem=$(( avl_mem * 50 / 100 ))
    fi

    info "using SHM mem: ${def_shm_mem} bytes per process (by default)"
    info "using VMEM mem: ${gpi_mem} bytes per node"
    info "starting VMEM on: '${gpi_socket}' with a timeout of $((vmem_startup_timeout)) seconds"

    mkdir -p "${state_dir}/fifos"
    startup_messages_raw=$(${SDPA_HOME}/bin/start-and-fork \
      --fifo-directory "${state_dir}/fifos" \
      --end-sentinel-value OKAY \
      --startup-messages-fifo-option --startup-messages-fifo \
      \
      --command "${sdpa_home}/bin/vmem" \
      --arguments --nodefile "${nodefile}" \
      --arguments --state-directory "${state_dir}" \
      --arguments --gspc-home "${sdpa_home}" \
      --arguments --kvs-host "${kvs_host}" \
      --arguments --kvs-port "${kvs_port}" \
      --arguments --log-host "${log_host}" \
      --arguments --log-port "${log_port}" \
      --arguments --gui-host "${gui_host}" \
      --arguments --gui-port "${gui_port}" \
      --arguments --virtual-memory-port ${vmem_port} \
      --arguments --virtual-memory-socket "${gpi_socket}" \
      --arguments --virtual-memory-per-node "${gpi_mem}" \
      --arguments --virtual-memory-startup-timeout ${vmem_startup_timeout} \
    )
    ec=${?}

    old_IFS=${IFS}
    IFS=$'\n'
    startup_messages=(${startup_messages_raw})
    IFS=${old_IFS}

    if [ ${ec} -ne 0 ]
    then
        "${sdpa}" -s "${state_dir}" stop
        error 3 "could not start vmem"
    fi

    if [ ${#startup_messages[@]} != 1 ]; then
      error 3 "could not start vmem: expected 1 lines of startup messages"
    fi

    vmem_pid=${startup_messages[0]}
    echo "${vmem_pid}" > "$state_dir/vmem.pid"

    for host in $(sort -u "${nodefile}")
    do
      echo -n "I: Checking for virtual memory socket on '${host}' "
      ssh "${host}" "/usr/bin/env bash -c \"\
          for ((i=0; i < $((10 * ${time_to_wait_per_vmem_socket_in_seconds})); ++i)); do \
            if [ ! -e ${gpi_socket} ]; then \
              echo -n .; \
              sleep 0.1; \
             else \
               exit 0;
            fi \
          done; \
          exit 1 \
          \""
      if [ ${?} -ne 0 ]
      then
        echo "FAILED"
        error 3 "could not start virtual memory layer: socket failed to on '${host}' appear after ${time_to_wait_per_vmem_socket_in_seconds} seconds"
      else
        echo "OK"
      fi
    done
fi

# for each capability:
#    for each host
#       - check maximum worker limit, break
#       - start additional workers, up to N

pids=()
max_background_tasks=8

function wait_on_pids ()
{
    local pid=
    local ec=0
    for pid in ${pids[@]} ; do
        wait $pid
        ec+=$?
    done
    pids=()
    return $ec
}

function wait_if_necessary ()
{
    if [ ${#pids[@]} -ge ${max_background_tasks} ] ; then
        wait_on_pids
    fi
}

segment_host_index=()
segment_size=()
segment_master=()

function assign_segments
{
    if [ $number_of_groups -eq 1 ] ; then
        segment_host_index[0]=0
        segment_size[0]=${num_hosts}
        segment_master=("agent-${master}-0")
    else
        local i=
        local hosts_per_group=$(( ${num_hosts} / ${number_of_groups} ))
        local remaining_hosts=$(( ${num_hosts} % ${number_of_groups} ))
        local host=
        local offset=0
        for ((i=0 ; i < $number_of_groups ; ++i)) ; do
            segment_host_index[$i]=${offset}
            segment_size[$i]=${hosts_per_group}
            host=${hosts[$offset]}
            segment_master[$i]="agent-${host}-1"

            offset=$((offset + hosts_per_group))
        done

        # add remaining hosts to last group
        segment_size[$((number_of_groups - 1))]=$((hosts_per_group + remaining_hosts))
    fi
}

function start_agent
{
    local host="$1" ; shift
    local name="$1" ; shift
    local parent="$1" ; shift

    info "starting agent: ${name} on host ${host} with parent ${parent}"

    local agent_startup_messages=()

    rexec_with_startup_messages ${host} agent_startup_messages \
      --command "${sdpa_home}/bin/agent" \
      --arguments --kvs-host "${kvs_host}" \
      --arguments --kvs-port "${kvs_port}" \
      --arguments -u '0' \
      --arguments -n "${name}" \
      --arguments -m "${parent}" \
      --arguments -a "${gui_host}:${gui_port}" \
      $(if $gpi_enabled; then echo --arguments --vmem-socket "${gpi_socket}" ; fi) \
      --environment LD_LIBRARY_PATH="${LD_LIBRARY_PATH}" \
      --environment FHGLOG_to_server="${log_host}:${log_port}" \
      --environment FHGLOG_level=$($verbose && echo TRACE || echo INFO) \
      --environment FHGLOG_to_file="${state_dir}/log/$name.log"
    if [ ${?} -ne 0 ] ; then
      "${sdpa}" -s "${state_dir}" stop
      error 3 "could not start agent ${name}"
    fi
    if [ ${#agent_startup_messages[@]} != 1 ]; then
      "${sdpa}" -s "${state_dir}" stop
      error 1 "could not start agent ${name}: expected 1 lines of startup messages"
    fi
    echo ${agent_startup_messages[0]} > "${state_dir}/${name}.pid"
}

function start_agents
{
    start_agent ${master} "agent-${master}-0" "orchestrator" &
    pids+=( $! )

    if [ ! ${#segment_master[@]} -eq 1 ] ; then
      local i=
      for ((i = 0 ; i < ${#segment_master[@]} ; ++i)) ; do
        host_idx=${segment_host_index[$i]}
        host=${hosts[${host_idx}]}
        name="agent-${host}-1"

        start_agent "${host}" "${name}" "agent-${master}-0" &
        pids+=( $! )
        wait_if_necessary
        ec=$?
        if [ $ec -ne 0 ]
        then
            "${sdpa}" -s "${state_dir}" stop
            error 3 "at least one agent could not be started!"
        fi
      done
    fi
}

function start_workers_for_capability
{
    local segment="$1"      ; shift
    local capability="$1"   ; shift
    local num_per_node="$1" ; shift
    local max_nodes="$1"    ; shift
    local shm_size="$1"     ; shift
    local socket="$1"       ; shift

    human_max="global max: $max_nodes"
    if [ $max_nodes -eq 0 ] ; then
        human_max="unlimited"
    elif [ $max_nodes -eq 1 ] ; then
        human_max="unique"
    fi
    info "starting $capability workers (segment $segment, $num_per_node/host, $human_max, $shm_size SHM)..."

    num_nodes=0
    caps_arg=$(echo "$capability" | tr '+' '\n' | xargs -n1 echo '-C')

    parent=${segment_master[$segment]}
    group_start=${segment_host_index[$segment]}
    group_size=${segment_size[$segment]}
    group_end=$((group_start + group_size))

    local i=
    for ((i=${group_start} ; i < ${group_end} ; ++i)) ; do
        host=${hosts[$i]}

        local name="${capability/[+#.]/_}"

        argv=($opt_verbose_flag)
        argv+=(-c $num_per_node)
        argv+=(-n "$name")
        argv+=(-m "$parent")
        argv+=(-k "${kvs_host}")
        argv+=(-K "${kvs_port}")
        argv+=(-g "${gui_host}:${gui_port}")
        argv+=(-l "${log_host}:${log_port}")
        argv+=($caps_arg)
        argv+=(-s "$state_dir")
        if $gpi_enabled ; then
            argv+=(-M "$shm_size")
            argv+=(-S "$gpi_socket")
        fi
        if [ $socket -ne -1 ] ; then
            argv+=(-N "$socket")
        fi
        if [ -n "${app_path}" ]
        then
            argv+=(-L "${app_path}")
        fi
        argv+=(-H "${sdpa_home}")

        rexec $host "$script_start_drts" "${argv[@]}" &

        pids+=( $! )

        wait_if_necessary
        ec=$?
        if [ $ec -ne 0 ]
        then
            "${sdpa}" -s "${state_dir}" stop
            error 3 "at least one worker could not be started!"
        fi

        num_nodes=$(( num_nodes + 1 ))

        if [ $num_nodes -eq $max_nodes ] ; then
            break
        fi
    done
}

function start_workers
{
    local seg=
    for (( seg=0 ; seg < ${number_of_groups} ; ++seg )) ; do
        sizeof_capstruct=5
        local i=
        for (( i=0 ; i < ${#capabilities[@]} ; i += $sizeof_capstruct )) ; do
            capability=${capabilities[   $(( i+0 )) ]}
            num_per_node=${capabilities[ $(( i+1 )) ]}
            max_nodes=${capabilities[    $(( i+2 )) ]}
            shm_size=${capabilities[     $(( i+3 )) ]}
            socket=${capabilities[       $(( i+4 )) ]}
            start_workers_for_capability $seg "$capability" "$num_per_node" "$max_nodes" "$shm_size" "$socket"
        done
    done
}

assign_segments
start_agents
wait_on_pids
ec=$?
if [ $ec -ne 0 ]
then
    "${sdpa}" -s "${state_dir}" stop
    error 3 "at least one agent could not be started!"
fi

start_workers
wait_on_pids
ec=$?
if [ $ec -ne 0 ]
then
    "${sdpa}" -s "${state_dir}" stop
    error 3 "at least one worker could not be started!"
fi
