#!/bin/bash
### avoid strange behaviour with temporary inconsistency
### on Panasas Filesystems:
###
###     the test -r was sucessful but the source didn't
###     source anything
###
###
# set some default values
state_dir=
logdir=
gui=
kvs_url=
log_url=
debug=false
daemonize=false
bind_addr='0'
name=
master=
pidfile=
force=false
logfile=
verbose=false
sdpa_home=

function usage ()
{
    cat >&2 <<EOF
usage: $(basename "$0") [options]

    -h: print this help
    -v: be verbose
    -f: force: kill still running processes
    -d: debug mode
    -n name (*): name of this agent
    -m master (*): master to connect to
    -g ip:port: gui address
    -k kvs-url: url to the key-value-store
    -D daemonize
    -P pidfile
    -L logdir
    -s state-dir
    -H sdpa-home
EOF
}

while getopts ":hvDfdm:g:l:n:k:L:P:s:H:" opt; do
    case $opt in
        h)
            usage
            exit 0
            ;;
        v)
            verbose=true
            ;;
        f)
            force=true
            ;;
        d)
            debug=true
            ;;
        n)
            name=$OPTARG
            ;;
        m)
            master=$OPTARG
            ;;
        g)
            gui=$OPTARG
            ;;
        l)
            log_url=$OPTARG
            ;;
        k)
            kvs_url=$OPTARG
            ;;
        D)
            daemonize=true
            ;;
        L)
            logdir=$OPTARG
            ;;
        P)
            pidfile=$OPTARG
            ;;
        s)
            state_dir=$OPTARG
            ;;
        H)
            sdpa_home="$OPTARG"
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
    esac
done

if [ -n "${log_url}" ]
then
    export FHGLOG_to_server="${log_url}"
fi

if [ -z "${sdpa_home}" ]
then
    echo >&2 "sdpa-home is empty, please specify -H"
    exit 4
fi

# load state
if test -e "${state_dir}/sdpa.env" ; then
    source "${state_dir}/sdpa.env"
fi

if [ -z "$gui" ]
then
    echo >&2 "gui url is required, please specify -g"
    exit 4
fi

if [ -z "$logdir" ]
then
    logdir="${state_dir}/log"
fi

logprefix="${logdir}/${name}"

if [ -z "$kvs_url" ]
then
    echo >&2 "kvs url is required, please specify -k"
    exit 4
fi

if [ -z "$name" -o -z "$master" ] ; then
    echo "E: I need both, a name and a master!" 2>&1
    usage
    exit 1
fi

function agent_status ()
{
    local name="$1" ; shift
    local sill_running
    still_running=( $(ps -C agent -o pid=) )
    local pids=()

    for p in ${still_running[@]} ; do
        name_opt=$(cat /proc/$p/cmdline | tr '\0' '\n' | grep -A1 -e '^-n$' | tail -n 1)
        if [ "$name_opt" = "$name" ] ; then
            pids+=( $p )
        fi
    done

    if [ ${#pids[@]} -eq 0 ] ; then
        return 1
    else
        echo ${pids[@]}
        return 0
    fi
}

pids=$(agent_status $name)
if [ $? -eq 0 ] ; then
    if [ x"$force" = x"true" ] ; then
        kill -TERM $pids
        sleep 1.5
        kill -KILL $pids &>/dev/null
    else
        echo "W: agent $name still running with pid(s): $pids" >&2
        exit 2
    fi
fi

opts="$opts -n ${name} "
opts="$opts -u ${bind_addr}"
opts="$opts -m ${master}"
opts="$opts -k ${kvs_url}"

if $daemonize && ! $debug ; then
    opts="$opts --daemonize"
fi
if [ -n "$pidfile" ] ; then
    opts="$opts --pidfile $pidfile"
fi
if [ -n "$gui" ]; then
    opts="$opts -a $gui"
fi

cmd="${sdpa_home}/bin/agent $opts"

if $verbose
then
    export FHGLOG_level=TRACE
else
    export FHGLOG_level=INFO
fi

echo >&2 "Running $name on $(hostname -s) with master $master"

if "$debug" ; then
    echo >&2 "running within gdb..."
    gdb -ex run --args ${cmd}
else
    FHGLOG_to_file="${logprefix}.log" exec ${cmd} >"${logprefix}.out" 2>"${logprefix}.err"
fi
