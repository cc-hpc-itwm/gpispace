#!/bin/bash
### avoid strange behaviour with temporary inconsistency
### on Panasas Filesystems:
###
###     the test -r was sucessful but the source didn't
###     source anything
###
###
# set some default values
state_dir=~/.sdpa/state
config_file="~/.sdpa/configs/sdpa.rc"
logdir=
gui=
kvs_url=
debug=false
daemonize=false
bind_addr='0'
name=
master=
pidfile=
force=false
logfile=
backlog=1000

function usage ()
{
    cat >&2 <<EOF
usage: $(basename "$0") [options]

    -h: print this help
    -f: force: kill still running processes
    -d: debug mode
    -n name (*): name of this agent
    -m master (*): master to connect to
    -g ip:port: gui address
    -b N (=$backlog): set the backlog size
    -k kvs-url: url to the key-value-store
    -D daemonize
    -P pidfile
    -L logdir
    -s state-dir
    -F config file
EOF
}

while getopts ":hDfdm:g:b:n:k:L:P:s:F:" opt; do
    case $opt in
        h)
            usage
            exit 0
            ;;
        f)
            force=true
            ;;
        d)
            debug=true
            ;;
        n)
            name=$OPTARG
            ;;
        m)
            master=$OPTARG
            ;;
        g)
            gui=$OPTARG
            ;;
        b)
            backlog=$OPTARG
            ;;
        k)
            kvs_url=$OPTARG
            ;;
        D)
            daemonize=true
            ;;
        L)
            logdir=$OPTARG
            ;;
        P)
            pidfile=$OPTARG
            ;;
        s)
            state_dir=$OPTARG
            ;;
        F)
            config_file=$OPTARG
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
    esac
done


# load state
if test -e "${state_dir}/sdpa.env" ; then
    source "${state_dir}/sdpa.env"
fi

if [ -z "$gui" ]
then
  gui=$(fhgcfg -f "${config_file}" -g sdpa.gui)
fi

if [ -z "$logdir" ]
then
    logdir="${state_dir}/log"
fi

logprefix="${logdir}/${name}"

if [ -z "$kvs_url" ]
then
    kvs_url="$KVS_URL"
fi

if [ -z "$name" -o -z "$master" ] ; then
    echo "E: I need both, a name and a master!" 2>&1
    usage
    exit 1
fi

function agent_status ()
{
    local name="$1" ; shift
    local pids=$(ps aux | grep -v [s]tart-agent | grep "[a]gent.*-n \<$name\>" | awk '{print $2;}')
    if [ -z "$pids" ] ; then
        return 1
    else
        echo $pids
        return 0
    fi
}

pids=$(agent_status $name)
if [ $? -eq 0 ] ; then
    if [ x"$force" = x"true" ] ; then
        kill -TERM $pids
        sleep 1.5
        kill -KILL $pids &>/dev/null
    else
        echo "W: agent $name still running with pid(s): $pids" >&2
        exit 2
    fi
fi

opts="$opts -n ${name} "
opts="$opts -u ${bind_addr}"
opts="$opts -m ${master}"
opts="$opts -k ${kvs_url}"

stateful=$(fhgcfg -f "${config_file}" -g sdpa.stateful -v false)
if [ x"$stateful" = x"true" ] ; then
    if [ ! -d "${state_dir}/agent" ] ; then
        mkdir -p "${state_dir}/agent"
    fi
    opts="$opts -d ${state_dir}/agent"
fi
if $daemonize && ! $debug ; then
    opts="$opts --daemonize"
fi
if [ -n "$pidfile" ] ; then
    opts="$opts --pidfile $pidfile"
fi

cmd="${SDPA_HOME}/bin/agent $opts"

log "Running $name on $(hostname -s) with master $master"

if "$debug" ; then
    log "running within gdb..."
    gdb -ex run --args ${cmd}
else
    FHGLOG_to_file="${logprefix}.log" exec ${cmd} >"${logprefix}.out" 2>"${logprefix}.err"
fi
