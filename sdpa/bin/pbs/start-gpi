#!/bin/bash
### avoid strange behaviour with temporary inconsistency
### on Panasas Filesystems:
###
###     the test -r was sucessful but the source didn't
###     source anything
###
###
cat ~/.sdpa/state/sdpa.env >/dev/null 2>&1

test -r ~/.sdpa/state/sdpa.env && source ~/.sdpa/state/sdpa.env

# set some default values
gpi_bin_path=""
if [ -n "$GPI_PRIV_DIR" ] ; then
    gpi_bin_path="$GPI_PRIV_DIR"
elif [ -r "$HOME/.sdpa/configs/gpi.dir" ] ; then
    gpi_bin_path=$( cat "$HOME/.sdpa/configs/gpi.dir" )
fi

gpi_exe="$(which gpi-space)"
debug=false
mem_size=
gpi_port=
pidfile=
force=false
daemonize=true
kvs_host=
kvs_port=
log_host=
log_port=
verbose=false

function usage ()
{
    cat >&2 <<EOF
usage: $0 [options]

    -h: print this help
    -d gpid directory (=$gpi_bin_path): priviledged binary path for the gpid
    -x gpi-exe (=$gpi_exe): gpi program to use
    -g run within debugger
    -m size: memory size
    -p port: GPI port
    -P pidfile: write pid to this file
    -f: force (always copy binary)
    -D: daemonize
    -k host: kvs host
    -K port: kvs port
    -l host: log host
    -L port: log port
    -v: verbose
EOF
}

while getopts ":hd:x:gm:p:P:fDk:K:l:L:v" opt; do
    case $opt in
	h)
	    usage
	    exit 0
	    ;;
	d)
	    gpi_bin_path=$OPTARG
	    ;;
	x)
	    gpi_exe=$OPTARG
	    ;;
	g)
	    debug=true
	    ;;
	m)
	    mem_size=$OPTARG
	    ;;
	p)
	    gpi_port=$OPTARG
	    ;;
	P)
	    pidfile=$OPTARG
	    ;;
	f)
	    force=true
	    ;;
	D)
	    daemonize=true
	    ;;
	k)
	    kvs_host=$OPTARG
	    ;;
	K)
	    kvs_port=$OPTARG
	    ;;
	l)
	    log_host=$OPTARG
	    ;;
	L)
	    log_port=$OPTARG
	    ;;
	v)
	    verbose=true
	    ;;
	\?)
	    echo "invalid option: -$OPTARG" >&2
	    echo "try: $0 -h" >&2
	    exit 1
	    ;;
    esac
done

if [ -z "$gpi_bin_path" ] ; then
    log "could not deduce GPI_PRIV_DIR, please export GPI_PRIV_DIR or pass via commandline!"
    exit 1
fi

if [ ! -x "${gpi_exe}" ] ; then
    log "Sorry, ${gpi_exe} is not executable"
    exit 1
fi
gpi_bin=$(basename "$gpi_exe")

need_copy=false
if [ ! -x "${gpi_bin_path}/${gpi_bin}" ] ; then
    log "${gpi_bin} does not seem to be installed in $gpi_bin_path"
    need_copy=true
else
    md_inst=$( md5sum "${gpi_bin_path}/${gpi_bin}" | cut -d ' ' -f 1 )
    md_cand=$( md5sum "${gpi_exe}" | cut -d ' ' -f 1 )
    if [ "$md_inst" != "$md_cand" ] ; then
	log "candidate ${gpi_exe} is different than the one in ${gpi_bin_path}"
	need_copy=true
    fi
fi

do_copy=false
if [ $need_copy = "true" -a $force = "true" ] ; then
    do_copy=true
fi
if [ $need_copy = "true" -a $do_copy = "false" ] ; then
    read -t 5 -n 1 -p "Do you want me to copy \"$gpi_exe\" to \"$gpi_bin_path\"? [y/N] " ans
    case "$ans" in
	y|Y)
	    do_copy=true
	    ;;
	*)
	    ;;
    esac
fi

if [ $do_copy = "true" ] ; then
    if [ ! -d "$gpi_bin_path" ] ; then
	tmp=$( mkdir -p "$gpi_bin_path" 2>&1 )
	if [ $? -ne 0 ] ; then
	    log "could not create $gpi_bin_path: $tmp"
	    exit 1
	fi
    fi
    if [ -w "$gpi_bin_path" ] ; then
	test -e "${gpi_bin_path}/${gpi_bin}" && {
	    log "I: creating backup of old ${gpi_bin}"
	    mv -f "${gpi_bin_path}/${gpi_bin}" "${gpi_bin_path}/${gpi_bin}~"
	}
	cp "${gpi_exe}" "${gpi_bin_path}/${gpi_bin}" && {
	    log "I: installed new ${gpi_bin} in ${gpi_bin_path}/${gpi_bin}"
	} || {
	    log "W: could not update ${gpi_bin} in ${gpi_bin_path}/${gpi_bin}"
	}
	chmod ug=rx,o= "${gpi_bin_path}/${gpi_bin}"
    else
	log "W: privileged path $gpi_bin_path does not exist, or i am not allowed to write to it!"
    fi
fi

if [ -x "$gpi_bin_path/$gpi_bin" ] ; then
    cmdline=
    if $debug ; then
	cmdline="gdb -ex run --args $cmdline"
    fi
    cmdline="$cmdline ${gpi_bin_path}/${gpi_bin}"

    if $verbose ; then
	cmdline="$cmdline --log-level TRACE"
    fi
    if $daemonize && ! $debug ; then
	cmdline="$cmdline --daemonize"
    fi
    if test -n "$mem_size" ; then
	cmdline="$cmdline --gpi-mem $mem_size"
    fi
    if test -n "$pidfile" ; then
	cmdline="$cmdline --pidfile $pidfile"
    fi
    if test -n "$kvs_host" ; then
	cmdline="$cmdline --kvs_host $kvs_host"
    fi
    if test -n "$kvs_port" ; then
	cmdline="$cmdline --kvs_host $kvs_port"
    fi
    if test -n "$log_host" ; then
	cmdline="$cmdline --kvs_host $log_host"
    fi
    if test -n "$log_port" ; then
	cmdline="$cmdline --kvs_host $log_port"
    fi

    log "executing $cmdline"
    exec ${cmdline}
else
    log "cannot execute $gpi_bin_path/$gpi_bin, giving up."
    exit 2
fi
