#!/bin/bash
### avoid strange behaviour with temporary inconsistency
### on Panasas Filesystems:
###
###     the test -r was sucessful but the source didn't
###     source anything
###
###
gpi_priv_dir=""
gpi_exe=""
debug=false
mem_size=
gpi_port=
pidfile=
force=false
daemonize=false
kvs_host=
kvs_port=
log_host=
log_port=
verbose=false
socket_path=
state_dir=~/.sdpa/state
config_file="$HOME/.sdpa/configs/sdpa.rc"

function usage ()
{
    cat >&2 <<EOF
usage: $0 [options]

    -h: print this help
    -d gpid directory: priviledged binary path for the gpid
    -x gpi-exe: gpi program to use
    -g run within debugger
    -m size: memory size
    -p port: GPI port
    -P pidfile: write pid to this file
    -f: force (always copy binary)
    -D: daemonize
    -k host: kvs host
    -K port: kvs port
    -l host: log host
    -L port: log port
    -v: verbose
    -s dir: state-dir
    -F config file
    -S socket path
EOF
}

while getopts ":hd:x:gm:p:P:fDk:K:l:L:vs:F:S:" opt; do
    case $opt in
        h)
            usage
            exit 0
            ;;
        d)
            gpi_priv_dir=$OPTARG
            ;;
        x)
            gpi_exe=$OPTARG
            ;;
        g)
            debug=true
            ;;
        m)
            mem_size=$OPTARG
            ;;
        p)
            gpi_port=$OPTARG
            ;;
        P)
            pidfile=$OPTARG
            ;;
        f)
            force=true
            ;;
        D)
            daemonize=true
            ;;
        k)
            kvs_host=$OPTARG
            ;;
        K)
            kvs_port=$OPTARG
            ;;
        l)
            log_host=$OPTARG
            ;;
        L)
            log_port=$OPTARG
            ;;
        v)
            verbose=true
            ;;
        s)
            state_dir=$OPTARG
            ;;
        F)
            config_file=$OPTARG
            ;;
        S)
            socket_path=$OPTARG
            ;;
        \?)
            echo "invalid option: -$OPTARG" >&2
            echo "try: $0 -h" >&2
            exit 1
            ;;
    esac
done

test -e "$state_dir/sdpa.env" && source "$state_dir/sdpa.env"

if [ -z "$gpi_priv_dir" ] ; then
    if [ -n "$GPI_PRIV_DIR" ] ; then
        gpi_priv_dir="$GPI_PRIV_DIR"
    else
        gpi_priv_dir=$(fhgcfg -f "${config_file}" -g gpi.priv_dir)
    fi
fi

if [ -z "$socket_path" ] ; then
    log "E: socket path is missing, please specify it with -S"
    exit 1
fi

if [ -z "$gpi_priv_dir" ] ; then
    log "could not deduce GPI_PRIV_DIR, please export GPI_PRIV_DIR or pass via commandline!"
    exit 1
fi
gpi_app_path="${gpi_priv_dir}/gpi-space.app"
gpi_bin_path="${gpi_app_path}/bin"
gpi_lib_path="${gpi_app_path}/lib"

log_file="${state_dir}/log/gpi-space.log"

if [ -z "$gpi_exe" ] ; then
    gpi_exe="${SDPA_HOME}/bin/gpi-space"
fi

if [ ! -x "${gpi_exe}" ] ; then
    log "Sorry, ${gpi_exe} is not executable"
    exit 1
fi
gpi_bin=$(basename "$gpi_exe")

need_copy=false
if [ ! -x "${gpi_bin_path}/${gpi_bin}" ] ; then
    log "${gpi_bin} does not seem to be installed in $gpi_bin_path"
    need_copy=true
else
    md_inst=$( md5sum "${gpi_bin_path}/${gpi_bin}" | cut -d ' ' -f 1 )
    md_cand=$( md5sum "${gpi_exe}" | cut -d ' ' -f 1 )
    if [ "$md_inst" != "$md_cand" ] ; then
        log "candidate ${gpi_exe} is different than the one in ${gpi_bin_path}"
        need_copy=true
    fi
fi

do_copy=false
if [ $need_copy = "true" -a $force = "true" ] ; then
    do_copy=true
fi
if [ $need_copy = "true" -a $do_copy = "false" ] ; then
    read -t 5 -n 1 -p "Do you want me to copy \"$gpi_exe\" to \"$gpi_bin_path\"? [y/N] " ans
    case "$ans" in
        y|Y)
            do_copy=true
            ;;
        *)
            ;;
    esac
fi

if [ $do_copy = "true" ] ; then
    if [ ! -d "${gpi_bin_path}" ] ; then
        tmp=$( mkdir -p "$gpi_bin_path" 2>&1 )
        if [ $? -ne 0 ] ; then
            log "could not create $gpi_bin_path: $tmp"
            exit 1
        fi
    fi
    if [ ! -d "${gpi_lib_path}" ] ; then
        tmp=$( mkdir -p "$gpi_lib_path" 2>&1 )
        if [ $? -ne 0 ] ; then
            log "could not create $gpi_lib_path: $tmp"
            exit 1
        fi
    fi
    if [ ! -w "${gpi_bin_path}" -o ! -w "${gpi_lib_path}" ] ; then
        log "W: I am not allowed to write to '${gpi_bin_path}' or '${gpi_lib_path}'"
    else
        cp "${gpi_exe}" "${gpi_bin_path}/${gpi_bin}" && {
            log "I: installed new ${gpi_bin} in ${gpi_bin_path}/${gpi_bin}"
        } || {
            log "E: could not update ${gpi_bin} in ${gpi_bin_path}/${gpi_bin}"
            exit 1
        }
        "${SDPA_HOME}/libexec/sdpa/scripts/bundle.sh" -o "${gpi_lib_path}" "${gpi_bin_path}/${gpi_bin}" && {
            log "I: bundled ${gpi_bin} in ${gpi_app_path}"
        } || {
            log "E: could not install ${gpi_bin} in ${gpi_app_path}"
            rm -rf "${gpi_app_path}"
            exit 1
        }
    fi
fi

if [ -x "$gpi_bin_path/$gpi_bin" ] ; then
    cmdline=
    if $debug ; then
        cmdline="gdb -ex run --args $cmdline"
    fi
    cmdline="$cmdline ${gpi_bin_path}/${gpi_bin}"

    if $verbose ; then
        cmdline="$cmdline --log-level TRACE"
    fi
    if $daemonize && ! $debug ; then
        cmdline="$cmdline --daemonize"
    fi
    if test -n "$mem_size" ; then
        cmdline="$cmdline --gpi-mem $mem_size"
    fi
    if test -n "$pidfile" ; then
        cmdline="$cmdline --pidfile $pidfile"
    fi
    if test -n "$kvs_host" ; then
        cmdline="$cmdline --kvs-host $kvs_host"
    fi
    if test -n "$kvs_port" ; then
        cmdline="$cmdline --kvs-port $kvs_port"
    fi
    if test -n "$log_host" ; then
        cmdline="$cmdline --log-host $log_host"
    fi
    if test -n "$log_port" ; then
        cmdline="$cmdline --log-port $log_port"
    fi

    cmdline="$cmdline --socket $socket_path"

    if test -n "$log_file" ; then
        cmdline="$cmdline --log-file $log_file"
    fi
    if test -n "$gpi_port" ; then
        cmdline="$cmdline --gpi-port $gpi_port"
    fi

    log "executing $cmdline"
    exec ${cmdline}
else
    log "cannot execute $gpi_bin_path/$gpi_bin, giving up."
    exit 2
fi
