#!/bin/bash

GSPC_DOC_SHORT_DESCRIPTION="manage the GPI-Space topology"
GSPC_IMPORTANT_API_COMMAND=true

. $(gspc --exec-path)/gspc-sh-setup

function usage()
{
    cat <<EOF
usage: topology [-h|--help] [action] [options]

Action:

   --list                list the current topology
   --status              print status of each component
EOF
}

#if [ $# -eq 0 ] ; then usage ; exit 1 ; fi

TEMP=`getopt -o hl --long help,list,status,no-header -n 'template' -- "$@"`

if [ $? != 0 ] ; then echo >&2 "try '-h' or '--help'. Terminating..." ; exit 1 ; fi

eval set -- "$TEMP"

action=
show_header=true

while true ; do
    case "$1" in
        -h|--help) usage; exit 0 ;;
        -l|--list)
            [ -z "$action" ] || {
                gspc_log_error topology "only one action allowed"
                exit 1
            }
            action="list"
            shift
            ;;
        --status)
            [ -z "$action" ] || {
                gspc_log_error topology "only one action allowed"
                exit 1
            }
            action="status"
            shift
            ;;
        --no-header)
            show_header=false
            shift
            ;;
        --) shift; break ;;
        *) gspc_log_error topology "Internal error on argument: '$1'"; exit 1 ;;
    esac
done

if [ -z "$action" ] ; then
    action=list
fi

function get_component_info ()
{
    gspc_require_gspc_dir

    local all_components=()
    local components_to_get_info_for=( "${@}" )

    # format: location.host <host> location.port <port> name <name>
    all_components=( $(gspc_get_kvs_entry 'p2p.peer' | tr -d '=') )
    ec=$?
    if [ $ec -eq 4 ] ; then
        gspc_log_error topology "Could not contact KVS!"
        return $ec
    elif [ $ec -ne 0 ] ; then
        gspc_log_error topology "Not running"
        return $ec
    else
        for ((i=0 ; i < ${#all_components[@]} ; i+=8))
        do
            host="${all_components[i+1]}"
            port="${all_components[i+3]}"
            name="${all_components[i+5]}"
            pid="${all_components[i+7]}"

            if [ -n "${components_to_get_info_for}" ] ; then
                local filtered=true
                for component in "${components_to_get_info_for[@]}"
                do
                    if [[ "${name}" =~ ${component} ]]
                    then
                        filtered=false
                        break
                    fi
                done
                if $filtered ; then continue ; fi
            fi
            printf "%-12s %-5d %-5d %s\n" "$host" "$port" "$pid" "$name"
        done
    fi
}

function action_status ()
{
    local component_to_check=("$@")
    local component_info=()

    component_info=($(get_component_info "${component_to_check[@]}"))
    ec=$?
    if [ $ec -ne 0 ] ; then
        return $ec
    fi

    for ((i=0 ; i < ${#component_info[@]} ; i+=4))
    do
        host="${component_info[i+0]}"
        port="${component_info[i+1]}"
        pid="${component_info[i+2]}"
        name="${component_info[i+3]}"

        if gspc check-port "$host" "$port"
        then
            echo "$name is UP"
        else
            echo "$name iS DOWN"
        fi
    done

    return 0
}

case "${action}" in
    list)
        gspc_require_gspc_dir
        if $show_header ; then
            printf "%-12s %-5s %-5s %-s\n" "HOST" "PORT" "PID" "NAME"
        fi
        get_component_info "${@}"
        ;;
    status)
        action_status "${@}"
        ;;
    '')
        usage
        exit 1
        ;;
    *)
        gspc_log_error topology "Invalid action: ${action}"
        exit 1
        ;;
esac

