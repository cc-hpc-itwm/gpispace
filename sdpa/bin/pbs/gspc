#!/bin/bash

mydir=$(dirname $(which "$0"))

prefix_path=$(readlink -f "${mydir}/../")
exec_path="${prefix_path}/libexec/sdpa/scripts"
etc_path="${prefix_path}/etc"
bin_path="${prefix_path}/bin"
lib_path="${prefix_path}/lib"
plugin_path="${prefix_path}/libexec/fhg/plugins"

verbose=0

. "${exec_path}/gspc-sh-version"
if [ $? -ne 0 ] ; then
    echo >&2 "Installation incomplete, please contact the admin!"
    exit 1
fi

. "${exec_path}/gspc-sh-setup"
if [ $? -ne 0 ] ; then
    echo >&2 "Installation incomplete, please contact the admin!"
    exit 1
fi

function usage()
{
    gspc help 2>&1
}

function _resolve_command_path ()
{
    local cmd_name="$1" ; shift
    echo "${exec_path}/gspc-${cmd_name}"
}

while true ; do
    case "$1" in
        --help) usage; exit 0 ;;
        --gspc-dir)
            if [ -z "$GSPC_DIR" ] ; then
                exit 1
            else
                echo "$GSPC_DIR"
                exit 0
            fi
            shift
            ;;
        --gspc-dir=*)
            GSPC_DIR="${1:11}"
            shift
            ;;
        --exec-path)
            if [ -z "$exec_path" ] ; then
                echo >&2 "could not deduce exec-path"
                exit 1
            fi
            echo "$exec_path"
            shift
            exit 0
            ;;
        --etc-path)
            if [ -z "${etc_path}" ] ; then
                echo >&2 "could not deduce etc-path"
                exit 1
            fi
            echo "$etc_path"
            shift
            exit 0
            ;;
        --bin-path)
            if [ -z "${bin_path}" ] ; then
                echo >&2 "could not deduce bin-path"
                exit 1
            fi
            echo "$bin_path"
            shift
            exit 0
            ;;
        --lib-path)
            if [ -z "${lib_path}" ] ; then
                echo >&2 "could not deduce lib-path"
                exit 1
            fi
            echo "$lib_path"
            shift
            exit 0
            ;;
        --plugin-path)
            if [ -z "${plugin_path}" ] ; then
                echo >&2 "could not deduce plugin-path"
                exit 1
            fi
            echo "$plugin_path"
            shift
            exit 0
            ;;
        --version)
            echo "GPI-Space ${GSPC_INFO_VERSION}"
            shift
            exit 0
            ;;
        --dumpversion)
            echo "${GSPC_INFO_VERSION}"
            shift
            exit 0
            ;;
        --revision)
            echo "${GSPC_INFO_REVISION}"
            shift
            exit 0
            ;;
        --verbose) verbose=$((verbose + 1)); shift ;;
        -[a-z]*)
            flags="${1:1}"
            while [ -n "$flags" ] ; do
                flag="${flags:0:1}"
                flags="${flags:1}"
                case "$flag" in
                    v) verbose=$((verbose+1)) ;;
                    h) usage ; exit 0 ;;
                    *)
                        echo >&2 "gspc: invalid flag: $flag"
                        exit 1
                        ;;
                esac
            done
            shift
            ;;
        --) shift; break ;;
        -*)
            echo >&2 "gspc: invalid option: $1"
            exit 1
            ;;
        *) break ;;
    esac
done

if [ -z "$1" ] ; then
    usage
    exit 1
fi

if [ -n "$GSPC_DIR" ] ; then
    GSPC_DIR=$(gspc_abspath "$GSPC_DIR")
    export GSPC_DIR
fi
gspc_prepend_path PATH "${mydir}"

cmd_name="$1"; shift

cmd=( $("${exec_path}/gspc-config" --get "alias.${cmd_name}") )
if [ $? -eq 0 ] ; then
    cmd_name="${cmd[0]}"
fi

cmd[0]=$(_resolve_command_path "${cmd_name}")

if [ -x "${cmd[0]}" ] ; then
    GSPC_VERBOSE="${verbose}" "${cmd[@]}" "$@"
else
    echo >&2 "gspc: '$cmd_name' is not a GPI-Space command. See 'gspc help'."
fi
