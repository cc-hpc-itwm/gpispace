#!/bin/bash

GSPC_API_COMMAND_SHORT_DESCRIPTION="initialize a new GSPC_DIR"
GSPC_API_COMMAND_LEVEL=1

. $(gspc --exec-path)/gspc-sh-setup

function usage()
{
    cat <<EOF
usage: init [-h|--help] [options] [directory]

Options:

    -f|--force       force initialization
EOF
}

TEMP=`getopt -o h,f --long help,force -n 'init' -- "$@"`

if [ $? != 0 ] ; then echo >&2 "try '-h' or '--help'. Terminating..." ; exit ${GSPC_EX_USAGE} ; fi

eval set -- "$TEMP"

force=false

while true ; do
    case "$1" in
        -h|--help) usage; exit ${GSPC_EX_OK} ;;
        -f|--force) force=true; shift ;;
        --) shift; break ;;
        *) gspc_log_error init "Internal error on argument: '$1'"; exit ${GSPC_EX_USAGE} ;;
    esac
done

if [ -n "$1" ]
then
    dir=$(gspc_abspath "$1")
fi

if [ -z "$dir" ]
then
    dir="$GSPC_DIR"
fi

if [ -z "$dir" ]
then
    gspc_log_error init "gspc-dir was not specified. try 'gspc -h'"
    exit ${GSPC_EX_USAGE}
fi

if [ -d "$dir" ]
then
    if ! $force
    then
        gspc_log_error init "directory '${dir}' does already exist!"
        exit ${GSPC_EX_UNAVAILABLE}
    fi
fi

err=$(mkdir -p "$dir" 2>&1)
ec=$?
if [ $? -ne 0 ]
then
    gspc_log_error init "could not create directory '$dir': ${err}"
    exit ${GSPC_EX_CANTCREAT}
fi

err=$(mkdir -p "$dir"/{var,run,lock,log} 2>&1)
ec=$?
if [ $? -ne 0 ]
then
    gspc_log_error init "could not create directory '$dir': ${err}"
    exit ${GSPC_EX_CANTCREAT}
fi

gspc --revision > "${dir}/.gspc_dir"

gspc_log_trace init "initialized directory '$dir'"
