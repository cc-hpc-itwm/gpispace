#!/bin/bash

GSPC_API_COMMAND_SHORT_DESCRIPTION="manage the processes"
GSPC_API_COMMAND_LEVEL=1

. "${GSPC_EXEC_PATH}/gspc-sh-setup" || { echo >&2 "must be run by 'gspc'" ; exit 64; }

function usage()
{
    cat <<EOF
usage: ctrl [-h|--help] [options] [--] <action...>

Options:

   --url                 only work on specific url(s), otherwise work on all
                         that can be found

   --kvs-host <host>     specify the host of the KVS
   --kvs-port <port>     specify the port of the KVS

Actions:

    show                 lists all components
$(gspc_call list-commands --prefix=ctrl --indent=4 --level=$((GSPC_API_COMMAND_LEVEL+1)))
EOF
}

kvs_opts=()
urls=()
opts=()
while true ; do
    case "$1" in
        -h|--help) usage ; exit ${GSPC_EX_OK} ;;
        --kvs-host)
            kvs_opts+=(--host="$2")
            shift ; shift
            ;;
        --kvs-port)
            kvs_opts+=(--port="$2")
            shift ; shift
            ;;
        --url)
            urls+=("$2")
            shift; shift
            ;;
        --) shift; break ;;
        *) break ;;
    esac
done

action="$1"

if [ -z "$action" ] ; then
    usage
    exit ${GSPC_EX_USAGE}
else
    shift
fi

if [ "$action" = "show" ]
then
    tmp=( $(gspc_call kvs "${kvs_opts[@]}" --get-regex gspc.net.url | awk '{print $3" "$1}' ) )
    for ((i=0 ; i < ${#tmp[@]} ; i+=2))
    do
        url="${tmp[$i]}"
        name=$(echo "${tmp[$((i+1))]}" | cut -d. -f 4)

        echo "$name => $url"
    done
    exit ${GSPC_EX_OK}
fi

cmd=$(gspc_resolve_command "ctrl-${action}")

if [ ! -x "${cmd}" ]
then
    gspc_log_error ctrl "invalid action: ${action}"
    exit ${GSPC_EX_USAGE}
fi

if [ ${#urls[@]} -eq 0 ]
then
    urls=( $(gspc_call kvs "${kvs_opts[@]}" --get-regex gspc.net.url | cut -d= -f 2) )
fi

for u in ${urls[@]}
do
    opts+=(--url "${u}")
done

"${cmd}" "${opts[@]}" "${@}"
