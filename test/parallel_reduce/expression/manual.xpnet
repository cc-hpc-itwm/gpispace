<!-- Copyright (C) 2023 Fraunhofer ITWM        -->
<!-- SPDX-License-Identifier: GPL-3.0-or-later -->

<defun name="manual">
  <struct name="T">
    <field name="value" type="unsigned long"/>
  </struct>
  <in name="n" type="unsigned long" place="n"/>
  <out name="P" type="T" place="P"/>
  <net>
    <place name="n" type="unsigned long"/>
    <place name="P" type="T"/>

    <transition name="initialize">
      <defun>
        <in name="n" type="unsigned long"/>
        <out name="g" type="unsigned long"/>
        <out name="k" type="unsigned long"/>
        <expression>
          ${g} := ${n};
          ${k} := ${n};
        </expression>
      </defun>
      <connect-in port="n" place="n"/>
      <connect-out port="g" place="g"/>
      <connect-out port="k" place="k"/>
    </transition>

    <place name="k" type="unsigned long"/>
    <transition name="reduce">
      <defun>
        <in name="k" type="unsigned long" place="k"/>
        <tunnel name="p" type="T" place="p"/>
        <out name="P" type="T" place="P"/>
        <net>
          <place name="k" type="unsigned long"/>
          <place name="p" type="T" virtual="true"/>
          <place name="P" type="T"/>

          <place name="lhs" type="T"/>
          <place name="rhs" type="T"/>
          <place name="l" type="unsigned long"><token><value>0ul</value></token></place>
          <place name="r" type="unsigned long"/>

          <transition name="lhs">
            <defun>
              <inout name="trigger" type="unsigned long"/>
              <inout name="p" type="T"/>
              <expression>
                ${trigger} := ${trigger} + 1UL;
              </expression>
            </defun>
            <connect-in port="trigger" place="l"/>
            <connect-out port="trigger" place="r"/>
            <connect-in port="p" place="p"/>
            <connect-out port="p" place="lhs"/>
          </transition>

          <transition name="rhs">
            <defun>
              <inout name="trigger" type="unsigned long"/>
              <inout name="p" type="T"/>
              <expression/>
            </defun>
            <connect-in port="trigger" place="r"/>
            <connect-out port="trigger" place="l"/>
            <connect-in port="p" place="p"/>
            <connect-out port="p" place="rhs"/>
          </transition>

          <transition name="operation">
            <defun>
              <in name="lhs" type="T"/>
              <in name="rhs" type="T"/>
              <out name="lr" type="T"/>
              <expression>
                ${lr.value} := ${lhs.value} + ${rhs.value}
              </expression>
            </defun>
            <connect-in port="lhs" place="lhs"/>
            <connect-in port="rhs" place="rhs"/>
            <connect-out port="lr" place="p"/>
          </transition>

          <transition name="done">
            <defun>
              <in name="k" type="unsigned long"/>
              <inout name="p" type="T"/>
              <inout name="count" type="unsigned long"/>
              <expression>
                ${count} := 0ul;
              </expression>
            </defun>
            <condition>${k} :eq: ${count}</condition>
            <connect-in port="p" place="lhs"/>
            <connect-out port="p" place="P"/>
            <connect-in port="k" place="k"/>
            <connect-in port="count" place="r"/>
            <connect-out port="count" place="l"/>
          </transition>
        </net>
      </defun>
      <connect-in port="k" place="k"/>
      <connect-out port="P" place="P"/>
      <place-map virtual="p" real="p"/>
    </transition>

    <place name="p" type="T"/>
    <place name="g" type="unsigned long"/>
    <transition name="generate">
      <defun>
        <in name="g" type="unsigned long" place="g"/>
        <tunnel name="p" type="T" place="p"/>
        <net>
          <place name="g" type="unsigned long"/>
          <place name="p" type="T" virtual="true"/>

          <transition name="done">
            <defun>
              <in name="g" type="unsigned long"/>
              <expression/>
            </defun>
            <condition>${g} :eq: 0ul</condition>
            <connect-in port="g" place="g"/>
          </transition>

          <transition name="step">
            <defun>
              <inout name="g" type="unsigned long"/>
              <out name="p" type="T"/>
              <expression>
                ${p.value} := ${g};
                ${g} := ${g} - 1ul;
              </expression>
            </defun>
            <condition>${g} :gt: 0ul</condition>
            <connect-inout port="g" place="g"/>
            <connect-out port="p" place="p"/>
          </transition>
        </net>
      </defun>
      <connect-in port="g" place="g"/>
      <place-map virtual="p" real="p"/>
    </transition>
  </net>
</defun>
