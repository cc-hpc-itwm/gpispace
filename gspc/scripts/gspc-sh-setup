#!/bin/bash
#
#  this file is supposed to be sourced via either:
#
#    . $(gspc --exec-path)/gspc-sh-setup
#    . "${GSPC_EXEC_PATH}/gspc-sh-setup" || { echo >&2 "must be run by 'gspc'" ; exit 64; }

################################################################################
#                                                                              #
#                      Common Variables                                        #
#                                                                              #
################################################################################

GSPC_EX_OK=0           # everything alright
GSPC_EX_USAGE=64       # command line usage error
GSPC_EX_DATAERR=65     # data format error
GSPC_EX_NOINPUT=66     # cannot open input
GSPC_EX_NOUSER=67      # addressee unknown
GSPC_EX_NOHOST=68      # host name unknown
GSPC_EX_UNAVAILABLE=69 # service unavailable
GSPC_EX_SOFTWARE=70    # internal software error
GSPC_EX_OSERR=71       # system error (e.g., can't fork)
GSPC_EX_OSFILE=72      # critical OS file missing
GSPC_EX_CANTCREAT=73   # can't create (user) output file
GSPC_EX_IOERR=74       # input/output error
GSPC_EX_TEMPFAIL=75    # temp failure; user is invited to retry
GSPC_EX_PROTOCOL=76    # remote error in protocol
GSPC_EX_NOPERM=77      # permission denied
GSPC_EX_CONFIG=78      # configuration error

################################################################################
#                                                                              #
#                        Log functions                                         #
#                                                                              #
################################################################################

function gspc_is_verbose_enabled ()
{
    local level=1
    if [ -n "$1" ] ; then
        level="$1"
    fi

    if [ -n "$GSPC_VERBOSE" ]
    then
        if [ $GSPC_VERBOSE -ge $level ]
        then
            return 0
        fi
    fi
    return 1
}

function gspc_log_impl ()
{
    local level="${1:?}"; shift
    local component="${1:?}" ; shift

    level_id=${level:0:1}
    level_id=$(echo ${level_id} | tr '[:lower:]' '[:upper:]')

    echo -e >&2 "[${level_id}] ($component): $@"
}

function gspc_log_trace ()
{
    if gspc_is_verbose_enabled 3 ; then
        gspc_log_impl trace "$@"
    fi
}

function gspc_log_debug ()
{
    if gspc_is_verbose_enabled 2 ; then
        gspc_log_impl debug "$@"
    fi
}

function gspc_log_info ()
{
    if gspc_is_verbose_enabled 1 ; then
        gspc_log_impl info "$@"
    fi
}

function gspc_log_warn ()
{
    gspc_log_impl warn "$@"
}

function gspc_log_error ()
{
    gspc_log_impl error "$@"
}

################################################################################
#                                                                              #
#                        Utility functions                                     #
#                                                                              #
################################################################################

function gspc_abspath ()
{
    case "${1:0:1}" in
        /)
            echo "$1"
            ;;
        *)
            echo $(readlink -m "$PWD/$1")
            ;;
    esac
}

function gspc_prepend_path ()
{
    local var="$1"; shift
    local val=$(eval echo \$${var})
    for v ; do
        val=$(echo "$val" | sed "s,:$v:,:,g")
        val=$(echo "$val" | sed -e "s,^$v:,,g")
        val=$(echo "$val" | sed -e "s,:$v\$,,g")
        val="$v:$val"
    done
    eval "$var=$val"
}

function gspc_resolve_command ()
{
    local cmd_name="${1}"; shift
    if [ -n "${GSPC_EXEC_PATH}" ]
    then
        echo "${GSPC_EXEC_PATH}/gspc-${cmd_name}"
    else
        return 1
    fi
}

function gspc_call ()
{
    local cmd_name="${1}"; shift
    "${GSPC_EXEC_PATH}/gspc-${cmd_name}" "${@}"
}
