#!/bin/bash

cd /

# cleanup for startup via gpid.exe...
if [ x"$HOME" = x"/" ] ; then
   echo "I guess, I am running under gpid.exe..." >&2
   echo "fixing some environment variables..." >&2
   unset HOME
   export HOME=$(echo ~)
fi

exec </dev/null
exec >$HOME/.ufbmig.out.log
exec 2>$HOME/.ufbmig.err.log

source "$HOME/.bashrc"

export SDPA_HOME=/p/herc/itwm/hpc/soft/sdpa/ap/sles10
source "${SDPA_HOME}/etc/sdpa/sdpa.env" || {
        echo "could not load SDPA environment" >&2
        exit 1
}

# this is the place where one should modify LD_LIBRARY_PATH and PATH and so on...
test -r "${SDPA_HOME}/etc/sdpa/defaults" && source "${SDPA_HOME}/etc/sdpa/defaults"

env > $HOME/.ufbmig.env

node_file=
force=false
verbose=false
daemonize=false
name=ufbmigd
orchestrator=orchestrator
timeout=-1 # in seconds
port=55555 # application port expected by the gui

if [ -n "$PBS_NODEFILE" ] ; then
   node_file="$PBS_NODEFILE"
fi

function usage ()
{
    cat >&2 <<EOF
usage: $(basename $0) [options]

  -h: this help
  -f: node file to use
  -o: orchestrator to use
  -n: name of the daemon
  -p: application port to use
  -v: be verbose
  -F: kills still running daemon
EOF
}

EX_OK=0
EX_USAGE=64
EX_NOINPUT=66      # cannot open input
EX_NOUSER=67       # addressee unknown
EX_NOHOST=68       # host name unknown
EX_UNAVAILABLE=69  # service unavailable
EX_SOFTWARE=70     # internal software error
EX_OSERR=71        # system error (e.g., can't fork)
EX_OSFILE=72       # critical OS file missing
EX_CANTCREAT=73    # can't create (user) output file
EX_IOERR=74        # input/output error
EX_TEMPFAIL=75     # temp failure; user is invited to retry
EX_PROTOCOL=76     # remote error in protocol
EX_NOPERM=77       # permission denied
EX_CONFIG=78       # configuration error

while getopts ":hf:o:n:p:vF" opt; do
    case $opt in
        h)
            usage
            exit 0
            ;;
        f)
            node_file="$OPTARG"
            shift 2
            ;;
        o)
            orchestrator="$OPTARG"
            shift 2
            ;;
        n)
            name="$OPTARG"
            shift 2
            ;;
        p)
            port="$OPTARG"
            shift 2
            ;;
        v)
            verbose=true
            shift 1
            ;;
        F)
            force=true
            shift 2
            ;;
        \?)
            ;;
    esac
done

sdpa=$(which sdpa)
if [ $? -ne 0 ] ; then
    echo "could not locate 'sdpa' executable!" >&2
    exit 1
fi

export SDPA_PERFORM_UNATTENDED_SETUP=1
if [ ! -e "$HOME/.sdpa/configs/sdpa.rc" ] ; then
    echo "I: sdpa config does not exist, performing automated SDPA setup" >&2

    ${sdpa} setup </dev/null || {
        echo "E: I was unable to setup the SDPA environment for you." >&2
        exit ${EX_UNAVAILABLE:?}
    }
fi

if [ -z "$node_file" ] ; then
    aux="$HOME/.sdpa/data/aux"
    if [ -z "$aux" ] ; then
        echo "Could not locate torque spool directory!" >&2
        exit $EX_OSFILE
    fi
    node_file=$( /bin/ls -t "$aux" | /usr/bin/head -n 1)
    if [ -z "$node_file" ] ; then
        echo "No nodefile available!" >&2
        exit $EX_OSFILE
    fi
    node_file="$aux/$node_file"
    if [ ! -r "$node_file" ] ; then
        echo "Cannot read nodefile @ $node_file" >&2
        exit $EX_IOERR
    fi
fi

echo "using nodefile: $node_file" >&2

sdpa init "$node_file" </dev/null || {
    echo "could not initialize SDPA!" >&2
    exit 1
}

source $HOME/.sdpa/state/sdpa.env

log "starting kvs..."
sdpa start kvs

gpi_socket="$(fhgcfg -f ~/.sdpa/configs/sdpa.rc -g gpi.socket_path -v /var/tmp)"
gpi_socket="$gpi_socket/S-gpi-space.$(id -u).0"

control_sdpa=0
gpi_api_used="$(fhgcfg -f ~/.sdpa/configs/sdpa.rc -g gpi.api)"
if [ x"$gpi_api_used" = x"gpi.api.real" ] ; then
        control_sdpa=1
fi

logd_port=$(fhgcfg -f ~/.sdpa/configs/sdpa.rc -g plugin.logd.port -v 3456)

log "starting ufbmigd..."
scratch_dir=$(fhgcfg -f ~/.sdpa/configs/sdpa.rc -g sdpa.scratch_dir)
if [ -z "$scratch_dir" ] ; then
    scratch_dir="$HOME/.sdpa/scratch"
fi

state_dir="$scratch_dir/state/ufbmigd"
mkdir -p "$state_dir"
#FHGLOG_level=TRACE FHGLOG_to_console=stderr valgrind --tool=memcheck --leak-check=full --show-reachable=yes --malloc-fill=0x0 --free-fill=0xa $SDPA_HOME/bin/fhgkernel \
FHGLOG_to_console=stderr "$SDPA_HOME/bin/fhgkernel" \
    --state "$state_dir/store/" \
    -s kernel.load.lazy=0 \
    -s plugin.logd.port="${logd_port}" \
    -s plugin.net.name="${name}" \
    -s plugin.sdpac.orchestrator="${orchestrator}" \
    -s plugin.ufbmig_front.timeout_default=${timeout} \
    -s plugin.ufbmig_front.timeout_send=5 \
    -s plugin.ufbmig_front.port_server=${port} \
    -s plugin.ufbmig_front.chunk_size=16777216 \
    -s plugin.ufbmig_back.wf_init="${SDPA_LIBEXEC}/apps/ufbmig/ufbmig_init.pnet" \
    -s plugin.ufbmig_back.wf_mask="${SDPA_LIBEXEC}/apps/ufbmig/ufbmig_mask.pnet" \
    -s plugin.ufbmig_back.wf_calc="${SDPA_LIBEXEC}/apps/ufbmig/ufbmig_calc.pnet" \
    -s plugin.ufbmig_back.wf_done="${SDPA_LIBEXEC}/apps/ufbmig/ufbmig_done.pnet" \
    -s plugin.ufbmig_back.config="${state_dir}/config.token" \
    -s plugin.ufbmig_back.control_sdpa="${control_sdpa}" \
    -s plugin.ufbmig_back.chunk_size=16777216 \
    -s plugin.gpi.socket="$gpi_socket" \
    "${SDPA_LIBEXEC}/plugins/logd.so" \
    "${SDPA_LIBEXEC}/plugins/kvs.so" \
    "${SDPA_LIBEXEC}/plugins/net.so" \
    "${SDPA_LIBEXEC}/plugins/gpi.so" \
    "${SDPA_LIBEXEC}/plugins/sdpac.so" \
    "${SDPA_LIBEXEC}/plugins/sdpactl.so" \
    "${SDPA_LIBEXEC}/plugins/progress.so" \
    "${SDPA_LIBEXEC}/plugins/ufbmig_back.so" \
    "${SDPA_LIBEXEC}/plugins/ufbmig_front.so" \
    $@ </dev/null >"$SDPA_LOG_DIR/ufbmigd.log" 2>&1 &
disown -a
sleep 5
