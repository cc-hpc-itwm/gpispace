<defun name="stresstest">
  <properties name="pnetc">
    <properties name="context">
      <property key="MILLI" value="1000"/>
      <property key="SECOND" value="${MILLI} * 1000"/>
      <property key="KIBI" value="2^10"/>
      <property key="MIBI" value="2^20"/>
      <property key="GIBI" value="2^30"/>
      <property key="SIZE_OF_LONG" value="8"/>

      <property key="outer" value="5"/>
      <property key="inner" value="5"/>
      <property key="seed" value="long(1000.0 * pi)"/>
      <property key="bytes_to_transfer" value="192 * ${MIBI}"/>

      <!-- when true, the full shmem segment is verified, not only the data -->
      <property key="verify_all_mem" value="false"/>
      <property key="verify" value="true"/>
      <property key="communicate" value="true"/>

      <property key="num_long_to_transfer"
                value="${bytes_to_transfer} div ${SIZE_OF_LONG}"
                />
    </properties>
  </properties>

  <in name="outer" type="long" place="N"/>
  <in name="inner" type="long" place="M"/>
  <in name="sleeptime" type="long" place="sleeptime"/>
  <in name="num_long_to_transfer" type="long" place="num_long"/>
  <in name="seed" type="long" place="seed"/>
  <in name="verify_all_mem" type="bool" place="verify_all_mem"/>
  <in name="communicate" type="bool" place="communicate"/>
  <in name="verify" type="bool" place="verify"/>
  <out name="out" type="control" place="out"/>

  <net>
    <struct name="config">
      <field name="handle" type="long"/>
      <field name="scratch" type="long"/>
      <field name="sleeptime" type="long"/>
      <field name="num_long" type="long"/>
      <field name="seed" type="long"/>
      <field name="verify_all_mem" type="bool"/>
      <field name="verify" type="bool"/>
      <field name="communicate" type="bool"/>
    </struct>

    <place name="sleeptime" type="long"><token><value>0 * ${MILLI}</value></token></place>
    <place name="N" type="long"><token><value>${outer}</value></token></place>
    <place name="M" type="long"><token><value>${inner}</value></token></place>
    <place name="num_long" type="long"><token><value>${num_long_to_transfer}</value></token></place>
    <place name="seed" type="long"><token><value>${seed}</value></token></place>
    <place name="verify_all_mem" type="bool"><token><value>${verify_all_mem}</value></token></place>
    <place name="verify" type="bool"><token><value>${verify}</value></token></place>
    <place name="communicate" type="bool"><token><value>${communicate}</value></token></place>
    <place name="Nstep" type="long"/>
    <place name="wait" type="long"/>

    <place name="pending" type="long"/>

    <place name="done" type="control"/>
    <place name="out" type="control"/>

    <place name="config" type="config"/>

    <include-template href="dup.xml"/>
    <specialize name="dup_long" use="dup">
      <type-map replace="T" with="long"/>
    </specialize>

    <transition name="scatter_N" inline="true">
      <use name="dup_long"/>
      <connect-in port="in" place="N"/>
      <connect-out port="one" place="Nstep"/>
      <connect-out port="two" place="wait"/>
    </transition>

    <transition name="initialize">
      <defun>
        <in name="trigger" type="control"/>
        <in name="sleeptime" type="long"/>
        <in name="seed" type="long"/>
        <in name="num_long" type="long"/>
        <in name="verify_all_mem" type="bool"/>
        <in name="verify" type="bool"/>
        <in name="communicate" type="bool"/>
        <out name="config" type="config"/>
        <module name="stresstest" function="initialize"/>
      </defun>
      <connect-in port="sleeptime" place="sleeptime"/>
      <connect-in port="seed" place="seed"/>
      <connect-in port="num_long" place="num_long"/>
      <connect-in port="verify_all_mem" place="verify_all_mem"/>
      <connect-in port="verify" place="verify"/>
      <connect-in port="communicate" place="communicate"/>
      <connect-out port="config" place="config"/>
    </transition>

    <transition name="finalize">
      <defun>
        <in name="trigger" type="control"/>
        <in name="config" type="config"/>
        <out name="trigger" type="control"/>
        <module name="stresstest" function="finalize"/>
      </defun>
      <connect-in port="trigger" place="all_done"/>
      <connect-read port="config" place="config"/>
      <connect-out port="trigger" place="finalized"/>
    </transition>

    <place name="finalized" type="control"/>

    <transition name="generate" inline="true">
      <include-function href="sequence.xml"/>
      <connect-in place="Nstep" port="amount"/>
      <connect-out port="out" place="pending"/>
    </transition>

    <transition name="inner">
      <include-function href="stress.xpnet"/>
      <connect-read port="N" place="M"/>
      <connect-read port="config" place="config"/>
      <connect-out port="done" place="done"/>
      <connect-in port="trigger" place="pending"/>
    </transition>

    <include-template href="wait.xml"/>
    <specialize name="wait_control" use="wait">
      <type-map replace="T" with="control"/>
    </specialize>

    <transition name="wait">
      <use name="wait_control"/>
      <connect-in port="trigger" place="done"/>
      <connect-out port="done" place="all_done"/>
      <place-map real="wait" virtual="wait"/>
    </transition>

    <place name="all_done" type="control"/>

    <transition name="cleanup">
      <defun>
        <in name="wait" type="long"/>
        <in name="M" type="long"/>
        <in name="config" type="config"/>
        <in name="trigger" type="control"/>
        <out name="done" type="control"/>
        <expression>
          ${done} := []
        </expression>
      </defun>
      <connect-in port="wait" place="wait"/>
      <connect-in port="M" place="M"/>
      <connect-in port="config" place="config"/>
      <connect-in port="trigger" place="finalized"/>
      <connect-out port="done" place="out"/>
    </transition>
  </net>
</defun>
