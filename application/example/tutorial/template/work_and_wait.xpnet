<defun name="work_and_wait">

  <in name="n" type="long" place="n"/>
  <out name="done" type="control" place="done"/>

  <net>

    <place name="n" type="long"/>
    <place name="done" type="control"/>
    <place name="wait" type="long"/>
    <place name="n_copy" type="long"/>

    <include-template href="dup.xpnet"/>
    <specialize name="dup_long" use="dup">
      <type-map replace="T" with="long"/>
    </specialize>

    <transition name="dup">
      <use name="dup_long"/>
      <connect-in port="x" place="n"/>
      <connect-out port="a" place="wait"/>
      <connect-out port="b" place="n_copy"/>
    </transition>

    <transition name="work" inline="true">
      <include-function href="sequence/use_sequence.xpnet"/>
      <connect-in port="n" place="n_copy"/>
      <connect-out port="o" place="o"/>
    </transition>

    <place name="o" type="long"/>

    <transition name="wait">
      <defun>
        <inout name="wait" type="long"/>
        <in name="o" type="long"/>
        <expression>
          ${wait} := ${wait} - 1
        </expression>
      </defun>
      <condition>
        ${wait} :gt: 0
      </condition>
      <connect-inout port="wait" place="wait"/>
      <connect-in port="o" place="o"/>
    </transition>

    <transition name="done">
      <defun>
        <in name="wait" type="long"/>
        <out name="done" type="control"/>
        <expression>
          ${done} := []
        </expression>
      </defun>
      <condition>
        ${wait} :eq: 0
      </condition>
      <connect-in port="wait" place="wait"/>
      <connect-out port="done" place="done"/>
    </transition>

  </net>

</defun>
