<defun>

  <in name="empty" type="interval" place="pre_empty"/>
  <out name="interval" type="interval" place="interval"/>
  <tunnel name="size_wanted" type="long" place="size_wanted"/>

  <net>

    <template name="select">
      <in name="x" type="T"/>
      <out name="x" type="T"/>
      <expression/>
    </template>

    <specialize name="select_interval" use="select">
      <type-map replace="T" with="interval"/>
    </specialize>

    <place name="pre_empty" type="interval"/>
    <place name="size_wanted" type="long" virtual="true"/>
    <place name="interval" type="interval"/>

    <place name="empty_interval" type="interval"/>
    <place name="credit_empty_interval" type="control">
      <token><value>[]</value></token>
    </place>

    <include-template href="lib/trigger_if.xml"/>
    <specialize name="select_interval_get_credit" use="trigger_if">
      <type-map replace="T" with="interval"/>
    </specialize>

    <include-template href="lib/trigger_when.xml"/>
    <specialize name="select_interval_put_credit" use="trigger_when">
      <type-map replace="T" with="interval"/>
    </specialize>

    <transition name="select_empty_interval">
      <use name="select_interval_get_credit"/>
      <connect-in port="object" place="pre_empty"/>
      <connect-out port="object" place="empty_interval"/>
      <connect-in port="trigger" place="credit_empty_interval"/>
    </transition>

    <transition name="interval_size_okay">
      <defun>
        <in name="size_wanted" type="long"/>
        <in name="interval" type="interval"/>
        <out name="interval" type="interval"/>
        <out name="credit_empty_interval" type="control"/>
        <expression>
          ${credit_empty_interval} := []
        </expression>
      </defun>
      <condition>
        ${interval.size} :eq: ${size_wanted}
      </condition>
      <connect-read port="size_wanted" place="size_wanted"/>
      <connect-in port="interval" place="empty_interval"/>
      <connect-out port="interval" place="interval"/>
      <connect-out port="credit_empty_interval" place="credit_empty_interval"/>
    </transition>

    <transition name="interval_to_small">
      <defun>
        <in name="size_wanted" type="long"/>
        <in name="interval" type="interval"/>
        <out name="interval" type="interval"/>
        <out name="credit_empty_interval" type="control"/>
        <expression>
          ${credit_empty_interval} := []
        </expression>
      </defun>
      <condition>
        ${interval.size} :lt: ${size_wanted}
      </condition>
      <connect-read port="size_wanted" place="size_wanted"/>
      <connect-in port="interval" place="empty_interval"/>
      <connect-out port="interval" place="pre_small_interval"/>
      <connect-out port="credit_empty_interval" place="credit_empty_interval"/>
    </transition>

    <place name="small_interval" type="interval"/>
    <place name="credit_small_interval" type="control">
      <token><value>[]</value></token>
    </place>
    <place name="pre_small_interval" type="interval"/>

    <transition name="select_small_interval">
      <use name="select_interval_get_credit"/>
      <connect-in port="object" place="pre_small_interval"/>
      <connect-out port="object" place="small_interval"/>
      <connect-in port="trigger" place="credit_small_interval"/>
    </transition>

    <transition name="interval_to_big">
      <defun>
        <in name="size_wanted" type="long"/>
        <in name="interval" type="interval"/>
        <out name="rest" type="interval"/>
        <out name="interval" type="interval"/>
        <out name="credit_empty_interval" type="control"/>
        <expression>
          ${rest.offset} := ${interval.offset} + ${size_wanted};
          ${rest.size} := ${interval.size} - ${size_wanted};
          ${rest.used} := 0L;
          ${interval.size} := ${size_wanted};
          ${credit_empty_interval} := []
        </expression>
      </defun>
      <condition>
        ${interval.size} :gt: ${size_wanted}
      </condition>
      <connect-read port="size_wanted" place="size_wanted"/>
      <connect-in port="interval" place="empty_interval"/>
      <connect-out port="interval" place="interval"/>
      <connect-out port="rest" place="pre_empty"/>
      <connect-out port="credit_empty_interval" place="credit_empty_interval"/>
    </transition>

    <transition name="mergeR" priority="1">
      <defun>
        <in name="a" type="interval"/>
        <in name="b" type="interval"/>
        <out name="s" type="interval"/>
        <out name="credit_small_interval" type="control"/>
        <expression>
          ${s.offset} := ${b.offset};
          ${s.size} := ${a.size} + ${b.size};
          ${s.used} := 0L;
          ${credit_small_interval} := []
        </expression>
      </defun>
      <condition>
        ${b.offset} + ${b.size} :eq: ${a.offset}
      </condition>
      <connect-in port="a" place="small_interval"/>
      <connect-in port="b" place="small_intervals"/>
      <connect-out port="s" place="pre_empty"/>
      <connect-out port="credit_small_interval" place="credit_small_interval"/>
    </transition>

    <transition name="mergeL" priority="1">
      <defun>
        <in name="a" type="interval"/>
        <in name="b" type="interval"/>
        <out name="s" type="interval"/>
        <out name="credit_small_interval" type="control"/>
        <expression>
          ${s.offset} := ${a.offset};
          ${s.size} := ${a.size} + ${b.size};
          ${s.used} := 0L;
          ${credit_small_interval} := []
        </expression>
      </defun>
      <condition>
        ${a.offset} + ${a.size} :eq: ${b.offset}
      </condition>
      <connect-in port="a" place="small_interval"/>
      <connect-in port="b" place="small_intervals"/>
      <connect-out port="s" place="pre_empty"/>
      <connect-out port="credit_small_interval" place="credit_small_interval"/>
    </transition>

    <place name="small_intervals" type="interval"/>

    <transition name="no_merge">
      <use name="select_interval_put_credit"/>
      <connect-in port="object" place="small_interval"/>
      <connect-out port="object" place="small_intervals"/>
      <connect-out port="trigger" place="credit_small_interval"/>
    </transition>
  </net>

</defun>
