<defun>

  <struct name="interval_tagged_with_id">
    <field name="interval" type="interval"/>
    <field name="id" type="long"/>
  </struct>

  <in name="processed_interval" type="interval" place="processed_interval"/>
  <out name="empty_interval" type="interval" place="empty_interval"/>
  <out name="done_update" type="control" place="done_update"/>

  <tunnel name="config" type="config" place="config"/>
  <tunnel name="wait" type="long" place="wait"/>
  <tunnel name="interval_size" type="long" place="interval_size"/>
  <tunnel name="output" type="long" place="output"/>

  <net>
    <place name="config" type="config" virtual="true"/>
    <place name="processed_interval" type="interval"/>
    <place name="update_interval" type="interval_tagged_with_id"/>
    <place name="wait" type="long" virtual="true"/>
    <place name="empty_interval" type="interval"/>
    <place name="done_update" type="control"/>
    <place name="interval_size" type="long" virtual="true"/>

    <place name="nonempty_processed_interval" type="interval"/>

    <transition name="empty">
      <defun>
        <in name="i" type="interval"/>
        <out name="i" type="interval"/>
        <expression>
        </expression>
      </defun>
      <condition>
        ${i.used} :le: 0L
      </condition>
      <connect-in port="i" place="processed_interval"/>
      <connect-out port="i" place="updated_interval"/>
    </transition>

    <transition name="nonempty">
      <defun>
        <in name="i" type="interval"/>
        <out name="i" type="interval"/>
        <expression/>
      </defun>
      <condition>
        ${i.used} :gt: 0L
      </condition>
      <connect-in port="i" place="processed_interval"/>
      <connect-out port="i" place="nonempty_processed_interval"/>
    </transition>

    <transition name="split" inline="true">
      <include-function href="split.xml"/>
      <connect-read port="config" place="config"/>
      <connect-in port="interval" place="nonempty_processed_interval"/>
      <connect-out port="interval_tagged" place="update_interval"/>
      <place-map virtual="wait" real="wait"/>
    </transition>

    <place name="output" type="long" virtual="true"/>

    <transition name="select">
      <defun>
        <in name="interval_tagged" type="interval_tagged_with_id"/>
        <in name="output" type="long"/>
        <out name="interval_tagged" type="interval_tagged_with_id"/>
        <expression/>
      </defun>
      <condition>
        ${interval_tagged.id} :eq: ${output}
      </condition>
      <connect-in port="interval_tagged" place="update_interval"/>
      <connect-in port="output" place="output"/>
      <connect-out port="interval_tagged" place="selected_interval"/>
    </transition>

    <place name="selected_interval" type="interval_tagged_with_id"/>

    <transition name="update">
      <defun>
        <in name="config" type="config"/>
        <in name="interval_tagged" type="interval_tagged_with_id"/>
        <out name="interval_tagged" type="interval_tagged_with_id"/>
        <module name="ufbmig_calc" function="update (config, interval_tagged)">
          <cinclude href="fhglog/fhglog.hpp"/>
          <cinclude href="fvm-pc/pc.hpp"/>
          <code><![CDATA[
            LOG (INFO, "UPDATE " << interval_tagged);

            ::pnetc::type::interval::type & interval (interval_tagged.interval);

            waitComm ( fvmGetGlobalData
                       ( static_cast<fvmAllocHandle_t> (config.handle.data.update)
                       , interval.offset
                       , interval.used
                       , 0
                       , 0
                       )
                     );

            char * update_descr = static_cast<char *> (fvmGetShmemPtr());

            LOG ( INFO
                , "UPDATE_WITH "
                << std::string (update_descr, update_descr + interval.used)
                );

            interval.used = 0L;
          ]]></code>
        </module>
      </defun>
      <connect-read port="config" place="config"/>
      <connect-in port="interval_tagged" place="selected_interval"/>
      <connect-out port="interval_tagged" place="updated_interval_tagged"/>
    </transition>

    <place name="updated_interval_tagged" type="interval_tagged_with_id"/>

    <transition name="give_back">
      <defun>
        <in name="interval_tagged" type="interval_tagged_with_id"/>
        <out name="output" type="long"/>
        <out name="interval" type="interval"/>
        <expression>
          ${output} := ${interval_tagged.id};
          ${interval} := ${interval_tagged.interval}
        </expression>
      </defun>
      <connect-in port="interval_tagged" place="updated_interval_tagged"/>
      <connect-out port="output" place="output"/>
      <connect-out port="interval" place="updated_interval"/>
    </transition>

    <place name="updated_interval" type="interval"/>

    <include-template href="lib/dup.xml"/>
    <specialize name="dup_interval" use="dup">
      <type-map replace="T" with="interval"/>
    </specialize>

    <transition name="scatter_interval" inline="true">
      <use name="dup_interval"/>
      <connect-in port="in" place="updated_interval"/>
      <connect-out port="one" place="done_interval"/>
      <connect-out port="two" place="interval_to_merge"/>
    </transition>

    <place name="done_interval" type="interval"/>
    <place name="interval_to_merge" type="interval"/>

    <transition name="merge_interval" inline="true">
      <include-function href="interval/merge.xml"/>
      <connect-in port="empty" place="interval_to_merge"/>
      <connect-out port="interval" place="empty_interval"/>
      <place-map virtual="size_wanted" real="interval_size"/>
    </transition>

    <include-template href="lib/wait.xml"/>
    <specialize name="wait_interval" use="wait">
      <type-map replace="T" with="interval"/>
    </specialize>

    <transition name="wait">
      <use name="wait_interval"/>
      <place-map virtual="wait" real="wait"/>
      <connect-in port="trigger" place="done_interval"/>
      <connect-out port="done" place="done_update"/>
    </transition>
  </net>
</defun>
