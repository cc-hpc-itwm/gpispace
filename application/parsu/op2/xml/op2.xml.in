<defun name="op2">

  <in name="op" type="string" place="op"/>
  <in name="shmem_per_node" type="long" place="shmem_per_node"/>
  <in name="gpi_mem_per_node" type="long" place="gpi_mem_per_node"/>
  <in name="file1_input" type="string" place="file1_input"/>
  <in name="type1_input" type="string" place="type1_input"/>
  <in name="file2_input" type="string" place="file2_input"/>
  <in name="type2_input" type="string" place="type2_input"/>
  <in name="file_output" type="string" place="file_output"/>
  <in name="type_output" type="string" place="type_output"/>

  <out name="done" type="control" place="done"/>

  <struct name="op2_package">
    <field name="left" type="long"/>
    <field name="right" type="long"/>
    <struct name="num">
      <field name="trace" type="long"/>
    </struct>
    <struct name="size">
      <field name="trace" type="long"/>
    </struct>
  </struct>

  <struct name="op2_loaded_package">
    <field name="package" type="op2_package"/>
    <field name="slot" type="long"/>
  </struct>

  <struct name="op2_write_info">
    <field name="next_trace" type="long"/>
    <field name="offset" type="long"/>
  </struct>

  <struct name="op2_package_to_be_written">
    <field name="loaded_package" type="op2_loaded_package"/>
    <field name="offset" type="long"/>
  </struct>

  <struct name="handle">
    <field name="data" type="long"/>
    <field name="scratch" type="long"/>
  </struct>

  <struct name="file">
    <field name="name" type="string"/>
    <field name="type" type="string"/>
  </struct>

  <struct name="op2_config">
    <struct name="file">
      <field name="input1" type="file"/>
      <field name="input2" type="file"/>
      <field name="output" type="file"/>
    </struct>

    <field name="handle" type="handle"/>

    <struct name="size">
      <field name="trace" type="long"/>
      <field name="bunch" type="long"/>
    </struct>

    <struct name="per">
      <struct name="bunch">
        <field name="trace" type="long"/>
      </struct>
    </struct>

    <struct name="num">
      <field name="trace" type="long"/>
      <field name="slot" type="long"/>
    </struct>

    <field name="op" type="string"/>
  </struct>

  <net>

    <include-template href="dup.xml"/>
    <specialize name="dup_long" use="dup">
      <type-map replace="T" with="long"/>
    </specialize>
    <specialize name="dup_control" use="dup">
      <type-map replace="T" with="control"/>
    </specialize>

    <include-template href="triple.xml"/>
    <specialize name="triple_config" use="triple">
      <type-map replace="T" with="op2_config"/>
    </specialize>

    <!-- tuning -->
    <place name="shmem_per_node" type="long">
      <token><value>@SHMEM_PER_NODE@</value></token>
    </place>
    <place name="gpi_mem_per_node" type="long">
      <token><value>@GPI_MEM_PER_NODE@</value></token>
    </place>

    <!-- necessary parameters -->
    <place name="op" type="string">
      <token><value>"@OP@"</value></token>
    </place>
    <place name="file1_input" type="string">
      <token><value>"@FILE1_INPUT@"</value></token>
    </place>
    <place name="file2_input" type="string">
      <token><value>"@FILE2_INPUT@"</value></token>
    </place>
    <place name="file_output" type="string">
      <token><value>"@FILE_OUTPUT@"</value></token>
    </place>
    <place name="type1_input" type="string">
      <token><value>"@TYPE1_INPUT@"</value></token>
    </place>
    <place name="type2_input" type="string">
      <token><value>"@TYPE2_INPUT@"</value></token>
    </place>
    <place name="type_output" type="string">
      <token><value>"@TYPE_OUTPUT@"</value></token>
    </place>

    <place name="done" type="control"/>

    <transition name="init">
      <defun>
        <in name="file1_input" type="string" />
        <in name="type1_input" type="string"/>
        <in name="file2_input" type="string"/>
        <in name="type2_input" type="string"/>
        <in name="file_output" type="string"/>
        <in name="type_output" type="string"/>
        <in name="shmem_per_node" type="long"/>
        <in name="gpi_mem_per_node" type="long"/>
        <in name="op" type="string"/>
        <out name="write_info" type="op2_write_info"/>
        <out name="give_back_trace" type="long"/>
        <out name="config" type="op2_config"/>
        <module name="op2" function="init ( file1_input
                               , type1_input
                               , file2_input
                               , type2_input
                               , file_output
                               , type_output
                               , op
                               , shmem_per_node
                               , gpi_mem_per_node
                               , write_info
                               , give_back_trace
                               , config
                               )">
          <cinclude href="fvm-pc/pc.hpp" />
          <cinclude href="fhglog/fhglog.hpp"/>
          <cinclude href="stdexcept"/>
          <cinclude href="fstream"/>
          <cinclude href="determine_size.hpp" />
          <ld flag="-ldetermine_size" />
          <code><![CDATA[
            LOG (INFO, "INIT");

            determine_size ( file1_input
                           , type1_input
                           , config.num.trace
                           , config.size.trace
                           );

            {
              long num2 (0);
              long size2 (0);

              determine_size ( file2_input
                             , type2_input
                             , num2
                             , size2
                             );

              if (num2 != config.num.trace)
                {
                  throw std::runtime_error ("different number of traces");
                }

              if (size2 != config.size.trace)
                {
                  throw std::runtime_error ("different trace size");
                }
            }

            // adjust for double packages
            config.size.trace *= 2;

            LOG (INFO, "num.trace = " << config.num.trace);
            LOG (INFO, "size.trace = " << config.size.trace);

            const long mem_per_node (std::min ( shmem_per_node
                                              , gpi_mem_per_node
                                              )
                                    );

            config.per.bunch.trace = mem_per_node / config.size.trace;

            LOG (INFO, "per.bunch.trace = " << config.per.bunch.trace);

            if (config.per.bunch.trace < 1)
              {
                throw std::runtime_error ("not enough memory (shmem)");
              }

            config.size.bunch = config.per.bunch.trace * config.size.trace;
            const long slot_per_node (gpi_mem_per_node / config.size.bunch);

            if (slot_per_node < 2)
              {
                throw std::runtime_error ("not enough memory (gpi)");
              }

            config.num.slot = (slot_per_node - 1) * fvmGetNodeCount();

            LOG (INFO, "num.slot = " << config.num.slot);

            config.handle.data = static_cast<long>
              (fvmGlobalAlloc ((slot_per_node - 1) * config.size.bunch));
            config.handle.scratch = static_cast<long>
              (fvmGlobalAlloc (                 1  * config.size.bunch));

            if (config.handle.data == 0)
              {
                throw std::runtime_error ("BUMMER! handle.data == 0");
              }

            if (config.handle.scratch == 0)
              {
                throw std::runtime_error ("BUMMER! handle.scratch == 0");
              }

            config.file.input1.name = file1_input;
            config.file.input1.type = type1_input;
            config.file.input2.name = file2_input;
            config.file.input2.type = type2_input;
            config.file.output.name = file_output;
            config.file.output.type = type_output;
            config.op = op;

            write_info.next_trace = give_back_trace = 0;
            write_info.offset = 0;

            {
              std::ofstream out (config.file.output.name.c_str());

              if (!out)
                {
                  throw std::runtime_error ("BUMMER! out not good");
                }
            }
          ]]></code>
        </module>
      </defun>
      <connect-in port="file1_input" place="file1_input" />
      <connect-in port="type1_input" place="type1_input" />
      <connect-in port="file2_input" place="file2_input"/>
      <connect-in port="type2_input" place="type2_input" />
      <connect-in port="file_output" place="file_output" />
      <connect-in port="type_output" place="type_output" />
      <connect-in port="shmem_per_node" place="shmem_per_node" />
      <connect-in port="gpi_mem_per_node" place="gpi_mem_per_node"/>
      <connect-in port="op" place="op"/>
      <connect-out port="write_info" place="write_info"/>
      <connect-out port="give_back_trace" place="give_back_trace"/>
      <connect-out port="config" place="config_generated"/>
    </transition>

    <place name="config_generated" type="op2_config" />

    <transition name="scatter_config" inline="true">
      <use name="triple_config"/>
      <connect-in port="in" place="config_generated"/>
      <connect-out port="one" place="config"/>
      <connect-out port="two" place="config_generate_package"/>
      <connect-out port="three" place="config_generate_slot"/>
    </transition>

    <place name="config" type="op2_config"/>
    <place name="config_generate_package" type="op2_config"/>
    <place name="config_generate_slot" type="op2_config"/>

    <place name="write_info" type="op2_write_info"/>
    <place name="give_back_trace" type="long"/>

    <transition name="extract_eat_slot">
      <defun>
        <in name="trigger" type="control"/>
        <in name="config" type="op2_config"/>
        <out name="config" type="op2_config"/>
        <out name="N" type="long"/>
        <expression>
          ${N} := ${config.num.slot}
        </expression>
      </defun>
      <connect-in port="trigger" place="done_packages"/>
      <connect-in port="config" place="config"/>
      <connect-out port="config" place="config_finalize"/>
      <connect-out port="N" place="num_slot_eat"/>
    </transition>

    <place name="config_finalize" type="op2_config"/>

    <place name="num_slot_eat" type="long"/>

    <transition name="generate_slot" inline="true">
      <include-function href="generate/slot.xml"/>
      <connect-in port="config" place="config_generate_slot"/>
      <connect-out port="slot" place="empty_slot"/>
    </transition>

    <place name="empty_slot" type="long"/>

    <place name="new_package" type="op2_loaded_package"/>
    <place name="num_packages" type="long"/>

    <transition name="generate_package" inline="true">
      <include-function href="generate/package.xml"/>
      <place-map virtual="empty_slot" real="empty_slot"/>
      <connect-in port="config" place="config_generate_package"/>
      <connect-out port="package" place="new_package"/>
      <connect-out port="num" place="num_packages"/>
    </transition>

    <transition name="load">
      <defun>
        <in name="package" type="op2_loaded_package"/>
        <in name="config" type="op2_config"/>
        <out name="package" type="op2_loaded_package"/>
        <module name="op2" function="load (package, config)">
          <cinclude href="fhglog/fhglog.hpp"/>
          <cinclude href="do_load.hpp"/>
          <cinclude href="print.hpp"/>
          <cinclude href="comm.hpp"/>
          <ld flag="-ldo_load"/>
          <code><![CDATA[
            LOG (INFO, "LOAD " << ::print::loaded_package (package));

            const long part (package.package.left / config.per.bunch.trace);
            const long size ( package.package.num.trace
                            * package.package.size.trace
                            );

            LOG (INFO, "do_load: part " << part
                    << ", part_size "  << (config.size.bunch / 2)
                    << ", size " << size
                    << ", num " << package.package.num.trace
                );

            char * buf ((char *)(fvmGetShmemPtr()));

            do_load ( config.file.input1.name
                    , config.file.input1.type
                    , part
                    , config.size.bunch / 2
                    , size / 2
                    , package.package.num.trace
                    , buf
                    );

            do_load ( config.file.input2.name
                    , config.file.input2.type
                    , part
                    , config.size.bunch / 2
                    , size / 2
                    , package.package.num.trace
                    , buf + size / 2
                    );

            comm::put (config, package);
          ]]></code>
        </module>
      </defun>
      <connect-read port="config" place="config"/>
      <connect-in port="package" place="new_package"/>
      <connect-out port="package" place="loaded_package"/>
    </transition>

    <place name="loaded_package" type="op2_loaded_package"/>

    <transition name="op2">
      <defun>
        <in name="package" type="op2_loaded_package"/>
        <in name="config" type="op2_config"/>
        <out name="package" type="op2_loaded_package"/>
        <module name="op2" function="op2 (package, config)">
          <cinclude href="fhglog/fhglog.hpp"/>
          <cinclude href="print.hpp"/>
          <cinclude href="comm.hpp"/>
          <cinclude href="process/process.hpp"/>
          <ld flag="-lprocess"/>
          <code><![CDATA[
            const std::string cmd ("suop2 %FILE1% %FILE2% op=" + config.op);

            LOG (INFO, "OP2 " << ::print::loaded_package (package)
                              << cmd
                );

            comm::get (config, package);

            char * buf ((char *)(fvmGetShmemPtr()));

            const unsigned long size
              (package.package.num.trace * package.package.size.trace);

            process::file_const_buffer file1 (buf         , size/2, "%FILE1%");
            process::file_const_buffer file2 (buf + size/2, size/2, "%FILE2%");

            process::file_const_buffer_list (files_input);

            files_input.push_back (file1);
            files_input.push_back (file2);

            const process::execute_return_type ret
              ( process::execute ( cmd
                                 , process::const_buffer (NULL, 0)
                                 , process::buffer (buf, size/2)
                                 , files_input
                                 , process::file_buffer_list ()
                                 )
              );

            if (ret.bytes_read_stdout != size/2)
              {
                throw std::runtime_error ("strange return size");
              }

            package.package.size.trace /= 2;

            comm::put (config, package);

            LOG (INFO, "OP2ed " << ::print::loaded_package (package));
          ]]></code>
        </module>
      </defun>
      <connect-read port="config" place="config"/>
      <connect-in port="package" place="loaded_package"/>
      <connect-out port="package" place="writeable_package"/>
    </transition>

    <place name="writeable_package" type="op2_loaded_package"/>

    <transition name="select_writeable">
      <defun>
        <in name="write_info" type="op2_write_info"/>
        <out name="write_info" type="op2_write_info"/>
        <in name="p" type="op2_loaded_package"/>
        <out name="w" type="op2_package_to_be_written"/>
        <expression>
          ${w.loaded_package} := ${p};
          ${w.offset} := ${write_info.offset};

          ${write_info.next_trace} := ${p.package.right};
          ${write_info.offset} :=
            ${write_info.offset} +
            ${p.package.size.trace} * ${p.package.num.trace}
          ;
        </expression>
        <condition>
          ${write_info.next_trace} :eq: ${p.package.left}
        </condition>
      </defun>
      <connect-in port="write_info" place="write_info"/>
      <connect-out port="write_info" place="write_info"/>
      <connect-in port="p" place="writeable_package"/>
      <connect-out port="w" place="package_to_be_written"/>
    </transition>

    <place name="package_to_be_written" type="op2_package_to_be_written"/>

    <transition name="write">
      <defun>
        <in name="package_to_be_written" type="op2_package_to_be_written"/>
        <in name="config" type="op2_config"/>
        <out name="p" type="op2_loaded_package"/>
        <module name="op2" function="p write (package_to_be_written, config)">
          <cinclude href="fvm-pc/pc.hpp"/>
          <cinclude href="fhglog/fhglog.hpp"/>
          <cinclude href="do_write.hpp"/>
          <cinclude href="print.hpp"/>
          <cinclude href="comm.hpp"/>
          <ld flag="-ldo_write"/>
          <code><![CDATA[
            const ::pnetc::type::op2_loaded_package::op2_loaded_package & p
              (package_to_be_written.loaded_package);

            LOG (INFO, "WRITE " << ::print::loaded_package (p)
                                << " to " << config.file.output.name
                                << ":" << package_to_be_written.offset
                );

            const long size (p.package.num.trace * p.package.size.trace);

            if (size > 0)
              {
                comm::get (config, p);

                LOG (INFO, "do_write: part " << package_to_be_written.offset
                        << ", part_size "  << 1
                        << ", size " << size
                        << ", num " << size * p.package.num.trace
                    );

                do_write ( config.file.output.name
                         , config.file.output.type
                         , package_to_be_written.offset
                         , 1
                         , size
                         , p.package.num.trace
                         , fvmGetShmemPtr()
                         );
              }

            return p;
          ]]></code>
        </module>
      </defun>
      <connect-read port="config" place="config"/>
      <connect-in port="package_to_be_written" place="package_to_be_written"/>
      <connect-out port="p" place="package_written"/>
    </transition>

    <place name="package_written" type="op2_loaded_package"/>

    <transition name="back_loaded_package">
      <defun>
        <in name="loaded_package" type="op2_loaded_package"/>
        <in name="give_back_trace" type="long"/>
        <out name="give_back_trace" type="long"/>
        <out name="loaded_package" type="op2_loaded_package"/>
        <expression>
          ${give_back_trace} := ${loaded_package.package.right};
        </expression>
        <condition>
          ${give_back_trace} :eq: ${loaded_package.package.left}
        </condition>
      </defun>
      <connect-in port="loaded_package" place="package_written"/>
      <connect-out port="loaded_package" place="loaded_package_finished"/>
      <connect-in port="give_back_trace" place="give_back_trace"/>
      <connect-out port="give_back_trace" place="give_back_trace"/>
    </transition>

    <place name="loaded_package_finished" type="op2_loaded_package"/>

    <transition name="back_store">
      <defun>
        <in name="loaded_package" type="op2_loaded_package"/>
        <out name="package" type="op2_package"/>
        <out name="slot" type="long"/>
        <expression>
          ${package} := ${loaded_package.package};
          ${slot} := ${loaded_package.slot};
        </expression>
      </defun>
      <connect-in port="loaded_package" place="loaded_package_finished"/>
      <connect-out port="package" place="package_finished"/>
      <connect-out port="slot" place="empty_slot"/>
    </transition>

    <place name="package_finished" type="op2_package"/>

    <include-template href="wait.xml"/>
    <specialize name="wait_package" use="wait">
      <type-map replace="T" with="op2_package"/>
    </specialize>

    <transition name="wait_package">
      <use name="wait_package"/>
      <place-map virtual="wait" real="num_packages"/>
      <connect-in port="trigger" place="package_finished"/>
      <connect-out port="done" place="done_packages"/>
    </transition>

    <place name="done_packages" type="control"/>

    <place name="done_finalize" type="control"/>
    <place name="done_eat" type="control"/>

    <transition name="finalize">
      <defun>
        <in name="config" type="op2_config"/>
        <out name="trigger" type="control"/>
        <module name="op2" function="finalize (trigger, config)">
          <cinclude href="fvm-pc/pc.hpp"/>
          <cinclude href="fhglog/fhglog.hpp"/>
          <code><![CDATA[
            LOG (INFO, "FINALIZE");

            fvmGlobalFree (static_cast<fvmAllocHandle_t> (config.handle.data));
            fvmGlobalFree (static_cast<fvmAllocHandle_t> (config.handle.scratch));
          ]]></code>
        </module>
      </defun>
      <connect-in port="config" place="config_finalize"/>
      <connect-out port="trigger" place="done_finalize"/>
    </transition>

    <transition name="eat_slots">
      <defun>
        <in name="N" type="long" place="check_break"/>
        <out name="done" type="control" place="done"/>
        <tunnel name="what" type="long" place="what"/>
        <net>
          <place name="N" type="long"/>
          <place name="done" type="control"/>
          <place name="what" type="long" virtual="true"/>
          <place name="check_break" type="long"/>
          <transition name="step">
            <defun>
              <in name="wait" type="long"/>
              <out name="wait" type="long"/>
              <in name="x" type="long"/>
              <expression>${wait} := ${wait} - 1</expression>
            </defun>
            <connect-in port="wait" place="N"/>
            <connect-out port="wait" place="check_break"/>
            <connect-in port="x" place="what"/>
          </transition>
          <transition name="break">
            <defun>
              <in name="wait" type="long"/>
              <out name="done" type="control"/>
              <expression>
                ${done} := []
              </expression>
              <condition>
                ${wait} :le: 0
              </condition>
            </defun>
            <connect-in port="wait" place="check_break"/>
            <connect-out port="done" place="done"/>
          </transition>
          <transition name="not_break">
            <defun>
              <in name="wait" type="long"/>
              <out name="wait" type="long"/>
              <expression>
              </expression>
              <condition>
                ${wait} :gt: 0
              </condition>
            </defun>
            <connect-in port="wait" place="check_break"/>
            <connect-out port="wait" place="N"/>
          </transition>
        </net>
      </defun>
      <place-map virtual="what" real="empty_slot"/>
      <connect-in port="N" place="num_slot_eat"/>
      <connect-out port="done" place="done_eat"/>
    </transition>

    <transition name="cleanup">
      <defun>
        <in name="done_eat" type="control"/>
        <in name="done_finalize" type="control"/>
        <in name="write_info" type="op2_write_info"/>
        <in name="give_back_trace" type="long"/>

        <out name="done" type="control"/>
        <expression>
          ${done} := []
        </expression>
      </defun>

      <connect-in port="done_eat" place="done_eat"/>
      <connect-in port="done_finalize" place="done_finalize"/>
      <connect-in port="write_info" place="write_info"/>
      <connect-in port="give_back_trace" place="give_back_trace"/>

      <connect-out port="done" place="done"/>
    </transition>

  </net>
</defun>
