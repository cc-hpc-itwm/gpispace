<defun name="shrink">

  <in name="cmd" type="string" place="cmd"/>
  <in name="shmem_per_node" type="long" place="shmem_per_node"/>
  <in name="gpi_mem_per_node" type="long" place="gpi_mem_per_node"/>
  <in name="file_input" type="string" place="file_input"/>
  <in name="type_input" type="string" place="type_input"/>
  <in name="file_output" type="string" place="file_output"/>
  <in name="type_output" type="string" place="type_output"/>

  <out name="done" type="control" place="done"/>

  <struct name="shrink_package">
    <field name="part" type="long"/>
    <struct name="num">
      <field name="trace" type="long"/>
    </struct>
    <struct name="size">
      <field name="trace" type="long"/>
      <field name="full_package" type="long"/>
    </struct>
  </struct>

  <struct name="shrink_loaded_package">
    <field name="package" type="shrink_package"/>
    <field name="slot" type="long"/>
  </struct>

  <struct name="shrink_write_info">
    <field name="next_part" type="long"/>
    <field name="offset" type="long"/>
  </struct>

  <struct name="shrink_package_to_be_written">
    <field name="loaded_package" type="shrink_loaded_package"/>
    <field name="offset" type="long"/>
  </struct>

  <struct name="handle">
    <field name="data" type="long"/>
    <field name="scratch" type="long"/>
  </struct>

  <struct name="file">
    <field name="name" type="string"/>
    <field name="type" type="string"/>
  </struct>

  <struct name="shrink_config">
    <struct name="file">
      <field name="input" type="file"/>
      <field name="output" type="file"/>
    </struct>

    <field name="handle" type="handle"/>

    <struct name="size">
      <field name="trace" type="long"/>
      <field name="bunch" type="long"/>
      <field name="resulting_trace" type="long"/>
    </struct>

    <struct name="per">
      <struct name="bunch">
        <field name="trace" type="long"/>
      </struct>
    </struct>

    <struct name="num">
      <field name="trace" type="long"/>
      <field name="slot" type="long"/>
    </struct>

    <field name="cmd" type="string"/>
  </struct>

  <net>

    <include-template href="dup.xml"/>
    <specialize name="dup_long" use="dup">
      <type-map replace="T" with="long"/>
    </specialize>
    <specialize name="dup_control" use="dup">
      <type-map replace="T" with="control"/>
    </specialize>

    <include-template href="triple.xml"/>
    <specialize name="triple_config" use="triple">
      <type-map replace="T" with="shrink_config"/>
    </specialize>

    <!-- tuning -->
    <place name="shmem_per_node" type="long">
      <token><value>@SHMEM_PER_NODE@</value></token>
    </place>
    <place name="gpi_mem_per_node" type="long">
      <token><value>@GPI_MEM_PER_NODE@</value></token>
    </place>

    <!-- necessary parameters -->
    <place name="cmd" type="string">
      <token><value>"@CMD@"</value></token>
    </place>
    <place name="file_input" type="string">
      <token><value>"@FILE_INPUT@"</value></token>
    </place>
    <place name="file_output" type="string">
      <token><value>"@FILE_OUTPUT@"</value></token>
    </place>
    <place name="type_input" type="string">
      <token><value>"@TYPE_INPUT@"</value></token>
    </place>
    <place name="type_output" type="string">
      <token><value>"@TYPE_OUTPUT@"</value></token>
    </place>

    <place name="done" type="control"/>

    <transition name="init">
      <defun>
        <in name="file_input" type="string"/>
        <in name="type_input" type="string"/>
        <in name="file_output" type="string"/>
        <in name="type_output" type="string"/>
        <in name="shmem_per_node" type="long"/>
        <in name="gpi_mem_per_node" type="long"/>
        <in name="cmd" type="string"/>
        <out name="write_info" type="shrink_write_info"/>
        <out name="config" type="shrink_config"/>
        <module name="shrink"
                function="init ( file_input
                               , type_input
                               , file_output
                               , type_output
                               , cmd
                               , shmem_per_node
                               , gpi_mem_per_node
                               , write_info
                               , config
                               )">
          <cinclude href="fvm-pc/pc.hpp"/>
          <cinclude href="fhglog/fhglog.hpp"/>
          <cinclude href="stdexcept"/>
          <cinclude href="fstream"/>
          <cinclude href="determine_size.hpp"/>
          <cinclude href="do_load.hpp"/>
          <cinclude href="process/process.hpp"/>
          <ld flag="-lprocess"/>
          <ld flag="-ldetermine_size"/>
          <ld flag="-ldo_load"/>
          <code><![CDATA[
            LOG (INFO, "INIT");

            config.file.input.name = file_input;
            config.file.input.type = type_input;
            config.file.output.name = file_output;
            config.file.output.type = type_output;
            config.cmd = cmd;

            determine_size ( file_input
                           , type_input
                           , config.num.trace
                           , config.size.trace
                           );

            LOG (INFO, "num.trace = " << config.num.trace);
            LOG (INFO, "size.trace = " << config.size.trace);

            // ---- get size of resulting traces -------------

            char* input_trace (new char [config.size.trace]);

            do_load ( config.file.input.name
                    , config.file.input.type
                    , 0 // dummy "part" and "part size"
                    , 0
                    , config.size.trace
                    , 1
                    , input_trace
                    );

            config.size.resulting_trace = LONG_MAX;

            for ( long size (std::max (1024 * 1024L, config.size.trace * 2))
                ; size <= config.size.resulting_trace
                ; size *= 2
                )
            {
              char* output_buffer (new char[size]);
              config.size.resulting_trace = process::execute ( cmd
                                                             , input_trace
                                                             , config.size.trace
                                                             , output_buffer
                                                             , size
                                                             );
              delete[] output_buffer;
            }

            delete[] input_trace;

            LOG (INFO, "size.resulting_trace = " << config.size.resulting_trace);

            if (config.size.resulting_trace > config.size.trace)
            {
              LOG (FATAL, "Trace would get bigger and .. this is shrink. You know? SHRINK.");
              throw std::runtime_error ("trace getting bigger.");
            }


            const long mem_per_node ( std::min ( shmem_per_node
                                               , gpi_mem_per_node
                                               )
                                    );

            config.per.bunch.trace = mem_per_node / config.size.trace;

            LOG (INFO, "per.bunch.trace = " << config.per.bunch.trace);

            if (config.per.bunch.trace < 1)
              {
                throw std::runtime_error ("not enough memory (shmem)");
              }

            config.size.bunch = config.per.bunch.trace * config.size.trace;
            const long slot_per_node (gpi_mem_per_node / config.size.bunch);

            if (slot_per_node < 2)
              {
                throw std::runtime_error ("not enough memory (gpi)");
              }

            config.num.slot = (slot_per_node - 1) * fvmGetNodeCount();

            LOG (INFO, "num.slot = " << config.num.slot);

            config.handle.data = static_cast<long>
              (fvmGlobalAlloc ((slot_per_node - 1) * config.size.bunch));
            config.handle.scratch = static_cast<long>
              (fvmGlobalAlloc (                 1  * config.size.bunch));

            if (config.handle.data == 0)
              {
                throw std::runtime_error ("BUMMER! handle.data == 0");
              }

            if (config.handle.scratch == 0)
              {
                throw std::runtime_error ("BUMMER! handle.scratch == 0");
              }

            write_info.next_part = 0;
            write_info.offset = 0;

            {
              std::ofstream out (config.file.output.name.c_str());

              if (!out)
                {
                  throw std::runtime_error ("BUMMER! out not good");
                }
            }
          ]]></code>
        </module>
      </defun>
      <connect-in port="file_input" place="file_input"/>
      <connect-in port="type_input" place="type_input"/>
      <connect-in port="file_output" place="file_output"/>
      <connect-in port="type_output" place="type_output"/>
      <connect-in port="shmem_per_node" place="shmem_per_node"/>
      <connect-in port="gpi_mem_per_node" place="gpi_mem_per_node"/>
      <connect-in port="cmd" place="cmd"/>
      <connect-out port="write_info" place="write_info"/>
      <connect-out port="config" place="config_generated"/>
    </transition>

    <place name="config_generated" type="shrink_config"/>

    <transition name="scatter_config" inline="true">
      <use name="triple_config"/>
      <connect-in port="in" place="config_generated"/>
      <connect-out port="one" place="config"/>
      <connect-out port="two" place="config_generate_package"/>
      <connect-out port="three" place="config_generate_slot"/>
    </transition>

    <place name="config" type="shrink_config"/>
    <place name="config_generate_package" type="shrink_config"/>
    <place name="config_generate_slot" type="shrink_config"/>

    <place name="write_info" type="shrink_write_info"/>

    <transition name="extract_eat_slot">
      <defun>
        <in name="trigger" type="control"/>
        <in name="config" type="shrink_config"/>
        <out name="config" type="shrink_config"/>
        <out name="N" type="long"/>
        <expression>
          ${N} := ${config.num.slot}
        </expression>
      </defun>
      <connect-in port="trigger" place="done_packages"/>
      <connect-in port="config" place="config"/>
      <connect-out port="config" place="config_finalize"/>
      <connect-out port="N" place="num_slot_eat"/>
    </transition>

    <place name="config_finalize" type="shrink_config"/>

    <place name="num_slot_eat" type="long"/>

    <transition name="generate_slot" inline="true">
      <include-function href="generate/slot.xml"/>
      <connect-in port="config" place="config_generate_slot"/>
      <connect-out port="slot" place="empty_slot"/>
    </transition>

    <place name="empty_slot" type="long"/>

    <place name="new_package" type="shrink_loaded_package"/>
    <place name="num_packages" type="long"/>

    <transition name="generate_package" inline="true">
      <include-function href="generate/package.xml"/>
      <place-map virtual="empty_slot" real="empty_slot"/>
      <connect-in port="config" place="config_generate_package"/>
      <connect-out port="package" place="new_package"/>
      <connect-out port="num" place="num_packages"/>
    </transition>

    <transition name="load">
      <defun>
        <in name="package" type="shrink_loaded_package"/>
        <in name="config" type="shrink_config"/>
        <out name="package" type="shrink_loaded_package"/>
        <module name="shrink" function="load (package, config)">
          <cinclude href="fhglog/fhglog.hpp"/>
          <cinclude href="do_load.hpp"/>
          <cinclude href="print.hpp"/>
          <cinclude href="comm.hpp"/>
          <ld flag="-ldo_load"/>
          <code><![CDATA[
            LOG (INFO, "LOAD " << ::print::loaded_package (package));

            LOG (INFO, "do_load: part " << package.package.part
                    << ", part_size "  << config.size.bunch
                    << ", size " << package.package.size.full_package
                    << ", num " << package.package.num.trace
                );

            do_load ( config.file.input.name
                    , config.file.input.type
                    , package.package.part
                    , config.size.bunch
                    , package.package.size.full_package
                    , package.package.num.trace
                    , fvmGetShmemPtr()
                    );

            comm::put (config, package);
          ]]></code>
        </module>
      </defun>
      <connect-read port="config" place="config"/>
      <connect-in port="package" place="new_package"/>
      <connect-out port="package" place="loaded_package"/>
    </transition>

    <place name="loaded_package" type="shrink_loaded_package"/>

    <transition name="shrink">
      <defun>
        <in name="package" type="shrink_loaded_package"/>
        <in name="config" type="shrink_config"/>
        <out name="package" type="shrink_loaded_package"/>
        <module name="shrink" function="shrink (package, config)">
          <cinclude href="fhglog/fhglog.hpp"/>
          <cinclude href="print.hpp"/>
          <cinclude href="comm.hpp"/>
          <cinclude href="process/process.hpp"/>
          <ld flag="-lprocess"/>
          <code><![CDATA[
            const std::string cmd (config.cmd);

            LOG (INFO, "SHRINK " << ::print::loaded_package (package)
                                 << cmd
                );

            comm::get (config, package);

            void * buf (fvmGetShmemPtr());

            const long& size (package.package.size.full_package);

            const std::size_t size_shrunken
              (process::execute (cmd, buf, size, buf, size));

            LOG (INFO, "size_shrunken = " << size_shrunken);

            package.package.size.trace = config.size.resulting_trace;
            package.package.size.full_package = size_shrunken;
            package.package.num.trace = package.package.size.full_package
                                      / package.package.size.trace;


            comm::put (config, package);

            LOG (INFO, "SHRUNKEN " << ::print::loaded_package (package));
          ]]></code>
        </module>
      </defun>
      <connect-read port="config" place="config"/>
      <connect-in port="package" place="loaded_package"/>
      <connect-out port="package" place="writeable_package"/>
    </transition>

    <place name="writeable_package" type="shrink_loaded_package"/>

    <transition name="select_writeable">
      <defun>
        <in name="write_info" type="shrink_write_info"/>
        <out name="write_info" type="shrink_write_info"/>
        <in name="p" type="shrink_loaded_package"/>
        <out name="w" type="shrink_package_to_be_written"/>
        <expression>
          ${w.loaded_package} := ${p};
          ${w.offset} := ${write_info.offset};

          ${write_info.next_part} := ${p.package.part} + 1;
          ${write_info.offset} := ${write_info.offset} + ${p.package.size.full_package};
        </expression>
        <condition>
          ${write_info.next_part} :eq: ${p.package.part}
        </condition>
      </defun>
      <connect-in port="write_info" place="write_info"/>
      <connect-out port="write_info" place="write_info"/>
      <connect-in port="p" place="writeable_package"/>
      <connect-out port="w" place="package_to_be_written"/>
    </transition>

    <place name="package_to_be_written" type="shrink_package_to_be_written"/>

    <transition name="write">
      <defun>
        <in name="package_to_be_written" type="shrink_package_to_be_written"/>
        <in name="config" type="shrink_config"/>
        <out name="p" type="shrink_loaded_package"/>
        <module name="shrink" function="p write (package_to_be_written, config)">
          <cinclude href="fvm-pc/pc.hpp"/>
          <cinclude href="fhglog/fhglog.hpp"/>
          <cinclude href="do_write.hpp"/>
          <cinclude href="print.hpp"/>
          <cinclude href="comm.hpp"/>
          <ld flag="-ldo_write"/>
          <code><![CDATA[
            const ::pnetc::type::shrink_loaded_package::shrink_loaded_package & p
              (package_to_be_written.loaded_package);

            LOG (INFO, "WRITE " << ::print::loaded_package (p)
                                << " to " << config.file.output.name
                                << ":" << package_to_be_written.offset
                );

            if (p.package.size.full_package > 0)
              {
                comm::get (config, p);

                LOG (INFO, "do_write: part " << package_to_be_written.offset
                        << ", part_size "  << 1
                        << ", size " << p.package.size.full_package
                        << ", num " << p.package.num.trace
                    );

                do_write ( config.file.output.name
                         , config.file.output.type
                         , package_to_be_written.offset
                         , 1
                         , p.package.size.full_package
                         , p.package.num.trace
                         , fvmGetShmemPtr()
                         );
              }

            return p;
          ]]></code>
        </module>
      </defun>
      <connect-read port="config" place="config"/>
      <connect-in port="package_to_be_written" place="package_to_be_written"/>
      <connect-out port="p" place="package_written"/>
    </transition>

    <place name="package_written" type="shrink_loaded_package"/>

    <transition name="back_store">
      <defun>
        <in name="loaded_package" type="shrink_loaded_package"/>
        <out name="package" type="shrink_package"/>
        <out name="slot" type="long"/>
        <expression>
          ${package} := ${loaded_package.package};
          ${slot} := ${loaded_package.slot};
        </expression>
      </defun>
      <connect-in port="loaded_package" place="package_written"/>
      <connect-out port="package" place="package_finished"/>
      <connect-out port="slot" place="empty_slot"/>
    </transition>

    <place name="package_finished" type="shrink_package"/>

    <include-template href="wait.xml"/>
    <specialize name="wait_package" use="wait">
      <type-map replace="T" with="shrink_package"/>
    </specialize>

    <transition name="wait_package">
      <use name="wait_package"/>
      <place-map virtual="wait" real="num_packages"/>
      <connect-in port="trigger" place="package_finished"/>
      <connect-out port="done" place="done_packages"/>
    </transition>

    <place name="done_packages" type="control"/>

    <place name="done_finalize" type="control"/>
    <place name="done_eat" type="control"/>

    <transition name="finalize">
      <defun>
        <in name="config" type="shrink_config"/>
        <out name="trigger" type="control"/>
        <module name="shrink" function="finalize (trigger, config)">
          <cinclude href="fvm-pc/pc.hpp"/>
          <cinclude href="fhglog/fhglog.hpp"/>
          <code><![CDATA[
            LOG (INFO, "FINALIZE");

            fvmGlobalFree (static_cast<fvmAllocHandle_t> (config.handle.data));
            fvmGlobalFree (static_cast<fvmAllocHandle_t> (config.handle.scratch));
          ]]></code>
        </module>
      </defun>
      <connect-in port="config" place="config_finalize"/>
      <connect-out port="trigger" place="done_finalize"/>
    </transition>

    <transition name="eat_slots">
      <defun>
        <in name="N" type="long" place="check_break"/>
        <out name="done" type="control" place="done"/>
        <tunnel name="what" type="long" place="what"/>
        <net>
          <place name="N" type="long"/>
          <place name="done" type="control"/>
          <place name="what" type="long" virtual="true"/>
          <place name="check_break" type="long"/>
          <transition name="step">
            <defun>
              <in name="wait" type="long"/>
              <out name="wait" type="long"/>
              <in name="x" type="long"/>
              <expression>${wait} := ${wait} - 1</expression>
            </defun>
            <connect-in port="wait" place="N"/>
            <connect-out port="wait" place="check_break"/>
            <connect-in port="x" place="what"/>
          </transition>
          <transition name="break">
            <defun>
              <in name="wait" type="long"/>
              <out name="done" type="control"/>
              <expression>
                ${done} := []
              </expression>
              <condition>
                ${wait} :le: 0
              </condition>
            </defun>
            <connect-in port="wait" place="check_break"/>
            <connect-out port="done" place="done"/>
          </transition>
          <transition name="not_break">
            <defun>
              <in name="wait" type="long"/>
              <out name="wait" type="long"/>
              <expression>
              </expression>
              <condition>
                ${wait} :gt: 0
              </condition>
            </defun>
            <connect-in port="wait" place="check_break"/>
            <connect-out port="wait" place="N"/>
          </transition>
        </net>
      </defun>
      <place-map virtual="what" real="empty_slot"/>
      <connect-in port="N" place="num_slot_eat"/>
      <connect-out port="done" place="done_eat"/>
    </transition>

    <transition name="cleanup">
      <defun>
        <in name="done_eat" type="control"/>
        <in name="done_finalize" type="control"/>
        <in name="write_info" type="shrink_write_info"/>

        <out name="done" type="control"/>
        <expression>
          ${done} := []
        </expression>
      </defun>

      <connect-in port="done_eat" place="done_eat"/>
      <connect-in port="done_finalize" place="done_finalize"/>
      <connect-in port="write_info" place="write_info"/>

      <connect-out port="done" place="done"/>
    </transition>

  </net>
</defun>
