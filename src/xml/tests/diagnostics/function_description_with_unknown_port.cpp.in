// mirko.rahn@itwm.fraunhofer.de

#define BOOST_TEST_MODULE function_description_with_unknown_port

#include <xml/parse/parser.hpp>
#include <xml/parse/state.hpp>
#include <xml/parse/error.hpp>

#include <util-generic/testing/flatten_nested_exceptions.hpp>
#include <util-generic/testing/require_exception.hpp>

BOOST_AUTO_TEST_CASE (function_description_with_unknown_return_port)
{
  xml::parse::state::type state;

  std::string const filename
    ("@XML_PARSE_TEST_XPNETS_DIR@/"
     "diagnostics/function_description_with_unknown_return_port.xpnet"
    );

  fhg::util::testing::require_exception
    <xml::parse::error::function_description_with_unknown_port>
  ( [&state, &filename] { xml::parse::just_parse (state, filename); }
  , boost::format ("ERROR: unknown %1% port %2%"
                   " in description of function %3%.%4% in %5%\n"
                  )
  % "return" % "r" % "m" % "f" % boost::filesystem::path (filename)
  );
}

BOOST_AUTO_TEST_CASE (function_description_with_unknown_argument_port)
{
  xml::parse::state::type state;

  std::string const filename
    ("@XML_PARSE_TEST_XPNETS_DIR@/"
     "diagnostics/function_description_with_unknown_argument_port.xpnet"
    );

  fhg::util::testing::require_exception
    <xml::parse::error::function_description_with_unknown_port>
  ( [&state, &filename] { xml::parse::just_parse (state, filename); }
  , boost::format ("ERROR: unknown %1% port %2%"
                   " in description of function %3%.%4% in %5%\n"
                  )
  % "argument" % "p" % "m" % "f" % boost::filesystem::path (filename)
  );
}
