<!-- This file is part of GPI-Space.                                       -->
<!-- Copyright (C) 2020 Fraunhofer ITWM                                    -->
<!--                                                                       -->
<!-- This program is free software: you can redistribute it and/or modify  -->
<!-- it under the terms of the GNU General Public License as published by  -->
<!-- the Free Software Foundation, either version 3 of the License, or     -->
<!-- (at your option) any later version.                                   -->
<!--                                                                       -->
<!-- This program is distributed in the hope that it will be useful,       -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of        -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          -->
<!-- GNU General Public License for more details.                          -->
<!--                                                                       -->
<!-- You should have received a copy of the GNU General Public License     -->
<!-- along with this program. If not, see <https://www.gnu.org/licenses/>. -->

<defun name="require_propagation">
  <require key="GPU" mandatory="false"/>
  <require key="I/O" mandatory="false"/>
  <require key="LOG" mandatory="false"/>
  <in name="trigger" type="control" place="trigger"/>
  <out name="done" type="control" place="done"/>
  <net>
    <place name="trigger" type="control"/>
    <place name="done" type="control"/>

    <transition name="init">
      <defun>
        <require key="GPI"/>
        <require key="GPU"/>
        <require key="I/O" mandatory="false"/>
        <require key="LOG" mandatory="false"/>
        <require key="cap23" mandatory="false"/>
        <require key="cap2818" mandatory="false"/>
        <in name="trigger" type="control"/>
        <out name="done" type="control"/>
        <expression/>
        <condition>
          ${trigger} :eq: []
        </condition>
      </defun>
      <connect-in port="trigger" place="trigger"/>
      <connect-out port="done" place="done_init"/>
    </transition>

    <place name="done_init" type="control"/>

    <transition name="run" inline="false">
      <defun>
        <require key="cap42" mandatory="false"/>
        <in name="trigger" type="control" place="trigger"/>
        <out name="done" type="control" place="done"/>
        <net>
          <place name="trigger" type="control"/>
          <place name="done" type="control"/>

          <transition name="run">
            <defun>
              <require key="cap23" mandatory="true"/>
              <require key="cap3141" mandatory="false"/>
              <require key="GPI"/>
              <require key="GPU" mandatory="false"/>
              <require key="I/O"/>
              <require key="LOG" mandatory="false"/>
              <in name="trigger" type="control"/>
              <out name="done" type="control"/>
              <expression/>
              <condition>
                ${trigger} :eq: []
              </condition>
            </defun>
            <connect-in port="trigger" place="trigger"/>
            <connect-out port="done" place="done"/>
          </transition>
        </net>
      </defun>
      <connect-in port="trigger" place="done_init"/>
      <connect-out port="done" place="done"/>
    </transition>
  </net>
</defun>
