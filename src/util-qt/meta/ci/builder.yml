###############################################################################
# Globals
###############################################################################

globals:
  stages:
    - build-env
    - label-env
    - build
    - test

  variables:
    build_dir: ${CI_PROJECT_DIR}/build
    source_dir: ${CI_PROJECT_DIR}
    cmake_config_file: ${CI_PROJECT_DIR}/meta/ci/env/config.cmake
    toolchain_file: ${CI_PROJECT_DIR}/meta/ci/env/toolchains/${toolchain}.cmake
    test_timeout: 400
    timezone: Europe/Berlin
    docker_builder: ${CI_REGISTRY}/top/docker-images/docker-builder:latest

  # Script Snippets:
  # assemble job scripts using these for sake of consistency.
  .script_build: &script_build
    - command -v git &> /dev/null &&
      git config --global --add safe.directory ${CI_PROJECT_DIR} &&
      find ${CI_PROJECT_DIR} -name .gitmodules -type f
        | xargs -I {} grep -i 'path\s=\s' {}
        | sed -e 's/path\s=\s//g'
        | xargs -I {} git config --global --add safe.directory ${CI_PROJECT_DIR}/{}
    - eval "cmake -D CMAKE_TOOLCHAIN_FILE=${toolchain_file}
                  -C ${cmake_config_file}
                  -B ${build_dir}
                  -S ${source_dir}
                  ${SILENCE_CMAKE}"
    - eval "cmake --build ${build_dir}
                  --target install
                  -j ${num_processors}
                  ${SILENCE_CMAKE}"

  .script_test_base: &script_test_base
    - SILENCE_CMAKE=">/dev/null"
    - *script_build
    - cd ${build_dir}

  # Use a ccache stored in gitlab's cache.
  # the cache is specific to the environment used to avoid conflicts.
  .use_gitlab_backed_ccache:
    variables:
      CCACHE_DIR: ${source_dir}/ccache
      CCACHE_SLOPPINESS: time_macros
    cache:
      key: ${gitlab_cache_key}
      paths:
        - ${CCACHE_DIR}

  .use_gitlab_backed_ccache_readwrite:
    extends: [.use_gitlab_backed_ccache]
    resource_group: ${gitlab_cache_key}
    cache:
      policy: pull-push

  .use_gitlab_backed_ccache_read:
    extends: [.use_gitlab_backed_ccache]
    cache:
      policy: pull

###############################################################################
# Environments
###############################################################################

# every env_$x shall:
# - variable environment_key: a globally unique key for this
#   environment in meta/ci/env/*.cmake
# - variable GSPC_NODEFILE_FOR_TESTS: a file containing hosts to use
#   for testing
# - variable or before_script export `num_processors`
# - if using docker:
#   - variable docker_image: the tagged image in the registry
#   - let docker use given image on a valid runner
#   else:
#   - specify tags to select a matching runner
# - ensure the repository is checked out including submodules

# note: GPI-Space tests fork a lot, which in default docker
# configurations often is slow due to the default ulimits for nofiles
# and nproc being unlimited. When adding a runner or changing the tag
# required, make sure the new runner does not have that same
# issue. dockerd config should specify default_ulimits that are saner
# than unlimited, e.g. nofiles=1024 and nproc=65335.
# Additionally, virtual memory uses shm_open() which on Linux defaults
# to using /dev/shm, which by default docker gives 64MB to. This can
# be configured in the dockerd config globally, or in the gitlab
# runner config.
# Example configuration of `docker06`:
#   root@n06:~# tail -n 14 /etc/docker/daemon.json | head -n 13
#     "default-shm-size": "64G",
#     "default-ulimits": {
#       "nofile": {
#         "Name": "nofile",
#         "Hard": 1024,
#         "Soft": 1024
#       },
#       "nproc": {
#         "Name": "nproc",
#         "Soft": 65536,
#         "Hard": 65536
#       }
#     }

environments:
  matrix:
    - values:
        os_name: [centos]
        os_version: ["7"]
        compiler: [gcc]
      config:
        # some tests loose their environment (e.g. system tests)
        # due to centos-release-scl packages.
        # on centos7 this causes the compiler to no longer be found
        # by said tests.
        variables:
          CC: /usr/lib64/ccache/gcc
          CXX: /usr/lib64/ccache/g++
    - values:
        os_name: [centos]
        os_version: ["7"]
        compiler: [clang]
      config:
        # some tests loose their environment (e.g. system tests)
        # due to centos-release-scl packages.
        # on centos7 this causes the compiler to no longer be found
        # by said tests.
        variables:
          CC: /usr/lib64/ccache/clang
          CXX: /usr/lib64/ccache/clang++
    - values:
        os_name: [oraclelinux]
        os_version: ["8"]
        compiler: [gcc, clang]
    - values:
        os_name: [ubuntu]
        os_version: ["18-04", "20-04", "22-04"]
        compiler: [gcc, clang]

  config:
    variables:
      docker_image: ${CI_REGISTRY_IMAGE}/${os_name}${os_version}_${compiler}
      docker_image_tag: latest
      docker_workdir: ${CI_PROJECT_DIR}/meta/ci/docker
      docker_file: ${CI_PROJECT_DIR}/meta/ci/docker/${os_name}${os_version}_${compiler}/Dockerfile
      gitlab_cache_key: ${os_name}${os_version}_${compiler}_${CI_COMMIT_REF_SLUG}
      GSPC_NODEFILE_FOR_TESTS: /etc/hostname
      GIT_SUBMODULE_STRATEGY: recursive
      toolchain: ${compiler}_ccache
    image: ${docker_image}:${docker_image_tag}
    tags: [docker-8cpu-16gb]
    before_script:
      - export num_processors=$(nproc)

###############################################################################
# Jobs
###############################################################################

# This entry defines job building blocks and will assign them to each
# environment.
# Define what a job does using these.
jobs:
  - config:
      # Build the image described in the environment for later use.
      # note: Requires a runner that can `docker build`, which when using
      # docker means the runner has to be in priviledged mode to allow for
      # docker-in-docker, and the docker daemon has to be exposed.
      stage: build-env
      image: ${docker_builder}
      variables:
        GIT_SUBMODULE_STRATEGY: none
      tags: [docker]
      script:
        - docker build
            --pull
            --no-cache
            --build-arg USER_ID=9999
            --build-arg GROUP_ID=9999
            --build-arg USER_NAME=ci-user
            --file ${docker_file}
            --tag ${docker_image}:${CI_COMMIT_REF_SLUG}
            ${docker_workdir}
        - docker push "${docker_image}:${CI_COMMIT_REF_SLUG}"
      retry: 2
      rules:
        - if: '$run_pre_build != "false"'

  - depends_on:
      - job: build-env
        optional: true
    config:
      stage: label-env
      image: ${docker_builder}
      tags: [docker]
      script:
        - current_tag=$(TZ=${timezone} date +%y-%m-%d)
        - docker pull "${docker_image}:${CI_COMMIT_REF_SLUG}"
        - docker tag "${docker_image}:${CI_COMMIT_REF_SLUG}" "${docker_image}:${current_tag}"
        - docker tag "${docker_image}:${CI_COMMIT_REF_SLUG}" "${docker_image}:latest"
        - docker push "${docker_image}:${current_tag}"
        - docker push "${docker_image}:latest"
      rules:
        - if: '$run_pre_build != "false"'

  - depends_on:
      - job: build-env
        optional: true
      - job: label-env
        optional: true
    config:
      stage: build
      extends: [.use_gitlab_backed_ccache_readwrite]
      script:
        - *script_build

  - depends_on: [build]
    config:
      stage: test
      extends: [.use_gitlab_backed_ccache_read]
      script:
        - *script_test_base
        - ctest --output-on-failure
                --timeout ${test_timeout}
                --schedule-random
                --label-exclude "performance_test|requires_vmem"
                -j ${num_processors}
