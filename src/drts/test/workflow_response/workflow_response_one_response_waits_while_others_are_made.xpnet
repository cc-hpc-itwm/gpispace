<defun name="workflow_response">
  <inout name="state" type="unsigned long" place="state"/>
  <in name="random_module_calls" type="unsigned long" place="random_module_calls"/>
  <out name="done" type="control" place="done_done"/>
  <net>
    <struct name="value_and_endpoint">
      <field name="value" type="unsigned long"/>
      <field name="address" type="string"/>
      <field name="port" type="unsigned int"/>
    </struct>

    <place name="state" type="unsigned long"/>
    <place name="get_and_update_state_trigger" type="value_and_endpoint"/>

    <transition name="get_and_update_state">
      <defun>
        <require key="management" mandatory="true"/>
        <inout name="state" type="unsigned long"/>
        <in name="trigger" type="value_and_endpoint"/>
        <module name="workflow_response" function="get_and_update_state (state, trigger)">
          <cinclude href="drts/workflow_response.hpp"/>
          <ld flag="-lgspc"/>
          <code><![CDATA[
          gspc::workflow_response (trigger.address, trigger.port, state);

          state += trigger.value;
          ]]></code>
        </module>
      </defun>
      <connect-inout port="state" place="state"/>
      <connect-in port="trigger" place="get_and_update_state_trigger"/>
    </transition>

    <place name="random_module_calls" type="unsigned long"/>

    <transition name="random_module_call">
      <defun>
        <require key="work" mandatory="true"/>
        <inout name="counter" type="unsigned long"/>
        <module name="workflow_response" function="random_call (counter)">
          <cinclude href="chrono"/>
          <cinclude href="random"/>
          <cinclude href="thread"/>
          <cxx flag="--std=c++11"/>
          <code><![CDATA[
            counter--;

            std::mt19937_64 eng (std::random_device{}());
            std::uniform_int_distribution<> dist (10, 50);
            std::this_thread::sleep_for
              (std::chrono::milliseconds (dist (eng)));
          ]]></code>
        </module>
        <condition>${counter} :ne: 0UL</condition>
      </defun>
      <connect-inout port="counter" place="random_module_calls"/>
    </transition>

    <transition name="done_module_calls">
      <defun>
        <in name="consume" type="unsigned long"/>
        <out name="produce" type="control"/>
        <expression>${produce} := []</expression>
        <condition>${consume} :eq: 0UL</condition>
      </defun>
      <connect-in port="consume" place="random_module_calls"/>
      <connect-out port="produce" place="done"/>
    </transition>

    <place name="done" type="control"/>

    <place name="check_done_trigger" type="value_and_endpoint"/>

    <transition name="check_done">
      <defun>
        <require key="management" mandatory="true"/>
        <in name="done" type="control"/>
        <in name="trigger" type="value_and_endpoint"/>
        <module name="workflow_response" function="check_done (done, trigger)">
          <cinclude href="drts/workflow_response.hpp"/>
          <ld flag="-lgspc"/>
          <code><![CDATA[
          gspc::workflow_response (trigger.address, trigger.port, done);
          ]]></code>
        </module>
      </defun>
      <connect-in port="done" place="done"/>
      <connect-in port="trigger" place="check_done_trigger"/>
    </transition>

    <place name="done_done" type="control"/>
  </net>
</defun>
