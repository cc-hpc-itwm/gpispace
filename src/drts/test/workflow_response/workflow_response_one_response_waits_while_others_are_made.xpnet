<defun name="workflow_response">
  <inout name="state" type="unsigned long" place="state"/>
  <in name="random_module_calls" type="unsigned long" place="random_module_calls"/>
  <out name="done" type="control" place="done_done"/>
  <in name="register_host" place="register_host" type="string"/>
  <in name="register_port" place="register_port" type="unsigned int"/>
  <net>
    <struct name="value_and_response_id">
      <field name="value" type="unsigned long"/>
      <field name="response_id" type="string"/>
    </struct>

    <place name="state" type="unsigned long"/>
    <place name="get_and_update_state_trigger" type="value_and_response_id" put_token="true"/>

    <transition name="get_and_update_state">
      <defun>
        <inout name="state" type="unsigned long"/>
        <in name="trigger" type="value_and_response_id"/>
        <out name="response" type="unsigned long"/>
        <expression>
          ${response} := ${state};
          ${state} := ${state} + ${trigger.value};
        </expression>
      </defun>
      <connect-inout port="state" place="state"/>
      <connect-in port="trigger" place="get_and_update_state_trigger"/>
      <connect-response port="response" to="trigger"/>
    </transition>

    <place name="random_module_calls" type="unsigned long"/>

    <transition name="random_module_call">
      <defun>
        <require key="work" mandatory="true"/>
        <inout name="counter" type="unsigned long"/>
        <module name="workflow_response" function="random_call (counter)">
          <cinclude href="chrono"/>
          <cinclude href="random"/>
          <cinclude href="thread"/>
          <cxx flag="--std=c++11"/>
          <code><![CDATA[
            counter--;

            std::random_device eng;
            std::uniform_int_distribution<> dist (10, 50);
            std::this_thread::sleep_for
              (std::chrono::milliseconds (dist (eng)));
          ]]></code>
        </module>
        <condition>${counter} :ne: 0UL</condition>
      </defun>
      <connect-inout port="counter" place="random_module_calls"/>
    </transition>

    <transition name="done_module_calls">
      <defun>
        <in name="consume" type="unsigned long"/>
        <out name="produce" type="control"/>
        <expression>${produce} := []</expression>
        <condition>${consume} :eq: 0UL</condition>
      </defun>
      <connect-in port="consume" place="random_module_calls"/>
      <connect-out port="produce" place="done"/>
    </transition>

    <place name="done" type="control"/>

    <place name="check_done_trigger" type="value_and_response_id" put_token="true"/>

    <transition name="check_done">
      <defun>
        <inout name="done" type="control"/>
        <in name="trigger" type="value_and_response_id"/>
        <expression/>
      </defun>
      <connect-in port="done" place="done"/>
      <connect-in port="trigger" place="check_done_trigger"/>
      <connect-response port="done" to="trigger"/>
    </transition>

    <place name="done_done" type="control" put_token="true"/>

    <place name="register_host" type="string"/>
    <place name="register_port" type="unsigned int"/>
    <transition name="register">
      <defun>
        <in name="host" type="string"/>
        <in name="port" type="unsigned int"/>
        <module name="workflow_response" function="notify_running (host, port)">
          <cinclude href="rpc/remote_function.hpp"/>
          <cinclude href="rpc/remote_tcp_endpoint.hpp"/>
          <cinclude href="test_start_callback.hpp"/>
          <cinclude href="util-generic/scoped_boost_asio_io_service_with_threads.hpp"/>
          <code><![CDATA[
            fhg::util::scoped_boost_asio_io_service_with_threads io_service (1);
            fhg::rpc::remote_tcp_endpoint endpoint (io_service, host, port);
            fhg::rpc::sync_remote_function<protocol::callback> {endpoint}();
          ]]></code>
        </module>
      </defun>
      <connect-in port="host" place="register_host"/>
      <connect-in port="port" place="register_port"/>
    </transition>
  </net>
</defun>
