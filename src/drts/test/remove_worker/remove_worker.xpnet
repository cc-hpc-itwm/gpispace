<defun name="test_remove_worker">
  <in name="address" type="string"/>
  <in name="port" type="unsigned int"/>
  <out name="done" type="control"/>
  <module name="test_remove_worker"
          function="done connect_and_wait (address, port)"
          pass_context="true">
    <cinclude href="boost/asio/connect.hpp"/>
    <cinclude href="boost/asio/io_service.hpp"/>
    <cinclude href="boost/asio/ip/tcp.hpp"/>
    <cxx flag="--std=c++11"/>
    <code><![CDATA[
    boost::asio::io_service io_service;
    boost::asio::ip::tcp::socket socket (io_service);

    boost::asio::connect
      ( socket
      , boost::asio::ip::tcp::resolver (io_service)
      . resolve ({ address
                 , std::to_string (port)
                 , boost::asio::ip::tcp::resolver::query::flags()
                 }
                )
      );

    bool cancelled {false};

    //! \note: race: cancel before cancel handler gets installed
    _pnetc_context->execute_and_kill_on_cancel
      ( []()
        {
          while (1) {}
        }
      , [&cancelled]()
        {
          cancelled = true;
        }
      , [] (int signal)
        {
          throw std::logic_error
            ("unexpected signal: " + std::to_string (signal));
        }
      , [] (int exit_code)
        {
          throw std::logic_error
            ("unexpected exit wih code: " + std::to_string (exit_code));
        }
      )
      ;

    if (!cancelled)
    {
      //! \note: continue to work in order to let the test fail with a timeout
      while (1) {};
    }

    return we::type::literal::control();
    ]]></code>
  </module>
</defun>
