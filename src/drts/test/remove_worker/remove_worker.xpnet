<!-- This file is part of GPI-Space.                                       -->
<!-- Copyright (C) 2020 Fraunhofer ITWM                                    -->
<!--                                                                       -->
<!-- This program is free software: you can redistribute it and/or modify  -->
<!-- it under the terms of the GNU General Public License as published by  -->
<!-- the Free Software Foundation, either version 3 of the License, or     -->
<!-- (at your option) any later version.                                   -->
<!--                                                                       -->
<!-- This program is distributed in the hope that it will be useful,       -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of        -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          -->
<!-- GNU General Public License for more details.                          -->
<!--                                                                       -->
<!-- You should have received a copy of the GNU General Public License     -->
<!-- along with this program. If not, see <https://www.gnu.org/licenses/>. -->

<defun name="test_remove_worker">
  <properties name="drts">
    <property key="wait_for_output" value="true"/>
  </properties>
  <in name="address" type="string"/>
  <in name="port" type="unsigned int"/>
  <out name="done" type="control"/>
  <module name="test_remove_worker"
          function="done connect_and_wait (address, port)"
          pass_context="true">
    <cinclude href="boost/asio/connect.hpp"/>
    <cinclude href="boost/asio/io_service.hpp"/>
    <cinclude href="boost/asio/ip/tcp.hpp"/>
    <cinclude href="thread"/>
    <cinclude href="chrono"/>
    <cxx flag="--std=c++11"/>
    <code><![CDATA[
    boost::asio::io_service io_service;
    boost::asio::ip::tcp::socket socket (io_service);

    boost::asio::connect
      ( socket
      , boost::asio::ip::tcp::resolver (io_service)
      . resolve ({ address
                 , std::to_string (port)
                 , boost::asio::ip::tcp::resolver::query::flags()
                 }
                )
      );

    std::this_thread::sleep_for (std::chrono::seconds (2));

    try
    {
      _pnetc_context->execute_and_kill_on_cancel
        ( []()
          {
            while (1) {}
          }
        )
        ;
    }
    catch (drts::worker::context::cancelled const&)
    {
      return we::type::literal::control();
    }
    catch (...)
    {
      // fallthrough
    }

    //! \note: continue to work in order to let the test fail with a timeout
    while (1) {};
    ]]></code>
  </module>
</defun>
