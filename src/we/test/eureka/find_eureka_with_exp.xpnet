<!-- This file is part of GPI-Space.                                       -->
<!-- Copyright (C) 2020 Fraunhofer ITWM                                    -->
<!--                                                                       -->
<!-- This program is free software: you can redistribute it and/or modify  -->
<!-- it under the terms of the GNU General Public License as published by  -->
<!-- the Free Software Foundation, either version 3 of the License, or     -->
<!-- (at your option) any later version.                                   -->
<!--                                                                       -->
<!-- This program is distributed in the hope that it will be useful,       -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of        -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          -->
<!-- GNU General Public License for more details.                          -->
<!--                                                                       -->
<!-- You should have received a copy of the GNU General Public License     -->
<!-- along with this program. If not, see <https://www.gnu.org/licenses/>. -->

<defun name="find_eureka">

  <in name="eureka_gid" type="string" place="eureka_group"/>
  <in name="eureka_value" type="long" place="eureka_value"/>
  <in name="token" type="long" place="token"/>
  <out name="result" type="list" place="result"/>

  <net>
    <place name="token" type="long"/>
    <place name="event" type="long"/>
    <place name="eureka_value" type="long"/>
    <place name="eureka_group" type="string"/>

    <!-- simulate eureka task exiting faster, while others stall -->
    <transition name="generate_events">
      <defun>
        <in name="in" type="long"/>
        <in name="eureka" type="long"/>
        <in name="eureka_group" type="string"/>
        <out name="out" type="long"/>
        <module name="gen_eureka_with_exp"
                function="out generate_event (in, eureka)"
                eureka-group="find_small_value">
          <cinclude href="unistd.h"/>
          <code><![CDATA[
            if (in != eureka)
            {
              sleep(5);
            }

            return in;
          ]]></code>
        </module>
      </defun>
      <connect-in port="in" place="token"/>
      <connect-read port="eureka" place="eureka_value"/>
      <connect-read port="eureka_group" place="eureka_group"/>
      <connect-out port="out" place="event"/>
    </transition>

    <place name="result" type="list"/>

    <transition name="got_an_event_eureka">
      <defun>
        <in name="in" type="long"/>
        <in name="eureka" type="long"/>
        <in name="eureka_group" type="string"/>
        <out name="result" type="list"/>
        <out name="eureka_good" type="set"/> <!-- eureka, ID inserted for WE -->
        <expression>
          ${eureka_good} := set_insert (Set{}, ${eureka_group});
          ${result} := stack_push (List(), ${in});
        </expression>
        <condition>${in} :eq: ${eureka}</condition>
      </defun>
      <connect-in port="in" place="event"/>
      <connect-in port="eureka_group" place="eureka_group"/>
      <connect-read port="eureka" place="eureka_value"/>
      <connect-eureka port="eureka_good"/>
      <connect-out port="result" place="result"/>
    </transition>

    <transition name="no_event_eureka">
      <defun>
        <in name="in" type="long"/>
        <in name="eureka" type="long"/>
        <expression/>
        <condition>${in} :ne: ${eureka}</condition>
      </defun>
      <connect-in port="in" place="token"/>
      <connect-read port="eureka" place="eureka_value"/>
    </transition>
  </net>

</defun>
