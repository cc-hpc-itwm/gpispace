// This file is part of GPI-Space.
// Copyright (C) 2021 Fraunhofer ITWM
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

#include <boost/test/unit_test.hpp>

#include <drts/client.hpp>
#include <drts/drts.hpp>
#include <drts/scoped_rifd.hpp>

#include <test/make.hpp>
#include <test/parse_command_line.hpp>
#include <test/scoped_nodefile_from_environment.hpp>
#include <test/source_directory.hpp>
#include <test/shared_directory.hpp>

#include <we/expr/parse/parser.hpp>
#include <we/type/value/boost/test/printer.hpp>

#include <fhg/util/starts_with.hpp>
#include <util-generic/temporary_path.hpp>
#include <util-generic/testing/flatten_nested_exceptions.hpp>
#include <util-generic/testing/require_exception.hpp>

#include <stdexcept>
#include <string>

BOOST_AUTO_TEST_CASE
  (we_eureka_invalid_eureka_expression_throws_during_execution)
{
  boost::program_options::options_description options_description;

  options_description.add (test::options::source_directory());
  options_description.add (test::options::shared_directory());
  options_description.add (gspc::options::installation());
  options_description.add (gspc::options::drts());
  options_description.add (gspc::options::scoped_rifd());

  boost::program_options::variables_map vm
    ( test::parse_command_line
        ( boost::unit_test::framework::master_test_suite().argc
        , boost::unit_test::framework::master_test_suite().argv
        , options_description
        )
    );

  fhg::util::temporary_path const shared_directory
    ( test::shared_directory (vm)
    / "we_eureka_invalid_eureka_expression_throws_during_execution"
    );

  test::scoped_nodefile_from_environment const nodefile_from_environment
    (shared_directory, vm);

  fhg::util::temporary_path const _installation_dir
    (shared_directory / boost::filesystem::unique_path());
  boost::filesystem::path const installation_dir (_installation_dir);

  gspc::set_application_search_path (vm, installation_dir);

  vm.notify();

  gspc::installation const installation (vm);

  gspc::scoped_rifds const rifds ( gspc::rifd::strategy {vm}
                                 , gspc::rifd::hostnames {vm}
                                 , gspc::rifd::port {vm}
                                 , installation
                                 );
  gspc::scoped_runtime_system const drts
    (vm, installation, "work:1", rifds.entry_points());

  test::make_net_lib_install const workflow
    ( installation
    , "invalid_eureka_expression"
    , test::source_directory (vm) / "xpnet"
    , installation_dir
    );

  std::string const expected_parse_error_message
    ( []
      {
        try
        {
          (void) expr::parse::parser ("@GSPC_WE_TEST_EUREKA_INVALID_EXPRESSION@")
            . eval_all()
            ;
        }
        catch (...)
        {
          return fhg::util::current_exception_printer().string();
        }

        throw std::logic_error ("Can not compute expected parse error.");
      }()
    );

  fhg::util::testing::require_exception
    ( [&]
      {
        (void) gspc::client (drts).put_and_run (workflow.pnet(), {});
      }
    , std::runtime_error ("")
    , [&] (auto const&, auto const& catched)
      {
        if (!fhg::util::ends_with (expected_parse_error_message, catched.what()))
        {
          throw catched;
        }
      }
    );
}
